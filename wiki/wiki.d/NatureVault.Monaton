version=pmwiki-2.2.133 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Safari/537.36
author=
charset=UTF-8
csum=# Full programmability (Turing complete).    Blockchain coins like ETH or BTC are nothing more than incentives for miners providing to provide these four features.   
ctime=1613933501
host=68.231.69.235
name=NatureVault.Monaton
rev=193
targets=NatureVault.Transep,NatureVault.DigitalCollectibleNetwork,Category.Cryptics
text=(:Summary:The ideal "Traditional Cryptocurrency" that can be used by nearly everyone, nearly instantly, and nearly freely.:)%0a(:Published:2/21/21:)%0a(:Author:[[~GiverofMemory]]:)%0a(:License:[[https://en.m.wikipedia.org/wiki/Res_communis|Site License]]:)%0a(:Update:6/22/21:)%0a(:Maintainer:[[~GiverofMemory]]:)%0a(:Creator:[[]]:)%0a(:Categories:[[!Cryptics]]:)%0a(:Also:[[Digital collectible network]], [[Chromaton]], [[Transep]]:)%0a(:Archive:[[https://archive.is/HQj21|Archive.is]], [[https://web.archive.org/web/20210622155843/https://www.naturevault.org/wiki/pmwiki.php/NatureVault/Monaton|Archive.org]]:)%0a(:Download:[[{$FullName}?action=print|URL]],[[https://www.web2pdfconvert.com/|PDF from URL]]:)%0a%0a!!Introduction%0a%0aBlockchain coins aren't the real money.  Blockchain is the network of banks.  Tokens are the Federal Reserve.  So blockchain's optimum use case is as a settlement layer.  And knowing this we can create the best blockchain.  %0a%0aThe important factors in a blockchain are: %0a%0a# Cheap fees forever (non-deflationary emission) %0a%0a# Fast settlement (High TPS)%0a%0a# High security (resistance to 51%25 attack) Which includes Decentralization%0a%0a# Full programmability (Turing complete).  %0a%0aBlockchain coins like ETH or BTC are nothing more than incentives for miners providing to provide these four features.  %0a%0aThe real money is tokens like Tian.  Blockchain coins (Like BTC or ETH) are like stocks or assets that incentivize miners to provide secure and fast settlement.  Tokens will eventually be layer-2's and will only settle with the blockchain daily or at another set interval.%0a%0a!!Overview%0aMonaton is an attempt at perfecting "Last Generation" or "Legacy" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate globally accepted, truly random numbers since we don't know who is going to win the next block.  Many applications can be built upon just this aspect alone. %0a%0aWe will make some tweaks to Nakamoto's original design in 3 main places.  %0a%0a# Consumer hardware mining.  We will make sure that 1 PC = 1 Vote.  Sha-256 has been easily parallelized making asic's the only profitable way to mine Bitcoin.  Solar Designer and others have been tirelessly working to create hashing algorithms that keep mining within reach of consumer hardware.%0a%0a# Scaling Blocksize.  See [[Transep]] and [[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|Meta ledger]] for more info; we will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization".  Side-chains work; as demonatrated by Dogecoin basically being a side-chain to Litecoin (merged mining).%0a%0a# Forever block reward.  Transaction fees are scaling unsustainably in Bitcoin and fees will not be sustainable when all Bitcoin are mined.  This is because the transaction fees will become way too high when there is no longer a block reward.  Around 2000 transactions fit in a block [[https://cryptocoinsinfoclub.com/bitcoin/how-many-transactions-in-a-bitcoin-block|#]], and with current block reward of 6.25 bitcoin at $50,000, that would mean at this rate each transaction would need to pay an extra (6.25*50,000)/2000 = $156 (on top of the roughly $5 fees bitcoin currently has per transaction).  It is not feasible to pay miners just in fees as this would make all transactions that are under $10,000 impractical.  Therefore we will instead pay miners in a small inflation rate of the coin to keep fees low and people sending coins.  Of course having 'infinitely' large blocks will help, but still fees would grow too high unless there is a small amount of inflation to reward miners.  Bitcoin currently has over 2%25 inflation (in 2021) and it's price keeps rising which proves that a small predictable inflation is not a bad thing!%0a%0a%0a!!BlockTock%0aBlockTock is an idea to allow for scheduled execution smart contracts.  The idea is simple, you "sign up" an address to receive dust from every mined block.  This transaction can help smart contracts to do something at a scheduled time.  There is a transaction in every block that creates new coins and gives them to miners, called a "coinbase" transaction (no relation to the website).  Every signed up address would be added to this transaction and get the smallest unit of currency.%0a%0a!!Genesis%0aThis will likely he a hard fork of Dogecoin.  The reason for this is there is already a large userbase, and the same type of people who like dogecoin will like this coin.  The block reward will start out the same as well with 10,000 coins per block (but will grow slowly over time) so we are in a perpetual tail [[#emission|emission]] that tends towards 1%25 inflation instead of the 0%25 inflation that Doge tends towards.%0a%0aForking a current coin's blockchain is helpful in that we don't have to have a period of relatively high emission to create the initial coin distribution.  Since Doge is already widely and somewhat fairly distributed, it is a good starting point at which we can start with around 4%25 inflation and head down to 1%25 instead of starting at 100%25 inflation rate.%0a%0a!!Emission [[#emission]]%0aEmission is decided to be as fair as possible to both late and early adopters.  The way we achieve this is by having an increase in coin emission above last years emmission by ~1%25.  This means that more coins will be mined next year as compared to this year, but only ~1%25 more so inflation will be minimal.  There still is an early adopter advantage, it will likely be much easier to mine this year than next year because mining competition will likely grow by much more than 1%25 per year.  The reason why we don't tune the reward to give exactly 1%25 of the total coins per year, is that how do we initially distribute the coin?  By letting inflation %25 be high early and gradually lower toward 1%25, we get a very fair and decentralized distribution. %0a%0aAs time goes on, the coin will reach a place where the initial amount of coins mined per year is insignificant to the total coin supply.  At this point we will have reached the true tail emission, where the coin supply grows by only 1%25 per year.  This is achieved by increasing the block reward by 1.0101010101...%25 each year compared to the previous year. See [[#attach|attachments]] for a csv file showing this.%0a%0a!!Algorithm%0aIdeally an algorithm that is both memory and L2 Cache (and ideally L1 and L3) hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows since they don't have enough Cache and/or Memory.  This is fine for CPU's since firstly when they are in consumer grade hardware they have more cache and memory than any gpu or asic, but also because consumer hardware keeps increasing cache and memory every year.  %0a%0aA good candidate is Yespower and perhaps some progressive cryptonight algorithms.  The goal is to achieve as close to "1 CPU = 1 Vote" as possible.  Factorizations of large numbers is an ideal candidate and is used in [[digital collectible network]] because it is "1 CPU + 1 GPU = 1 Vote" (which is even harder to build specialized mining rigs for) however it would be difficult to implement into a traditional cryptocurrency since in factorization, collaborating groups of miners would get more than linear increases in factorization speed.  Finding the factors is not a random chance, so collaborating miners could win proportionally more blocks than solo or small pools.%0a%0a!!Coinbase maturity%0aYou must wait 40 weeks (9 months) after mining a block to spend the transactions.  Bitcoin is currently 1000 minutes which is about 17 hours.  This 9 month requirement makes sure miners are dedicated and not just jumping to the most profitable coin.  This also makes it so that only invested miners can sell, thus stabilizing the price.  Also solo mining is more viable since you will have to wait 9 months to spend your coins anyway you may as well solo mine even if it takes a month to win a block.%0a%0a%0a%0a!!Transaction fees%0aNo minimum transaction fee.  You can add a transaction fee for transaction priority to miners if desired.  Theoretically since we never run out of block rewards, we don't technically need transaction fees.  In practice some fees will be needed to incentivize miners and [[#masternodes|masternodes]] to pick up all transactions.%0a!!Hashchain[[#hashchain]]%0aSee [[transep]] and [[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|meta ledger]] for a more detailed rundown.%0aIdeally consists of only a chain of final block hashes.  Transactions are kept on sidechains and these proposed (candidate) transaction blocks must be proposed to at least 50%25 of the network before the last block reward is proposed to 50%25 of the network.  So if a miner did not hear about a transaction block before the last block was mined, he will not accept a vote for that block as the winner for the next block.%0a%0a!!Hash-blocks%0aA series of hash-blocks is what makes up the hashchain.  Each hash-block is like a blockheader on a typical blockchain with a couple extra fields.  However we omit version stamp.  %0a%0aThe timestamp cannot be trusted.  Say a miner sends out a hash-block with an earlier timestamp than another hash-block, yet you heard about the later timestamped hash-block first.  Which one was really first?  The one you heard about first, the timestamp doesn't matter.  Thus we would omit this, however we see in [[#components|hash-block components]] that we may have a use for the timestamp.%0a%0aSecondly the version number is a centralized thing and if the devs want they can change this and then tell miners which version numbers to accept or reject.  I don't think devs should have this power and see no reason for this other than acting as a sort of checkpoint, miners can't be mining an alternate chain in secret and then broadcast it since they wouldn't know what version numbers to use.  If we want to do checkpoints then we can just do checkpoints instead of version numbers; and instead of the version number hack we can be transparent about intentions.%0a%0a!!!Components of each hash-block[[#components]]%0a!!!!Timestamp%0aAs we said before, a timestamp is basically worthless in our hashchain since it cannot be trusted.  However I have one possible use for it.  Lets say we are all happily mining on the hashchain and out of nowhere someone proposes a chain restructure of 100 blocks that we have never seen before.  How do we know that the difficulty the miner used was valid when they mined it? In this case we can use the timestamps of our old blockchain and the difficulty, and match them up with the new chain and see if the difficulties they used match up with their timestamps and our timestamps.  This way we can verify that the segregated miner was doing at least as much work as we were before we accept his chain restructure.%0a!!!!Previous hash-block hash%0aThe hash of the entire previous hash-block.  This is different than the merkle root that resides within the last hash-block; the previous hash-block hash includes the hash of the last hash-block in entirety, including the winning nonce. %0a!!!!Candidate block hash (merkle root)%0aIn our design, transactions are not included into the the main blockchain (called hashchain). They are kept on a sidechain that both [[#cnodes|cnodes]] and miners would maintain. The link between the sidechain and hashchain is the merkle root (hash of the candidate transaction block).  The transaction block is hashed and this final hash is included in the hash-block.  The transaction block is called a candidate block before it's root is included in the hashchain, and it is called a target block after it is included in the chain.  Target blocks are candidate blocks that won by being mined upon by a miner.%0a!!!!Difficulty%0aThe difficulty is how many leading zeroes are needed when the nonce is hashed with the merkle root. When another miner ([[#dnode|dnode]]) recieves a proposed hash-block, they will check what they believe to be the network difficulty against the hash-block's proposed network difficulty.  Then they will hash the proposed hash-block's nonce and merkle root and see that the difficulty requirement was met.  The difficulty does not need to be explicity said in the hash-block since just hashing the nonce with the merkle root will tell you the difficulty, but it does help hashchain analysis after the fact, so we will keep it.%0a!!!!Nonce%0aThe nonce can be as long as desired, which solves the current problem of not having enough digits allowed to solve the problem at the given difficulty.  A nonce is like a key and it is a number that, when hashed with the merkle root, gives us a number that has a certain number of leading zeroes that fulfills the difficulty.%0a!!!!Coinbase tx%0aThe coinbase transaction is where new coins are minted.  The miner specifies how many coins are made, and they are given to the address of their choice if their hash-block is accepted by the other miners.%0a!!!!Feebase tx%0aThe feebase tx is the [[#cnodes|cnodes]] bid for having his block be accepted to the network.  By signing his cblock, the [[#cnodes|cnode]] verifies that they transfer the bid coins to the miner upon their block bieng accepted into the network.  Basically the [[#cnodes|cnode]] is writing a signed check that the miner is allowed to endorse and deposit to an address of his choice.%0a%0a!!Transaction block (sidechain)%0a!!Blocksize [[#parcel]]%0a!!!Hash-blocks%0aThe blocksize transmitted by a miner is constant and very small, only a few hundred bytes.  %0a%0a!!!Transaction blocks%0aHowever transaction blocks which can be proposed by any node not just miners, can be as large as you like.  The catch is you have to get it transmitted to 50%25 of miners before a solution for the the last block is found.  Thus an "optimum size" will be arrived on by market forces to propose a currently correct transaction block (no other transactions in the block were mined in a previous block) in time for it to be useful and maximize transactions present to maximize fees generated.  Minimizing the size of the of transactions and maximizing their fee to put in your block (knapsack optimization), but also minimizing time to travel across the blockchain is our "parcel optimization".  In practice; minimizing the size of the transaction will also minimize the time to travel, however the size of the parcel (amount of transactions to include) is also a variable in our parcel optimization.%0a%0a!!!!Candidate blocks%0aCandidate blocks are transaction blocks compiled by [[#cnodes|cnodes]] that have been broadcast to the network.%0a!!!!Target blocks%0aTarget blocks are candidate blocks that have been not only broadcast to the network as candidate blocks, but also been mined upon by a winning miner  and whose hash is included in the [[#hashchain|hashchain]].%0a!!Determiner nodes [[#dnode]]%0aAka miners or dnodes, determiner nodes decide which candidate block to mine on.  If they win the mining challenge, then the candidate block they were mining on becomes a target block, a block who has made it into the [[#hashchain|hashchain]] and been confirmed.%0a!!Compiler nodes [[#cnodes]]%0aCnodes for short, they are really just normal nodes that decide to compile transactions they hear (after checking they weren't already included in a block or likely are in the current block bieng mined) into candidate blocks and recieve the fees from the transactions.  They then make a bid so the winning miner will select their cblock (candidate block) to mine on. When the challenge is won, only the hash of the node block makes it into the blockchain. Thus the blockchain will be renamed to the [[#hashchain|hashchain]]. Cnodes need not only the hashchain to work with, but all previous target blocks (cblocks that are called out in the hashchain, so they were accepted by the network) so they can verify all proposed transactions to include them in their cblock.%0a%0a!!Broadcaster nodes%0aBnodes for short, broadcaster nodes are just customer nodes that create valid transactions.  They would have the hashchain and only transaction blocks that they need in order to know their current funds.%0a!!Public key cryptography%0aCryptography should be ECDSA-512 or ECDSA-1024 (Bitcoin is ECDSA-256) to resist conventional and quantum computers for as long as possible.  Soft forking to new address requirements in the future would keep the addresses safe from attack.%0a%0a%0a!!Blocktime%0aEdit: may start around 60s but this depends on the hashing algorithm and how fast it is.  The below is best case scenario but not likely. %0a%0aStarts at 40 seconds and reduces 1%25 every year until it reaches a minimum of 14.79 seconds (100 years) at which point it stays constant.  The reason for this number is it takes light 130 ms to go around the world so assuming we have technology that approaches that, we want it to be 100x longer than that so the previous miner only has a 1%25 advantage on the next block since he started mining 130ms before you did.  An extra 1.79 seconds for delays in transmission making it 14.79s.%0a%0aThe reason it is 40s and not 60s to start when compared to doge, is our miner blocks are much smaller than doge (256 bytes? vs 500 kilobytes) and thus traverse the network much faster, likely in under a second.%0a%0a!!Block reward%0a10000 coins per block.  After 161 years roughly, this number is increased 1%25 per year to keep a 1%25 yearly inflation after the blocktime reaches a minimum.  So year 162 each block will have a 10,100 coin reward; in year 163 each block will have a 10,201 coin reward, etc.%0a%0a!!Marketing%0a!!!Mascot%0aBlue doge looking pepe.  Or a demented fox.%0a!!!Catchphrase%0aPew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo and zoom zoom and gotta go fast and oh fo sho and to the moon and nyoooom and up up and away and i have a very particular set of skills%0aBits at the speed of sound%0a!!!Name%0aMona- refers to money or Mona lisa.  -ton refers to "smallest unit of" or literally a Ton of something.  Adapted from the name chromaton.%0a%0aOr Sonicoin referring to money at the speed of sound.%0a%0aOr Tailcoin for tail emission. Or just Tail or Tails.%0a%0a!!Developer responsibilities%0aI am not going to contact an exchange to list the coin.  If you want to do this than that is great. To me it is more important to have a community that shares or barters coins before having a mechanism to sell them.%0a%0aI am not going to run a pool.  I suggest solo mining when possible.%0a%0aI am not going to continue to develop the miner.  People that work on miners can do that, we will launch with a basic miner.%0a%0aI am not going to maintain general development fund.  Each developer can have their own fund (receiving address) that they maintain.%0a%0aI will, as long as I am able, make sure of two things.  First that the algorithm continues to be ASIC (and GPU) resistant, and that the addresses remain secure from attack.  Soft or hard forks will be done as needed to maintain these two things.%0a!!Links%0a%0aHistorical block propogation times (probably around 1s) [[http://bitcoinstats.com/network/propagation/|#]] [[https://bitcoin.stackexchange.com/questions/10821/how-long-does-it-take-to-propagate-a-newly-created-block-to-the-entire-bitcoin-n|#]].%0a%0aAsymetric merged mining [[https://www.reddit.com/r/dogecoindev/comments/lrh4q9/asymmetric_merged_mining/|#]]%0a%0aDogetags for sending coins to a handle instead of recieving address [[https://www.reddit.com/r/dogecoindev/comments/lpxf1r/dogetags_venmosquare_usernames_for_dogecoin/|#]]%0a%0aMeta ledger as a precursor to this idea [[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|#]]%0a%0aBitcoin Scalability and Blocktime [[https://dailyhodl.com/2020/08/03/bitcoin-scalability-and-the-block-propagation-problem/|#]]%0a%0aLearning about Cache [[https://www.techspot.com/article/2066-cpu-l1-l2-l3-cache/|#]]%0a%0aLoki algorithm discussion [[https://loki.network/wp-content/uploads/2018/10/LokiWhitepaperV3_1.pdf|#]]%0a%0aStablecoin stability [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3508006|#]]%0a%0aYespower PoW [[https://www.openwall.com/yespower/|#]] [[https://www.openwall.com/presentations/BSidesLjubljana2017-Yescrypt-Large-scale-Password-Hashing/|#]] [[https://www.openwall.com/presentations/PHDays2014-Yescrypt/|#]].%0a%0abcrypt [[https://www.openwall.com/presentations/Passwords14-Energy-Efficient-Cracking/|#]]%0a%0apassword security history [[https://www.openwall.com/presentations/Passwords12-The-Future-Of-Hashing/|#]]%0a%0apassword hashing [[https://www.openwall.com/presentations/YaC2012-Password-Hashing-At-Scale/|#]]%0a%0aROM hard hashing functions [[https://www.openwall.com/presentations/ZeroNights2012-New-In-Password-Hashing/|#]]%0a%0aEquihash analysis [[https://www.openwall.com/articles/Zcash-Equihash-Analysis|#]]%0a%0aMerged mining [[https://coincentral.com/merged-mining/|#]].%0a%0aGNFS polynomial selection on GPU, sieving on CPU and post processing on clusters for multithreaded linear algebra (post #21) [[https://forums.anandtech.com/threads/nfs-home-needs-some-crunch.2248278/|#]]%0a%0a[[#attach]]
time=1624377584
author:1624377584=
diff:1624377584:1624377527:=25,27c25%0a%3c # Full programmability (Turing complete).  %0a%3c %0a%3c Blockchain coins like ETH or BTC are nothing more than incentives for miners providing to provide these four features.  %0a---%0a> # Full programmability (Turing complete).  Blockchain coins like ETH or BTC are nothing more than incentives for miners providing to provide these four features.  %0a
host:1624377584=68.231.69.235
author:1624377527=
diff:1624377527:1624377455:=10c10%0a%3c (:Archive:[[https://archive.is/HQj21|Archive.is]], [[https://web.archive.org/web/20210622155843/https://www.naturevault.org/wiki/pmwiki.php/NatureVault/Monaton|Archive.org]]:)%0a---%0a> (:Archive:[[https://archive.is/wyrfz|Archive.is]], [[|Archive.org]]:)%0a
host:1624377527=68.231.69.235
author:1624377455=
diff:1624377455:1624377437:=5c5%0a%3c (:Update:6/22/21:)%0a---%0a> (:Update:3/1/21:)%0a
host:1624377455=68.231.69.235
author:1624377437=
diff:1624377437:1624165949:=41,42c41%0a%3c !!BlockTock%0a%3c BlockTock is an idea to allow for scheduled execution smart contracts.  The idea is simple, you "sign up" an address to receive dust from every mined block.  This transaction can help smart contracts to do something at a scheduled time.  There is a transaction in every block that creates new coins and gives them to miners, called a "coinbase" transaction (no relation to the website).  Every signed up address would be added to this transaction and get the smallest unit of currency.%0a---%0a> %0a
host:1624377437=68.231.69.235
author:1624165949=
diff:1624165949:1623941503:=23c23%0a%3c # High security (resistance to 51%25 attack) Which includes Decentralization%0a---%0a> # High security (resistance to 51%25 attack) %0a
host:1624165949=68.231.69.235
author:1623941503=
diff:1623941503:1623941478:=15c15%0a%3c Blockchain coins aren't the real money.  Blockchain is the network of banks.  Tokens are the Federal Reserve.  So blockchain's optimum use case is as a settlement layer.  And knowing this we can create the best blockchain.  %0a---%0a> Blockchain coins aren't the real money.  Blockchain is the network of banks.  Tokens are the Federal Reserve.  So blockchain's use case is as a settlement layer.  And knowing this we can create the best blockchain.  %0a
host:1623941503=68.231.69.235
author:1623941478=
diff:1623941478:1623941363:=21c21%0a%3c # Fast settlement (High TPS)%0a---%0a> # Fast settlement (TPS)%0a
host:1623941478=68.231.69.235
author:1623941363=
diff:1623941363:1622319357:=12,28d11%0a%3c %0a%3c !!Introduction%0a%3c %0a%3c Blockchain coins aren't the real money.  Blockchain is the network of banks.  Tokens are the Federal Reserve.  So blockchain's use case is as a settlement layer.  And knowing this we can create the best blockchain.  %0a%3c %0a%3c The important factors in a blockchain are: %0a%3c %0a%3c # Cheap fees forever (non-deflationary emission) %0a%3c %0a%3c # Fast settlement (TPS)%0a%3c %0a%3c # High security (resistance to 51%25 attack) %0a%3c %0a%3c # Full programmability (Turing complete).  Blockchain coins like ETH or BTC are nothing more than incentives for miners providing to provide these four features.  %0a%3c %0a%3c The real money is tokens like Tian.  Blockchain coins (Like BTC or ETH) are like stocks or assets that incentivize miners to provide secure and fast settlement.  Tokens will eventually be layer-2's and will only settle with the blockchain daily or at another set interval.%0a%3c %0a
host:1623941363=68.231.69.235
author:1622319357=
diff:1622319357:1622319261:=133c133%0a%3c Historical block propogation times (probably around 1s) [[http://bitcoinstats.com/network/propagation/|#]] [[https://bitcoin.stackexchange.com/questions/10821/how-long-does-it-take-to-propagate-a-newly-created-block-to-the-entire-bitcoin-n|#]].%0a---%0a> Historical block propogation times (probably around 1s) [[http://bitcoinstats.com/network/propagation/|#]].%0a
host:1622319357=68.231.69.235
author:1622319261=
diff:1622319261:1614660381:=132,133d131%0a%3c %0a%3c Historical block propogation times (probably around 1s) [[http://bitcoinstats.com/network/propagation/|#]].%0a
host:1622319261=68.231.69.235
author:1614660381=
diff:1614660381:1614660220:=93c93%0a%3c Bnodes for short, broadcaster nodes are just customer nodes that create valid transactions.  They would have the hashchain and only transaction blocks that they need in order to know their current funds.%0a---%0a> Bnodes for short, broadcaster nodes are just customer nodes that create valid transactions.  They would have the hashchain and only transaction blocks that they need to know the history of their funds.%0a
host:1614660381=68.2.112.187
author:1614660220=
diff:1614660220:1614660113:=88c88%0a%3c Aka miners or dnodes, determiner nodes decide which candidate block to mine on.  If they win the mining challenge, then the candidate block they were mining on becomes a target block, a block who has made it into the [[#hashchain|hashchain]] and been confirmed.%0a---%0a> Aka miners or dnodes, determiner nodes decide which candidate block to mine on.  If they win the mining challenge, then the candidate block they were mining on becomes a target block, a block who has made it into the hashchain and been confirmed.%0a
host:1614660220=68.2.112.187
author:1614660113=
diff:1614660113:1614660051:=86c86%0a%3c Target blocks are candidate blocks that have been not only broadcast to the network as candidate blocks, but also been mined upon by a winning miner  and whose hash is included in the [[#hashchain|hashchain]].%0a---%0a> Target blocks are candidate blocks that have been not only broadcast to the network as candidate blocks, but also been mined upon by a winning miner  and whose has is included in the [[#hashchain|hashchain]].%0a
host:1614660113=68.2.112.187
author:1614660051=
diff:1614660051:1614659763:=84c84%0a%3c Candidate blocks are transaction blocks compiled by [[#cnodes|cnodes]] that have been broadcast to the network.%0a---%0a> Candidate blocks are transaction blocks that have been broadcast to the network.%0a
host:1614660051=68.2.112.187
author:1614659763=
diff:1614659763:1614659703:=67c67%0a%3c The difficulty is how many leading zeroes are needed when the nonce is hashed with the merkle root. When another miner ([[#dnode|dnode]]) recieves a proposed hash-block, they will check what they believe to be the network difficulty against the hash-block's proposed network difficulty.  Then they will hash the proposed hash-block's nonce and merkle root and see that the difficulty requirement was met.  The difficulty does not need to be explicity said in the hash-block since just hashing the nonce with the merkle root will tell you the difficulty, but it does help hashchain analysis after the fact, so we will keep it.%0a---%0a> The difficulty is how many leading zeroes are needed when the nonce is hashed with the merkle root. When another miner ([[#dnode|dnode]]) recieves a proposed hash-block, they will check what they believe to be the network difficulty against the hash-block's proposed network difficulty.  Then they will hash the proposed hash-block's nonce and merkle root and see that the difficulty requirement was met.  The difficulty does not neet to be explicity said in the hash-block since just hashing the nonce with the merkle root will tell you the difficulty, but it does help hashchain analysis after the fact, so we will keep it.%0a
host:1614659763=68.2.112.187
author:1614659703=
diff:1614659703:1614659675:=87c87%0a%3c !!Determiner nodes [[#dnode]]%0a---%0a> !!Determiner nodes%0a
host:1614659703=68.2.112.187
author:1614659675=
diff:1614659675:1614651749:=67c67%0a%3c The difficulty is how many leading zeroes are needed when the nonce is hashed with the merkle root. When another miner ([[#dnode|dnode]]) recieves a proposed hash-block, they will check what they believe to be the network difficulty against the hash-block's proposed network difficulty.  Then they will hash the proposed hash-block's nonce and merkle root and see that the difficulty requirement was met.  The difficulty does not neet to be explicity said in the hash-block since just hashing the nonce with the merkle root will tell you the difficulty, but it does help hashchain analysis after the fact, so we will keep it.%0a---%0a> The difficulty is how many leading zeroes are needed when the nonce is hashed with the merkle root. When another miner (dnode) recieves a proposed hash-block, they will check what they believe to be the network difficulty against the hash-block's proposed network difficulty.  Then they will hash the proposed hash-block's nonce and merkle root and see that the difficulty requirement was met.  The difficulty does not neet to be explicity said in the hash-block since just hashing the nonce with the merkle root will tell you the difficulty, but it does help hashchain analysis after the fact, so we will keep it.%0a
host:1614659675=68.2.112.187
author:1614651749=
diff:1614651749:1614649651:=132,135d131%0a%3c %0a%3c Asymetric merged mining [[https://www.reddit.com/r/dogecoindev/comments/lrh4q9/asymmetric_merged_mining/|#]]%0a%3c %0a%3c Dogetags for sending coins to a handle instead of recieving address [[https://www.reddit.com/r/dogecoindev/comments/lpxf1r/dogetags_venmosquare_usernames_for_dogecoin/|#]]%0a
host:1614651749=5.149.253.57
author:1614649651=
diff:1614649651:1614649630:=19c19%0a%3c # Scaling Blocksize.  See [[Transep]] and [[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|Meta ledger]] for more info; we will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization".  Side-chains work; as demonatrated by Dogecoin basically being a side-chain to Litecoin (merged mining).%0a---%0a> # Scaling Blocksize.  See [[Transep]] and [[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|Meta-ledger]] for more info; we will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization".  Side-chains work; as demonatrated by Dogecoin basically being a side-chain to Litecoin (merged mining).%0a
host:1614649651=192.168.1.8
author:1614649630=
diff:1614649630:1614649614:=133c133%0a%3c Meta ledger as a precursor to this idea [[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|#]]%0a---%0a> Meta-Ledger as a precursor to this idea [[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|#]]%0a
host:1614649630=192.168.1.8
author:1614649614=
diff:1614649614:1614649593:=49c49%0a%3c See [[transep]] and [[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|meta ledger]] for a more detailed rundown.%0a---%0a> See [[transep]] and [[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|Meta-ledger]] for a more detailed rundown.%0a
host:1614649614=192.168.1.8
author:1614649593=
diff:1614649593:1614649578:=49c49%0a%3c See [[transep]] and [[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|Meta-ledger]] for a more detailed rundown.%0a---%0a> See [[transep]] for a more detailed rundown.%0a
host:1614649593=192.168.1.8
author:1614649578=
diff:1614649578:1614649532:=19c19%0a%3c # Scaling Blocksize.  See [[Transep]] and [[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|Meta-ledger]] for more info; we will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization".  Side-chains work; as demonatrated by Dogecoin basically being a side-chain to Litecoin (merged mining).%0a---%0a> # Scaling Blocksize.  See [[Transep]] for more info; we will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization".  Side-chains work; as demonatrated by Dogecoin basically being a side-chain to Litecoin (merged mining).%0a
host:1614649578=192.168.1.8
author:1614649532=
diff:1614649532:1614649492:=49d48%0a%3c See [[transep]] for a more detailed rundown.%0a
host:1614649532=192.168.1.8
author:1614649492=
diff:1614649492:1614648775:=19c19%0a%3c # Scaling Blocksize.  See [[Transep]] for more info; we will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization".  Side-chains work; as demonatrated by Dogecoin basically being a side-chain to Litecoin (merged mining).%0a---%0a> # Scaling Blocksize.  We will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization".  Side-chains work; as demonatrated by Dogecoin basically being a side-chain to Litecoin (merged mining).%0a
host:1614649492=192.168.1.8
author:1614648775=
diff:1614648775:1614648352:=9c9%0a%3c (:Also:[[Digital collectible network]], [[Chromaton]], [[Transep]]:)%0a---%0a> (:Also:[[Digital collectible network]], [[Chromaton]]:)%0a
host:1614648775=192.168.1.8
author:1614648352=
diff:1614648352:1614648120:=131,133d130%0a%3c %0a%3c Meta-Ledger as a precursor to this idea [[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|#]]%0a%3c %0a
host:1614648352=5.149.253.57
author:1614648120=
diff:1614648120:1614647931:=76,85c76,77%0a%3c !!!Hash-blocks%0a%3c The blocksize transmitted by a miner is constant and very small, only a few hundred bytes.  %0a%3c %0a%3c !!!Transaction blocks%0a%3c However transaction blocks which can be proposed by any node not just miners, can be as large as you like.  The catch is you have to get it transmitted to 50%25 of miners before a solution for the the last block is found.  Thus an "optimum size" will be arrived on by market forces to propose a currently correct transaction block (no other transactions in the block were mined in a previous block) in time for it to be useful and maximize transactions present to maximize fees generated.  Minimizing the size of the of transactions and maximizing their fee to put in your block (knapsack optimization), but also minimizing time to travel across the blockchain is our "parcel optimization".  In practice; minimizing the size of the transaction will also minimize the time to travel, however the size of the parcel (amount of transactions to include) is also a variable in our parcel optimization.%0a%3c %0a%3c !!!!Candidate blocks%0a%3c Candidate blocks are transaction blocks that have been broadcast to the network.%0a%3c !!!!Target blocks%0a%3c Target blocks are candidate blocks that have been not only broadcast to the network as candidate blocks, but also been mined upon by a winning miner  and whose has is included in the [[#hashchain|hashchain]].%0a---%0a> The blocksize transmitted by a miner is constant and very small, only a few hundred bytes.  However transaction blocks which can be proposed by any node not just miners, can be as large as you like.  The catch is you have to get it transmitted to 50%25 of miners before a solution for the the last block is found.  Thus an "optimum size" will be arrived on by market forces to propose a currently correct transaction block (no other transactions in the block were mined in a previous block) in time for it to be useful and maximize transactions present to maximize fees generated.  Minimizing the size of the of transactions and maximizing their fee to put in your block (knapsack optimization), but also minimizing time to travel across the blockchain is our "parcel optimization".  In practice; minimizing the size of the transaction will also minimize the time to travel, however the size of the parcel (amount of transactions to include) is also a variable in our parcel optimization.%0a> %0a
host:1614648120=5.149.253.57
author:1614647931=
diff:1614647931:1614647917:=
host:1614647931=5.149.253.57
author:1614647917=
diff:1614647917:1614647647:=75,76c75,76%0a%3c !!Blocksize [[#parcel]]%0a%3c The blocksize transmitted by a miner is constant and very small, only a few hundred bytes.  However transaction blocks which can be proposed by any node not just miners, can be as large as you like.  The catch is you have to get it transmitted to 50%25 of miners before a solution for the the last block is found.  Thus an "optimum size" will be arrived on by market forces to propose a currently correct transaction block (no other transactions in the block were mined in a previous block) in time for it to be useful and maximize transactions present to maximize fees generated.  Minimizing the size of the of transactions and maximizing their fee to put in your block (knapsack optimization), but also minimizing time to travel across the blockchain is our "parcel optimization".  In practice; minimizing the size of the transaction will also minimize the time to travel, however the size of the parcel (amount of transactions to include) is also a variable in our parcel optimization.%0a---%0a> !!Blocksize%0a> The blocksize transmitted by a miner is constant and very small, only a few hundred bytes.  However transaction blocks which can be proposed by any node not just miners, can be as large as you like.  The catch is you have to get it transmitted to 50%25 of miners before a solution for the the last block is found.  Thus an "optimum size" will be arrived on by market forces to propose a currently correct transaction block (no other transactions in the block were mined in a previous block) in time for it to be useful and maximize transactions present to maximize fees generated.%0a
host:1614647917=5.149.253.57
author:1614647647=
diff:1614647647:1614647496:=72c72%0a%3c The feebase tx is the [[#cnodes|cnodes]] bid for having his block be accepted to the network.  By signing his cblock, the [[#cnodes|cnode]] verifies that they transfer the bid coins to the miner upon their block bieng accepted into the network.  Basically the [[#cnodes|cnode]] is writing a signed check that the miner is allowed to endorse and deposit to an address of his choice.%0a---%0a> The feebase tx is the cnodes bid for having his block be accepted to the network.  By signing his cblock, the [[#cnodes|cnode]] verifies that they transfer the bid coins to the miner upon their block bieng accepted into the network.  Basically the [[#cnodes|cnode]] is writing a signed check that the miner is allowed to endorse and deposit to an address of his choice.%0a
host:1614647647=5.149.253.57
author:1614647496=
diff:1614647496:1614647444:=72c72%0a%3c The feebase tx is the cnodes bid for having his block be accepted to the network.  By signing his cblock, the [[#cnodes|cnode]] verifies that they transfer the bid coins to the miner upon their block bieng accepted into the network.  Basically the [[#cnodes|cnode]] is writing a signed check that the miner is allowed to endorse and deposit to an address of his choice.%0a---%0a> The feebase tx is the cnodes bid for having his block be accepted to the network.  By signing his cblock, the cnode verifies that they transfer the bid coins to the miner upon their block bieng accepted into the network.  Basically the cnode is writing a signed check that the miner is allowed to endorse and deposit to an address of his choice.%0a
host:1614647496=5.149.253.57
author:1614647444=
diff:1614647444:1614641635:=64c64%0a%3c In our design, transactions are not included into the the main blockchain (called hashchain). They are kept on a sidechain that both [[#cnodes|cnodes]] and miners would maintain. The link between the sidechain and hashchain is the merkle root (hash of the candidate transaction block).  The transaction block is hashed and this final hash is included in the hash-block.  The transaction block is called a candidate block before it's root is included in the hashchain, and it is called a target block after it is included in the chain.  Target blocks are candidate blocks that won by being mined upon by a miner.%0a---%0a> In our design, transactions are not included into the the main blockchain (called hashchain). They are kept on a sidechain that both cnodes and miners would maintain. The link between the sidechain and hashchain is the merkle root (hash of the candidate transaction block).  The transaction block is hashed and this final hash is included in the hash-block.  The transaction block is called a candidate block before it's root is included in the hashchain, and it is called a target block after it is included in the chain.  Target blocks are candidate blocks that won by being mined upon by a miner.%0a
host:1614647444=5.149.253.57
author:1614641635=
diff:1614641635:1614641545:=70c70%0a%3c The coinbase transaction is where new coins are minted.  The miner specifies how many coins are made, and they are given to the address of their choice if their hash-block is accepted by the other miners.%0a---%0a> The coinbase transaction is where new coins are minted.  The miner specifies how many coins are made and given to the address of their choice.%0a
host:1614641635=192.168.1.3
author:1614641545=
diff:1614641545:1614641294:=66c66%0a%3c The difficulty is how many leading zeroes are needed when the nonce is hashed with the merkle root. When another miner (dnode) recieves a proposed hash-block, they will check what they believe to be the network difficulty against the hash-block's proposed network difficulty.  Then they will hash the proposed hash-block's nonce and merkle root and see that the difficulty requirement was met.  The difficulty does not neet to be explicity said in the hash-block since just hashing the nonce with the merkle root will tell you the difficulty, but it does help hashchain analysis after the fact, so we will keep it.%0a---%0a> The difficulty is how many leading zeroes are needed when the nonce is hashed with the merkle root. When another miner (dnode) recieves a proposed hashblock, they will check what they believe to be the network difficulty against the hashblock proposed network difficulty.  Then they will hash the proposed hashblock's nonce and merkle root and see that the difficulty requirement was met.  The difficulty does not neet to be explicity said in the hashblock since just hashing the nonce with the merkle root will tell you the difficulty, but it does help hashchain analysis after the fact, so we will keep it.%0a
host:1614641545=68.2.112.187
author:1614641294=
diff:1614641294:1614641174:=62c62%0a%3c The hash of the entire previous hash-block.  This is different than the merkle root that resides within the last hash-block; the previous hash-block hash includes the hash of the last hash-block in entirety, including the winning nonce. %0a---%0a> The hash of the entire previous block.  This is different than the merkle root that resides within the last hash-block, the previous block hash includes the hash of the last hash-block in entirety, including the winning nonce. %0a
host:1614641294=68.2.112.187
author:1614641174=
diff:1614641174:1614641056:=62c62%0a%3c The hash of the entire previous block.  This is different than the merkle root that resides within the last hash-block, the previous block hash includes the hash of the last hash-block in entirety, including the winning nonce. %0a---%0a> The hash of the entire previous block.  This is different than the merkle root of the last block, the previous block hash includes the hash of the last hash-block in entirety, including the winning nonce. %0a
host:1614641174=68.2.112.187
author:1614641056=
diff:1614641056:1614640945:=56c56%0a%3c Secondly the version number is a centralized thing and if the devs want they can change this and then tell miners which version numbers to accept or reject.  I don't think devs should have this power and see no reason for this other than acting as a sort of checkpoint, miners can't be mining an alternate chain in secret and then broadcast it since they wouldn't know what version numbers to use.  If we want to do checkpoints then we can just do checkpoints instead of version numbers; and instead of the version number hack we can be transparent about intentions.%0a---%0a> Secondly the version number is a centralized thing and if the devs want they can change this and then tell miners which version numbers to accept or reject.  I don't think devs should have this power and see no reason for this other than acting as a sort of checkpoint, miners can't be mining an alternate chain in secret and then broadcast it since they wouldn't know what version numbers to use.  If we want to do checkpoints then we can just do checkpoints instead of version numbers and instead of this hack we can be transparent about it.%0a
host:1614641056=68.2.112.187
author:1614640945=
diff:1614640945:1614640831:=54,56c54,56%0a%3c The timestamp cannot be trusted.  Say a miner sends out a hash-block with an earlier timestamp than another hash-block, yet you heard about the later timestamped hash-block first.  Which one was really first?  The one you heard about first, the timestamp doesn't matter.  Thus we would omit this, however we see in [[#components|hash-block components]] that we may have a use for the timestamp.%0a%3c %0a%3c Secondly the version number is a centralized thing and if the devs want they can change this and then tell miners which version numbers to accept or reject.  I don't think devs should have this power and see no reason for this other than acting as a sort of checkpoint, miners can't be mining an alternate chain in secret and then broadcast it since they wouldn't know what version numbers to use.  If we want to do checkpoints then we can just do checkpoints instead of version numbers and instead of this hack we can be transparent about it.%0a---%0a> The timestamp cannot be trusted.  Say a miner sends out a hash-block with an earlier timestamp than another hash-block, yet you heard about the later timestamped hash-block first.  Which one was really first?  The one you heard about first, the timestamp doesn't matter.  Thus we would omit this, however we seein [[#components|hash-block components]] that we may have a use for this.%0a> %0a> Secondly the version number is a centralized thing and if the devs want they can change this and then tell miners which version numbers to accept or reject.  I don't think devs should have this power and see no reason for this other than acting as a sort of checkpoint, miners can't be mining an alternate chain in secret and then broadcast it since they wouldn't know what version numbers to use.  If we want to do checkpoints then we can just do checkpoints instead of version numbers and be transparent.%0a
host:1614640945=68.2.112.187
author:1614640831=
diff:1614640831:1614640600:=52,54c52,54%0a%3c A series of hash-blocks is what makes up the hashchain.  Each hash-block is like a blockheader on a typical blockchain with a couple extra fields.  However we omit version stamp.  %0a%3c %0a%3c The timestamp cannot be trusted.  Say a miner sends out a hash-block with an earlier timestamp than another hash-block, yet you heard about the later timestamped hash-block first.  Which one was really first?  The one you heard about first, the timestamp doesn't matter.  Thus we would omit this, however we seein [[#components|hash-block components]] that we may have a use for this.%0a---%0a> A series of hash-blocks is what makes up the hashchain.  Each hash-block is like a blockheader on a typical blockchain with a couple extra fields.  However we omit timestamp and version stamp.  %0a> %0a> The reason why we omit the timestamp is it cannot be trusted.  Say a miner sends out a hash-block with an earlier timestamp than another hash-block, yet you heard about the later timestamped hash-block first.  Which one was really first?  The one you heard about first, the timestamp doesn't matter.  So we will omit this.%0a
host:1614640831=68.2.112.187
author:1614640600=
diff:1614640600:1614640564:=58c58%0a%3c !!!Components of each hash-block[[#components]]%0a---%0a> !!!Components of each hash-block%0a
host:1614640600=68.2.112.187
author:1614640564=
diff:1614640564:1614640538:=58c58%0a%3c !!!Components of each hash-block%0a---%0a> !!!Components%0a
host:1614640564=68.2.112.187
author:1614640538=
diff:1614640538:1614640109:=59,60d58%0a%3c !!!!Timestamp%0a%3c As we said before, a timestamp is basically worthless in our hashchain since it cannot be trusted.  However I have one possible use for it.  Lets say we are all happily mining on the hashchain and out of nowhere someone proposes a chain restructure of 100 blocks that we have never seen before.  How do we know that the difficulty the miner used was valid when they mined it? In this case we can use the timestamps of our old blockchain and the difficulty, and match them up with the new chain and see if the difficulties they used match up with their timestamps and our timestamps.  This way we can verify that the segregated miner was doing at least as much work as we were before we accept his chain restructure.%0a
host:1614640538=68.2.112.187
author:1614640109=
diff:1614640109:1614639833:=66c66%0a%3c The nonce can be as long as desired, which solves the current problem of not having enough digits allowed to solve the problem at the given difficulty.  A nonce is like a key and it is a number that, when hashed with the merkle root, gives us a number that has a certain number of leading zeroes that fulfills the difficulty.%0a---%0a> The nonce can be as long as desired, which solves the current problem of not having enough digits allowed to solve the problem at the given difficulty.%0a
host:1614640109=68.2.112.187
author:1614639833=
diff:1614639833:1614639806:=62c62%0a%3c In our design, transactions are not included into the the main blockchain (called hashchain). They are kept on a sidechain that both cnodes and miners would maintain. The link between the sidechain and hashchain is the merkle root (hash of the candidate transaction block).  The transaction block is hashed and this final hash is included in the hash-block.  The transaction block is called a candidate block before it's root is included in the hashchain, and it is called a target block after it is included in the chain.  Target blocks are candidate blocks that won by being mined upon by a miner.%0a---%0a> In our design, transactions are not included into the the main blockchain (called hashchain). They are kept on a sidechain that both cnodes and miners would maintain. The link between the sidechain and hashchain is the merkle root (hash of the candudate transaction block).  The transaction block is hashed and this final hash is included in the hash-block.  The transaction block is called a candidate block before it's root is included in the hashchain, and it is called a target block after it is included in the chain.  Target blocks are candidate blocks that won by being mined upon by a miner.%0a
host:1614639833=68.2.112.187
author:1614639806=
diff:1614639806:1614639756:=62c62%0a%3c In our design, transactions are not included into the the main blockchain (called hashchain). They are kept on a sidechain that both cnodes and miners would maintain. The link between the sidechain and hashchain is the merkle root (hash of the candudate transaction block).  The transaction block is hashed and this final hash is included in the hash-block.  The transaction block is called a candidate block before it's root is included in the hashchain, and it is called a target block after it is included in the chain.  Target blocks are candidate blocks that won by being mined upon by a miner.%0a---%0a> In our design, transactions are not included into the the main blockchain (called hashchain). They are kept on a sidechain that both cnodes and miners would maintain. The link between the sidechain and hashchain is the merkle root.  The transaction block is hashed and this final hash is included in the hash-block.  The transaction block is called a candidate block before it's root is included in the hashchain, and it is called a target block after it is included in the chain.  Target blocks are candidate blocks that won by being mined upon by a miner.%0a
host:1614639806=68.2.112.187
author:1614639756=
diff:1614639756:1614639456:=62c62%0a%3c In our design, transactions are not included into the the main blockchain (called hashchain). They are kept on a sidechain that both cnodes and miners would maintain. The link between the sidechain and hashchain is the merkle root.  The transaction block is hashed and this final hash is included in the hash-block.  The transaction block is called a candidate block before it's root is included in the hashchain, and it is called a target block after it is included in the chain.  Target blocks are candidate blocks that won by being mined upon by a miner.%0a---%0a> In our design, transactions are not included into the the main blockchain (called hashchain). They are kept on a sidechain that both cnodes and miners would maintain. The link between the sidechain and hashchain is the merkle root.  The transaction block is hashed and this final hash is included in the hashblock.  The transaction block is called a candidate block before it's root is included in the hashchain, and it is called a target block after it is included in the chain.  Target blocks are candidate blocks that won by being mined upon by a miner.%0a
host:1614639756=68.2.112.187
author:1614639456=
diff:1614639456:1614639425:=49c49%0a%3c Ideally consists of only a chain of final block hashes.  Transactions are kept on sidechains and these proposed (candidate) transaction blocks must be proposed to at least 50%25 of the network before the last block reward is proposed to 50%25 of the network.  So if a miner did not hear about a transaction block before the last block was mined, he will not accept a vote for that block as the winner for the next block.%0a---%0a> Ideally consists of only a chain of final block hashes.  Transactions are kept on sidechains and these proposed transaction blocks must be proposed to at least 50%25 of the network before the last block reward is proposed to 50%25 of the network.  So if a miner did not hear about a transaction block before the last block was mined, he will not accept a vote for that block as the winner for the next block.%0a
host:1614639456=68.2.112.187
author:1614639425=
diff:1614639425:1614639411:=49c49%0a%3c Ideally consists of only a chain of final block hashes.  Transactions are kept on sidechains and these proposed transaction blocks must be proposed to at least 50%25 of the network before the last block reward is proposed to 50%25 of the network.  So if a miner did not hear about a transaction block before the last block was mined, he will not accept a vote for that block as the winner for the next block.%0a---%0a> Ideally consists only a chain of final block hashes.  Transactions are kept on sidechains and these proposed transaction blocks must be proposed to at least 50%25 of the network before the last block reward is proposed to 50%25 of the network.  So if a miner did not hear about a transaction block before the last block was mined, he will not accept a vote for that block as the winner for the next block.%0a
host:1614639425=68.2.112.187
author:1614639411=
diff:1614639411:1614637755:=47c47%0a%3c No minimum transaction fee.  You can add a transaction fee for transaction priority to miners if desired.  Theoretically since we never run out of block rewards, we don't technically need transaction fees.  In practice some fees will be needed to incentivize miners and [[#masternodes|masternodes]] to pick up all transactions.%0a---%0a> No minimum transaction fee.  You can add a transaction fee for transaction priority to miners.  Theoretically since we never run out of block rewards, we don't technically need transaction fees.  In practice some fees will be needed to incentivize miners and [[#masternodes|masternodes]] to pick up all transactions.%0a
host:1614639411=68.2.112.187
author:1614637755=
diff:1614637755:1614637620:=10c10%0a%3c (:Archive:[[https://archive.is/wyrfz|Archive.is]], [[|Archive.org]]:)%0a---%0a> (:Archive:[[https://archive.is/rXCYn|Archive.is]], [[|Archive.org]]:)%0a
host:1614637755=192.168.1.8
author:1614637620=
diff:1614637620:1614637510:=70c70%0a%3c The feebase tx is the cnodes bid for having his block be accepted to the network.  By signing his cblock, the cnode verifies that they transfer the bid coins to the miner upon their block bieng accepted into the network.  Basically the cnode is writing a signed check that the miner is allowed to endorse and deposit to an address of his choice.%0a---%0a> The feebase tx is the cnodes bid for having his block be accepted to the network.  By signing his cblock, the cnode verifies that they transfer the bid coins to the miner upon their block bieng accepted into the network.  Basically the cnode is writing a signed check that the miner is allowed to endorse to an address of his choice.%0a
host:1614637620=192.168.1.8
author:1614637510=
diff:1614637510:1614637401:=62c62%0a%3c In our design, transactions are not included into the the main blockchain (called hashchain). They are kept on a sidechain that both cnodes and miners would maintain. The link between the sidechain and hashchain is the merkle root.  The transaction block is hashed and this final hash is included in the hashblock.  The transaction block is called a candidate block before it's root is included in the hashchain, and it is called a target block after it is included in the chain.  Target blocks are candidate blocks that won by being mined upon by a miner.%0a---%0a> In our design, transactions are not included into the the main blockchain (called hashchain). They are kept on a sidechain that both cnodes and miners would maintain. The link between the sidechain and hashchain is the merkle root.  The transaction block is hashed and this final hash is included in the hashblock.%0a
host:1614637510=192.168.1.8
author:1614637401=
diff:1614637401:1614637329:=52,54c52,54%0a%3c A series of hash-blocks is what makes up the hashchain.  Each hash-block is like a blockheader on a typical blockchain with a couple extra fields.  However we omit timestamp and version stamp.  %0a%3c %0a%3c The reason why we omit the timestamp is it cannot be trusted.  Say a miner sends out a hash-block with an earlier timestamp than another hash-block, yet you heard about the later timestamped hash-block first.  Which one was really first?  The one you heard about first, the timestamp doesn't matter.  So we will omit this.%0a---%0a> A series of hash blocks is what makes up the hashchain.  Each hash block is like a blockheader on a typical blockchain with a couple extra fields.  However we omit timestamp and version stamp.  %0a> %0a> The reason why we omit the timestamp is it cannot be trusted.  Say a miner sends out a hashblock with an earlier timestamp than another hashblock, yet you heard about the later timestamped hashblock first.  Which one was really first?  The one you heard about first, the timestamp doesn't matter.  So we will omit this.%0a
host:1614637401=192.168.1.8
author:1614637329=
diff:1614637329:1614637316:=59c59%0a%3c !!!!Previous hash-block hash%0a---%0a> !!!!Previous block hash%0a
host:1614637329=192.168.1.8
author:1614637316=
diff:1614637316:1614637271:=51c51%0a%3c !!Hash-blocks%0a---%0a> !!Hash blocks%0a60c60%0a%3c The hash of the entire previous block.  This is different than the merkle root of the last block, the previous block hash includes the hash of the last hash-block in entirety, including the winning nonce. %0a---%0a> The hash of the entire previous block.  This is different than the merkle root of the last block, the previous block hash includes the hash of the last hash block in entirety, including the winning nonce. %0a
host:1614637316=192.168.1.8
author:1614637271=
diff:1614637271:1614636948:=60d59%0a%3c The hash of the entire previous block.  This is different than the merkle root of the last block, the previous block hash includes the hash of the last hash block in entirety, including the winning nonce. %0a
host:1614637271=192.168.1.8
author:1614636948=
diff:1614636948:1614636917:=114c114%0a%3c I am not going to continue to develop the miner.  People that work on miners can do that, we will launch with a basic miner.%0a---%0a> I am not going to develop the miner.  People that work on miners can do that, we will launch with a basic miner.%0a
host:1614636948=192.168.1.8
author:1614636917=
diff:1614636917:1614636910:=109c109%0a%3c !!Developer responsibilities%0a---%0a> !!Developer responsibilites%0a
host:1614636917=192.168.1.8
author:1614636910=
diff:1614636910:1614636884:=109c109%0a%3c !!Developer responsibilites%0a---%0a> !!Will and won't do%0a
host:1614636910=192.168.1.8
author:1614636884=
diff:1614636884:1614636796:=32,34c32,34%0a%3c Emission is decided to be as fair as possible to both late and early adopters.  The way we achieve this is by having an increase in coin emission above last years emmission by ~1%25.  This means that more coins will be mined next year as compared to this year, but only ~1%25 more so inflation will be minimal.  There still is an early adopter advantage, it will likely be much easier to mine this year than next year because mining competition will likely grow by much more than 1%25 per year.  The reason why we don't tune the reward to give exactly 1%25 of the total coins per year, is that how do we initially distribute the coin?  By letting inflation %25 be high early and gradually lower toward 1%25, we get a very fair and decentralized distribution. %0a%3c %0a%3c As time goes on, the coin will reach a place where the initial amount of coins mined per year is insignificant to the total coin supply.  At this point we will have reached the true tail emission, where the coin supply grows by only 1%25 per year.  This is achieved by increasing the block reward by 1.0101010101...%25 each year compared to the previous year. See [[#attach|attachments]] for a csv file showing this.%0a---%0a> Emission is decided to be as fair as possible to both late and early adopters.  The way we achieve this is by having an increase in coin emission above last years emmission by 1%25.  This means that more coins will be mined next year as compared to this year, but only 1%25 more so inflation will be minimal.  There still is an early adopter advantage, it will likely be much easier to mine this year than next year because mining competition will likely grow by much more than 1%25 per year.  The reason why we don't tune the reward to give exactly 1%25 of the total coins per year, is that how do we initially distribute the coin?  By letting inflation %25 be high early and gradually lower toward 1%25, we get a very fair and decentralized distribution. %0a> %0a> As time goes on, the coin will reach a place where the amount of coins mined per year is insignificant to the total coin supply.  At this point we will have reached the true tail emission, where the coin supply grows by only 1%25 per year.  This is achieved by increasing the block reward by 1.0101010101...%25 every year. See [[#attach|attachments]] for a csv file showing this.%0a
host:1614636884=192.168.1.8
author:1614636796=
diff:1614636796:1614636726:=34c34%0a%3c As time goes on, the coin will reach a place where the amount of coins mined per year is insignificant to the total coin supply.  At this point we will have reached the true tail emission, where the coin supply grows by only 1%25 per year.  This is achieved by increasing the block reward by 1.0101010101...%25 every year. See [[#attach|attachments]] for a csv file showing this.%0a---%0a> As time goes on, the coin will reach a place where the amount of coins mined per year is insignificant to the total coin supply.  At this point we will have reached the true tail emission, where the coin supply grows by only 1%25 per year.%0a
host:1614636796=192.168.1.8
author:1614636726=
diff:1614636726:1614633595:=142,144c142%0a%3c GNFS polynomial selection on GPU, sieving on CPU and post processing on clusters for multithreaded linear algebra (post #21) [[https://forums.anandtech.com/threads/nfs-home-needs-some-crunch.2248278/|#]]%0a%3c %0a%3c [[#attach]]%0a\ No newline at end of file%0a---%0a> GNFS polynomial selection on GPU, sieving on CPU and post processing on clusters for multithreaded linear algebra (post #21) [[https://forums.anandtech.com/threads/nfs-home-needs-some-crunch.2248278/|#]]%0a\ No newline at end of file%0a
host:1614636726=192.168.1.8
author:1614633595=
diff:1614633595:1614632848:=19c19%0a%3c # Scaling Blocksize.  We will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization".  Side-chains work; as demonatrated by Dogecoin basically being a side-chain to Litecoin (merged mining).%0a---%0a> # Scaling Blocksize.  We will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization".  Side-chains work as demonatrated by Dogecoin basically being a side-chain to Litecoin (merged mining).%0a
host:1614633595=68.2.112.187
author:1614632848=
diff:1614632848:1614626815:=140,142c140%0a%3c Merged mining [[https://coincentral.com/merged-mining/|#]].%0a%3c %0a%3c GNFS polynomial selection on GPU, sieving on CPU and post processing on clusters for multithreaded linear algebra (post #21) [[https://forums.anandtech.com/threads/nfs-home-needs-some-crunch.2248278/|#]]%0a\ No newline at end of file%0a---%0a> Merged mining [[https://coincentral.com/merged-mining/|#]].%0a\ No newline at end of file%0a
host:1614632848=192.168.1.8
author:1614626815=
diff:1614626815:1614626799:=19c19%0a%3c # Scaling Blocksize.  We will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization".  Side-chains work as demonatrated by Dogecoin basically being a side-chain to Litecoin (merged mining).%0a---%0a> # Scaling Blocksize.  We will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization".  Side-chains work as demonatrated by Dogecoin basically being a side-chain to litecoin (merged mining).%0a
host:1614626815=192.168.1.8
author:1614626799=
diff:1614626799:1614626749:=19c19%0a%3c # Scaling Blocksize.  We will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization".  Side-chains work as demonatrated by Dogecoin basically being a side-chain to litecoin (merged mining).%0a---%0a> # Scaling Blocksize.  We will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization"%0a
host:1614626799=192.168.1.8
author:1614626749=
diff:1614626749:1614626723:=19c19%0a%3c # Scaling Blocksize.  We will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side-chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization"%0a---%0a> # Scaling Blocksize.  We will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization"%0a
host:1614626749=192.168.1.8
author:1614626723=
diff:1614626723:1614626656:=17,21c17,21%0a%3c # Consumer hardware mining.  We will make sure that 1 PC = 1 Vote.  Sha-256 has been easily parallelized making asic's the only profitable way to mine Bitcoin.  Solar Designer and others have been tirelessly working to create hashing algorithms that keep mining within reach of consumer hardware.%0a%3c %0a%3c # Scaling Blocksize.  We will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization"%0a%3c %0a%3c # Forever block reward.  Transaction fees are scaling unsustainably in Bitcoin and fees will not be sustainable when all Bitcoin are mined.  This is because the transaction fees will become way too high when there is no longer a block reward.  Around 2000 transactions fit in a block [[https://cryptocoinsinfoclub.com/bitcoin/how-many-transactions-in-a-bitcoin-block|#]], and with current block reward of 6.25 bitcoin at $50,000, that would mean at this rate each transaction would need to pay an extra (6.25*50,000)/2000 = $156 (on top of the roughly $5 fees bitcoin currently has per transaction).  It is not feasible to pay miners just in fees as this would make all transactions that are under $10,000 impractical.  Therefore we will instead pay miners in a small inflation rate of the coin to keep fees low and people sending coins.  Of course having 'infinitely' large blocks will help, but still fees would grow too high unless there is a small amount of inflation to reward miners.  Bitcoin currently has over 2%25 inflation (in 2021) and it's price keeps rising which proves that a small predictable inflation is not a bad thing!%0a---%0a> # We will make sure that 1 PC = 1 Vote.  Sha-256 has been easily parallelized making asic's the only profitable way to mine Bitcoin.  Solar Designer and others have been tirelessly working to create hashing algorithms that keep mining within reach of consumer hardware.%0a> %0a> # We will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization"%0a> %0a> # Transaction fees are scaling unsustainably in Bitcoin and fees will not be sustainable when all Bitcoin are mined.  This is because the transaction fees will become way too high when there is no longer a block reward.  Around 2000 transactions fit in a block [[https://cryptocoinsinfoclub.com/bitcoin/how-many-transactions-in-a-bitcoin-block|#]], and with current block reward of 6.25 bitcoin at $50,000, that would mean at this rate each transaction would need to pay an extra (6.25*50,000)/2000 = $156 (on top of the roughly $5 fees bitcoin currently has per transaction).  It is not feasible to pay miners just in fees as this would make all transactions that are under $10,000 impractical.  Therefore we will instead pay miners in a small inflation rate of the coin to keep fees low and people sending coins.  Of course having 'infinitely' large blocks will help, but still fees would grow too high unless there is a small amount of inflation to reward miners.  Bitcoin currently has over 2%25 inflation (in 2021) and it's price keeps rising which proves that a small predictable inflation is not a bad thing!%0a
host:1614626723=192.168.1.8
author:1614626656=
diff:1614626656:1614626570:=21c21%0a%3c # Transaction fees are scaling unsustainably in Bitcoin and fees will not be sustainable when all Bitcoin are mined.  This is because the transaction fees will become way too high when there is no longer a block reward.  Around 2000 transactions fit in a block [[https://cryptocoinsinfoclub.com/bitcoin/how-many-transactions-in-a-bitcoin-block|#]], and with current block reward of 6.25 bitcoin at $50,000, that would mean at this rate each transaction would need to pay an extra (6.25*50,000)/2000 = $156 (on top of the roughly $5 fees bitcoin currently has per transaction).  It is not feasible to pay miners just in fees as this would make all transactions that are under $10,000 impractical.  Therefore we will instead pay miners in a small inflation rate of the coin to keep fees low and people sending coins.  Of course having 'infinitely' large blocks will help, but still fees would grow too high unless there is a small amount of inflation to reward miners.  Bitcoin currently has over 2%25 inflation (in 2021) and it's price keeps rising which proves that a small predictable inflation is not a bad thing!%0a---%0a> # Transaction fees are scaling unsustainably in Bitcoin and fees will not be sustainable when all Bitcoin are mined.  This is because the transaction fees will become way too high when there is no longer a block reward.  Around 2000 transactions fit in a block [[https://cryptocoinsinfoclub.com/bitcoin/how-many-transactions-in-a-bitcoin-block|#]], and with current block reward of 6.25 bitcoin at $50,000, that would mean at this rate each transaction would need to pay an extra (6.25*50,000)/2000 = $156 (on top of the roughly $5 fees bitcoin currently has per transaction).  It is not feasible to pay miners just in fees as this would make all transactions that are under $10,000 impractical.  Therefore we will instead pay miners in a small inflation rate of the coin to keep fees low and people sending coins.  Of course having infinitely sized blocks would help, but still fees would grow too high unless there is a small amount of inflation to reward miners.  Bitcoin currently has over 2%25 inflation (in 2021) and it's price keeps rising which proves that a small predictable inflation is not a bad thing!%0a
host:1614626656=192.168.1.8
author:1614626570=
diff:1614626570:1614626530:=10c10%0a%3c (:Archive:[[https://archive.is/rXCYn|Archive.is]], [[|Archive.org]]:)%0a---%0a> (:Archive:[[|Archive.is]], [[|Archive.org]]:)%0a
host:1614626570=192.168.1.8
author:1614626530=
diff:1614626530:1614626154:=2c2%0a%3c (:Published:2/21/21:)%0a---%0a> (:Published::)%0a5c5%0a%3c (:Update:3/1/21:)%0a---%0a> (:Update::)%0a
host:1614626530=192.168.1.8
author:1614626154=
diff:1614626154:1614626136:=21c21%0a%3c # Transaction fees are scaling unsustainably in Bitcoin and fees will not be sustainable when all Bitcoin are mined.  This is because the transaction fees will become way too high when there is no longer a block reward.  Around 2000 transactions fit in a block [[https://cryptocoinsinfoclub.com/bitcoin/how-many-transactions-in-a-bitcoin-block|#]], and with current block reward of 6.25 bitcoin at $50,000, that would mean at this rate each transaction would need to pay an extra (6.25*50,000)/2000 = $156 (on top of the roughly $5 fees bitcoin currently has per transaction).  It is not feasible to pay miners just in fees as this would make all transactions that are under $10,000 impractical.  Therefore we will instead pay miners in a small inflation rate of the coin to keep fees low and people sending coins.  Of course having infinitely sized blocks would help, but still fees would grow too high unless there is a small amount of inflation to reward miners.  Bitcoin currently has over 2%25 inflation (in 2021) and it's price keeps rising which proves that a small predictable inflation is not a bad thing!%0a---%0a> # Transaction fees are scaling unsustainably in Bitcoin and fees will not be sustainable when all Bitcoin are mined.  This is because the transaction fees will become way too high when there is no longer a block reward.  Around 2000 transactions fit in a block [[https://cryptocoinsinfoclub.com/bitcoin/how-many-transactions-in-a-bitcoin-block|#]], and with current block reward of 6.25 bitcoin at $50,000, that would mean at this rate each transaction would need to pay an extra (6.25*50,000)/2000 = $156 (on top of the roughly $5 fees bitcoin currently has per transaction).  It is not feasible to pay miners just in fees as this would make all transactions that are under $10,000 impractical.  Therefore we will instead pay miners in a small inflation rate of the coin to keep fees low and people sending coins.  Of course having infinitely sized blocks would help, but still fees would grow too high unless there is a small amount of inflation to reward miners.  Bitcoin currently has over 2%25 inflation and it's price keeps rising which proves that a small predictable inflation is not a bad thing!%0a
host:1614626154=192.168.1.8
author:1614626136=
diff:1614626136:1614626104:=21c21%0a%3c # Transaction fees are scaling unsustainably in Bitcoin and fees will not be sustainable when all Bitcoin are mined.  This is because the transaction fees will become way too high when there is no longer a block reward.  Around 2000 transactions fit in a block [[https://cryptocoinsinfoclub.com/bitcoin/how-many-transactions-in-a-bitcoin-block|#]], and with current block reward of 6.25 bitcoin at $50,000, that would mean at this rate each transaction would need to pay an extra (6.25*50,000)/2000 = $156 (on top of the roughly $5 fees bitcoin currently has per transaction).  It is not feasible to pay miners just in fees as this would make all transactions that are under $10,000 impractical.  Therefore we will instead pay miners in a small inflation rate of the coin to keep fees low and people sending coins.  Of course having infinitely sized blocks would help, but still fees would grow too high unless there is a small amount of inflation to reward miners.  Bitcoin currently has over 2%25 inflation and it's price keeps rising which proves that a small predictable inflation is not a bad thing!%0a---%0a> # Transaction fees are scaling unsustainably in Bitcoin and fees will not be sustainable when all Bitcoin are mined.  This is because the transaction fees will become way too high when there is no longer a block reward.  Around 2000 transactions fit in a block [[https://cryptocoinsinfoclub.com/bitcoin/how-many-transactions-in-a-bitcoin-block|#]], and with current block reward of 6.25 bitcoin at $50,000, that would mean at this rate each transaction would need to pay an extra (6.25*50,000)/2000 = $156 (on top of the roughly $5 fees bitcoin currently has per transaction).  It is not feasible to pay miners just in fees as this would make all transactions that are under $10,000 impractical.  Therefore we will instead pay miners in a small inflation rate of the coin to keep fees low and people sending coins.  Of course having infinitely sized blocks would help, but still fees would grow too high unless there is a small amount of inflation to reward miners.%0a
host:1614626136=192.168.1.8
author:1614626104=
diff:1614626104:1614625974:=21c21%0a%3c # Transaction fees are scaling unsustainably in Bitcoin and fees will not be sustainable when all Bitcoin are mined.  This is because the transaction fees will become way too high when there is no longer a block reward.  Around 2000 transactions fit in a block [[https://cryptocoinsinfoclub.com/bitcoin/how-many-transactions-in-a-bitcoin-block|#]], and with current block reward of 6.25 bitcoin at $50,000, that would mean at this rate each transaction would need to pay an extra (6.25*50,000)/2000 = $156 (on top of the roughly $5 fees bitcoin currently has per transaction).  It is not feasible to pay miners just in fees as this would make all transactions that are under $10,000 impractical.  Therefore we will instead pay miners in a small inflation rate of the coin to keep fees low and people sending coins.  Of course having infinitely sized blocks would help, but still fees would grow too high unless there is a small amount of inflation to reward miners.%0a---%0a> # Transaction fees are scaling unsustainably in Bitcoin and will not be sustainable when all Bitcoin are mined.  This is because the transaction fees will become way too high when there is no longer a blockreward.  Around 2000 transactions fit in a block [[https://cryptocoinsinfoclub.com/bitcoin/how-many-transactions-in-a-bitcoin-block|#]], and with current block reward of 6.25 bitcoin at $50,000, that would mean at this rate each transaction would need to pay (6.25*50,000)/2000 = $156.  It is not feasible to pay miners just in fees as this would make all transactions that are under $10,000 impractical.  Therefore we will instead pay miners in a small inflation rate of the coin to keep fees low and people sending coins.%0a
host:1614626104=192.168.1.8
author:1614625974=
diff:1614625974:1614625610:=20,22d19%0a%3c %0a%3c # Transaction fees are scaling unsustainably in Bitcoin and will not be sustainable when all Bitcoin are mined.  This is because the transaction fees will become way too high when there is no longer a blockreward.  Around 2000 transactions fit in a block [[https://cryptocoinsinfoclub.com/bitcoin/how-many-transactions-in-a-bitcoin-block|#]], and with current block reward of 6.25 bitcoin at $50,000, that would mean at this rate each transaction would need to pay (6.25*50,000)/2000 = $156.  It is not feasible to pay miners just in fees as this would make all transactions that are under $10,000 impractical.  Therefore we will instead pay miners in a small inflation rate of the coin to keep fees low and people sending coins.%0a%3c %0a
host:1614625974=192.168.1.8
author:1614625610=
diff:1614625610:1614625590:=17c17%0a%3c # We will make sure that 1 PC = 1 Vote.  Sha-256 has been easily parallelized making asic's the only profitable way to mine Bitcoin.  Solar Designer and others have been tirelessly working to create hashing algorithms that keep mining within reach of consumer hardware.%0a---%0a> # We will make sure that 1 PC = 1 Vote.  Sha-256 has been easily parallelized making asic's the only profitable way to mine.  Solar Designer and others have been tirelessly working to create hashing algorithms that keep mining within reach of consumer hardware.%0a
host:1614625610=192.168.1.8
author:1614625590=
diff:1614625590:1614625564:=13c13%0a%3c Monaton is an attempt at perfecting "Last Generation" or "Legacy" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate globally accepted, truly random numbers since we don't know who is going to win the next block.  Many applications can be built upon just this aspect alone. %0a---%0a> Monaton is an attempt at perfecting "Last Generation" or "Legacy" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate globally accepted, truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone. %0a
host:1614625590=192.168.1.8
author:1614625564=
diff:1614625564:1614625179:=13,21c13%0a%3c Monaton is an attempt at perfecting "Last Generation" or "Legacy" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate globally accepted, truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone. %0a%3c %0a%3c We will make some tweaks to Nakamoto's original design in 3 main places.  %0a%3c %0a%3c # We will make sure that 1 PC = 1 Vote.  Sha-256 has been easily parallelized making asic's the only profitable way to mine.  Solar Designer and others have been tirelessly working to create hashing algorithms that keep mining within reach of consumer hardware.%0a%3c %0a%3c # We will solve the blocksize dilemma by using a [[#hashchain|hashchain]] instead of a blockchain, basically only the block header is transmitted by miners and the transactions are on a side chain maintained by both nodes and miners.  This way the "blocksize" can scale infinitely only limited to the "[[#parcel|parcel optimization]]" which is a sister to "knapsack optimization"%0a%3c %0a%3c %0a---%0a> Monaton is an attempt at perfecting "Last Generation" or "Legacy" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate globally accepted, truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.  %0a
host:1614625564=192.168.1.8
author:1614625179=
diff:1614625179:1614625167:=19,23d18%0a%3c %0a%3c !!Emission [[#emission]]%0a%3c Emission is decided to be as fair as possible to both late and early adopters.  The way we achieve this is by having an increase in coin emission above last years emmission by 1%25.  This means that more coins will be mined next year as compared to this year, but only 1%25 more so inflation will be minimal.  There still is an early adopter advantage, it will likely be much easier to mine this year than next year because mining competition will likely grow by much more than 1%25 per year.  The reason why we don't tune the reward to give exactly 1%25 of the total coins per year, is that how do we initially distribute the coin?  By letting inflation %25 be high early and gradually lower toward 1%25, we get a very fair and decentralized distribution. %0a%3c %0a%3c As time goes on, the coin will reach a place where the amount of coins mined per year is insignificant to the total coin supply.  At this point we will have reached the true tail emission, where the coin supply grows by only 1%25 per year.%0a
host:1614625179=192.168.1.8
author:1614625167=
diff:1614625167:1614625149:=28c28,31%0a%3c %0a---%0a> !!Emission [[#emission]]%0a> Emission is decided to be as fair as possible to both late and early adopters.  The way we achieve this is by having an increase in coin emission above last years emmission by 1%25.  This means that more coins will be mined next year as compared to this year, but only 1%25 more so inflation will be minimal.  There still is an early adopter advantage, it will likely be much easier to mine this year than next year because mining competition will likely grow by much more than 1%25 per year.  The reason why we don't tune the reward to give exactly 1%25 of the total coins per year, is that how do we initially distribute the coin?  By letting inflation %25 be high early and gradually lower toward 1%25, we get a very fair and decentralized distribution. %0a> %0a> As time goes on, the coin will reach a place where the amount of coins mined per year is insignificant to the total coin supply.  At this point we will have reached the true tail emission, where the coin supply grows by only 1%25 per year.%0a
host:1614625167=192.168.1.8
author:1614625149=
diff:1614625149:1614625049:=16c16%0a%3c This will likely he a hard fork of Dogecoin.  The reason for this is there is already a large userbase, and the same type of people who like dogecoin will like this coin.  The block reward will start out the same as well with 10,000 coins per block (but will grow slowly over time) so we are in a perpetual tail [[#emission|emission]] that tends towards 1%25 inflation instead of the 0%25 inflation that Doge tends towards.%0a---%0a> This will likely he a hard fork of Dogecoin.  The reason for this is there is already a large userbase, and the same type of people who like dogecoin will like this coin.  The block reward will start out the same as well with 10,000 coins per block (but will grow slowly over time) so we are in a perpetual tail [[#emission|emission]]. %0a
host:1614625149=192.168.1.8
author:1614625049=
diff:1614625049:1614624649:=17,18d16%0a%3c %0a%3c Forking a current coin's blockchain is helpful in that we don't have to have a period of relatively high emission to create the initial coin distribution.  Since Doge is already widely and somewhat fairly distributed, it is a good starting point at which we can start with around 4%25 inflation and head down to 1%25 instead of starting at 100%25 inflation rate.%0a
host:1614625049=192.168.1.8
author:1614624649=
diff:1614624649:1614617351:=15c15%0a%3c !!Genesis%0a---%0a> !!Hard fork transactions%0a
host:1614624649=192.168.1.8
author:1614617351=
diff:1614617351:1614617316:=55,56d54%0a%3c %0a%3c !!Transaction block (sidechain)%0a
host:1614617351=68.2.112.187
author:1614617316=
diff:1614617316:1614617081:=46d45%0a%3c In our design, transactions are not included into the the main blockchain (called hashchain). They are kept on a sidechain that both cnodes and miners would maintain. The link between the sidechain and hashchain is the merkle root.  The transaction block is hashed and this final hash is included in the hashblock.%0a
host:1614617316=68.2.112.187
author:1614617081=
diff:1614617081:1614616398:=47d46%0a%3c The difficulty is how many leading zeroes are needed when the nonce is hashed with the merkle root. When another miner (dnode) recieves a proposed hashblock, they will check what they believe to be the network difficulty against the hashblock proposed network difficulty.  Then they will hash the proposed hashblock's nonce and merkle root and see that the difficulty requirement was met.  The difficulty does not neet to be explicity said in the hashblock since just hashing the nonce with the merkle root will tell you the difficulty, but it does help hashchain analysis after the fact, so we will keep it.%0a
host:1614617081=68.2.112.187
author:1614616398=
diff:1614616398:1614616326:=48d47%0a%3c The nonce can be as long as desired, which solves the current problem of not having enough digits allowed to solve the problem at the given difficulty.%0a
host:1614616398=68.2.112.187
author:1614616326=
diff:1614616326:1614615639:=37,38c37,38%0a%3c A series of hash blocks is what makes up the hashchain.  Each hash block is like a blockheader on a typical blockchain with a couple extra fields.  However we omit timestamp and version stamp.  %0a%3c %0a---%0a> A series of hash blocks is what makes up the hashchain.  Each hash block is like a blockheader on a typical blockchain.  However we omit timestamp and version stamp.  %0a> %0a48,51c48%0a%3c !!!!Coinbase tx%0a%3c The coinbase transaction is where new coins are minted.  The miner specifies how many coins are made and given to the address of their choice.%0a%3c !!!!Feebase tx%0a%3c The feebase tx is the cnodes bid for having his block be accepted to the network.  By signing his cblock, the cnode verifies that they transfer the bid coins to the miner upon their block bieng accepted into the network.  Basically the cnode is writing a signed check that the miner is allowed to endorse to an address of his choice.%0a---%0a> %0a
host:1614616326=68.2.112.187
author:1614615639=
diff:1614615639:1614615577:=37c37%0a%3c A series of hash blocks is what makes up the hashchain.  Each hash block is like a blockheader on a typical blockchain.  However we omit timestamp and version stamp.  %0a---%0a> A series of hash block is what makes up the hashchain.  Each hash block is like a blockheader on a typical blockchain.  However we omit timestamp and version stamp.  %0a
host:1614615639=68.2.112.187
author:1614615577=
diff:1614615577:1614615149:=37,40c37,38%0a%3c A series of hash block is what makes up the hashchain.  Each hash block is like a blockheader on a typical blockchain.  However we omit timestamp and version stamp.  %0a%3c %0a%3c The reason why we omit the timestamp is it cannot be trusted.  Say a miner sends out a hashblock with an earlier timestamp than another hashblock, yet you heard about the later timestamped hashblock first.  Which one was really first?  The one you heard about first, the timestamp doesn't matter.  So we will omit this.%0a%3c %0a---%0a> A series of hash block is what makes up the hashchain.  Each hash block is like a blockheader on a typical blockchain.  However we omit timestamp and version stamp.  The reason why we omit the timestamp is it cannot be trusted.  Say a miner sends out a hashblock with an earlier timestamp than another hashblock, yet you heard about the later timestamped hashblock first.  Which one was really first?  The one you heard about first, the timestamp doesn't matter.  So we will omit this.%0a> %0a42,48d39%0a%3c %0a%3c !!!Components%0a%3c !!!!Previous block hash%0a%3c !!!!Candidate block hash (merkle root)%0a%3c !!!!Difficulty%0a%3c !!!!Nonce%0a%3c %0a
host:1614615577=68.2.112.187
author:1614615149=
diff:1614615149:1614614551:=36,39d35%0a%3c !!Hash blocks%0a%3c A series of hash block is what makes up the hashchain.  Each hash block is like a blockheader on a typical blockchain.  However we omit timestamp and version stamp.  The reason why we omit the timestamp is it cannot be trusted.  Say a miner sends out a hashblock with an earlier timestamp than another hashblock, yet you heard about the later timestamped hashblock first.  Which one was really first?  The one you heard about first, the timestamp doesn't matter.  So we will omit this.%0a%3c %0a%3c Secondly the version number is a centralized thing and if the devs want they can change this and then tell miners which version numbers to accept or reject.  I don't think devs should have this power and see no reason for this other than acting as a sort of checkpoint, miners can't be mining an alternate chain in secret and then broadcast it since they wouldn't know what version numbers to use.  If we want to do checkpoints then we can just do checkpoints instead of version numbers and be transparent.%0a
host:1614615149=192.168.1.3
author:1614614551=
diff:1614614551:1614614509:=
host:1614614551=192.168.1.3
author:1614614509=
diff:1614614509:1614614221:=39,40d38%0a%3c !!Determiner nodes%0a%3c Aka miners or dnodes, determiner nodes decide which candidate block to mine on.  If they win the mining challenge, then the candidate block they were mining on becomes a target block, a block who has made it into the hashchain and been confirmed.%0a
host:1614614509=192.168.1.3
author:1614614221=
diff:1614614221:1614613872:=40,43c40,41%0a%3c Cnodes for short, they are really just normal nodes that decide to compile transactions they hear (after checking they weren't already included in a block or likely are in the current block bieng mined) into candidate blocks and recieve the fees from the transactions.  They then make a bid so the winning miner will select their cblock (candidate block) to mine on. When the challenge is won, only the hash of the node block makes it into the blockchain. Thus the blockchain will be renamed to the [[#hashchain|hashchain]]. Cnodes need not only the hashchain to work with, but all previous target blocks (cblocks that are called out in the hashchain, so they were accepted by the network) so they can verify all proposed transactions to include them in their cblock.%0a%3c %0a%3c !!Broadcaster nodes%0a%3c Bnodes for short, broadcaster nodes are just customer nodes that create valid transactions.  They would have the hashchain and only transaction blocks that they need to know the history of their funds.%0a---%0a> Cnodes for short, they are really just normal nodes that decide to compile transactions they hear (after checking they weren't already included in a block or likely are in the current block bieng mined) into candidate blocks and recieve the fees from the transactions.  They then make a bid so the winning miner will select their block to mine on. When the challenge is won, only the hash of the node block makes it into the blockchain. Thus the blockchain will be renamed to the [[#hashchain|hashchain]].%0a> %0a
host:1614614221=68.2.112.187
author:1614613872=
diff:1614613872:1614613043:=39,40c39,40%0a%3c !!Compiler nodes [[#cnodes]]%0a%3c Cnodes for short, they are really just normal nodes that decide to compile transactions they hear (after checking they weren't already included in a block or likely are in the current block bieng mined) into candidate blocks and recieve the fees from the transactions.  They then make a bid so the winning miner will select their block to mine on. When the challenge is won, only the hash of the node block makes it into the blockchain. Thus the blockchain will be renamed to the [[#hashchain|hashchain]].%0a---%0a> !!Masternodes [[#masternodes]]%0a> I call them masternodes but they are really just normal nodes.  Nodes that want to, can compile transactions they hear (after checking they weren't already included in a block or likely are in the current block bieng mined) into blocks and recieve the fees from miners.  They then make a bid so the winning miner will select their block to mine on. When the challenge is won, only the hash of the node block makes it into the blockchain. Thus the blockchain will be renamed to the [[#hashchain|hashchain]].%0a
host:1614613872=192.168.1.3
author:1614613043=
diff:1614613043:1614613021:=33c33%0a%3c !!Hashchain[[#hashchain]]%0a---%0a> !!Hashchain%0a
host:1614613043=192.168.1.3
author:1614613021=
diff:1614613021:1614612984:=40c40%0a%3c I call them masternodes but they are really just normal nodes.  Nodes that want to, can compile transactions they hear (after checking they weren't already included in a block or likely are in the current block bieng mined) into blocks and recieve the fees from miners.  They then make a bid so the winning miner will select their block to mine on. When the challenge is won, only the hash of the node block makes it into the blockchain. Thus the blockchain will be renamed to the [[#hashchain|hashchain]].%0a---%0a> I call them masternodes but they are really just normal nodes.  Nodes that want to, can compile transactions they hear (after checking they weren't already included in a block or likely are in the current block bieng mined) into blocks and recieve the fees from miners.  They then make a bid so the winning miner will select their block to mine on. When the challenge is won, only the hash of the node block makes it into the blockchain. Thus the blockchain will be renamed to the hashchain.%0a
host:1614613021=192.168.1.3
author:1614612984=
diff:1614612984:1614612954:=33c33%0a%3c !!Hashchain%0a---%0a> !!Blockchain%0a
host:1614612984=192.168.1.3
author:1614612954=
diff:1614612954:1614612698:=38,40d37%0a%3c %0a%3c !!Masternodes [[#masternodes]]%0a%3c I call them masternodes but they are really just normal nodes.  Nodes that want to, can compile transactions they hear (after checking they weren't already included in a block or likely are in the current block bieng mined) into blocks and recieve the fees from miners.  They then make a bid so the winning miner will select their block to mine on. When the challenge is won, only the hash of the node block makes it into the blockchain. Thus the blockchain will be renamed to the hashchain.%0a
host:1614612954=192.168.1.3
author:1614612698=
diff:1614612698:1614612597:=32c32%0a%3c No minimum transaction fee.  You can add a transaction fee for transaction priority to miners.  Theoretically since we never run out of block rewards, we don't technically need transaction fees.  In practice some fees will be needed to incentivize miners and [[#masternodes|masternodes]] to pick up all transactions.%0a---%0a> No minimum transaction fee.  You can add a transaction fee for transaction priority to miners.  Theoretically since we never run out of block rewards, we don't technically need transaction fees.  In practice some fees will be needed to incentivize miners and masternodes to pick up all transactions.%0a
host:1614612698=68.2.112.187
author:1614612597=
diff:1614612597:1614612395:=27,29c27%0a%3c Emission is decided to be as fair as possible to both late and early adopters.  The way we achieve this is by having an increase in coin emission above last years emmission by 1%25.  This means that more coins will be mined next year as compared to this year, but only 1%25 more so inflation will be minimal.  There still is an early adopter advantage, it will likely be much easier to mine this year than next year because mining competition will likely grow by much more than 1%25 per year.  The reason why we don't tune the reward to give exactly 1%25 of the total coins per year, is that how do we initially distribute the coin?  By letting inflation %25 be high early and gradually lower toward 1%25, we get a very fair and decentralized distribution. %0a%3c %0a%3c As time goes on, the coin will reach a place where the amount of coins mined per year is insignificant to the total coin supply.  At this point we will have reached the true tail emission, where the coin supply grows by only 1%25 per year.%0a---%0a> Emission is decided to be as fair as possible to both late and early adopters.  The way we achieve this is by having an increase in coin emission above last years emmission by 1%25.  This means that more coins will be mined next year as compared to this year, but only 1%25 more so inflation will be minimal.  There still is an early adopter advantage, it will likely be much easier to mine this year than next year because mining competition will likely grow by much more than 1%25 per year.  The reason why we don't tune the reward to give exactly 1%25 of the total coins per year, is that how do we initially distribute the coin?  By letting inflation %25 be high early and gradually lower toward 1%25, we get a very fair and decentralized distribution.%0a
host:1614612597=68.2.112.187
author:1614612395=
diff:1614612395:1614612346:=16c16%0a%3c This will likely he a hard fork of Dogecoin.  The reason for this is there is already a large userbase, and the same type of people who like dogecoin will like this coin.  The block reward will start out the same as well with 10,000 coins per block (but will grow slowly over time) so we are in a perpetual tail [[#emission|emission]]. %0a---%0a> This will likely he a hard fork of Dogecoin.  The reason for this is there is already a large userbase, and the same type of people who like dogecoin will like this coin.  The block reward will start out the same as well with 10,000 coins per block and we are in a perpetual tail emission. %0a
host:1614612395=68.2.112.187
author:1614612346=
diff:1614612346:1614612284:=26c26%0a%3c !!Emission [[#emission]]%0a---%0a> !!Emission%0a
host:1614612346=68.2.112.187
author:1614612284=
diff:1614612284:1614611852:=15d14%0a%3c !!Hard fork transactions%0a
host:1614612284=68.2.112.187
author:1614611852=
diff:1614611852:1614611817:=13,15c13%0a%3c Monaton is an attempt at perfecting "Last Generation" or "Legacy" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate globally accepted, truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.  %0a%3c %0a%3c This will likely he a hard fork of Dogecoin.  The reason for this is there is already a large userbase, and the same type of people who like dogecoin will like this coin.  The block reward will start out the same as well with 10,000 coins per block and we are in a perpetual tail emission. %0a---%0a> Monaton is an attempt at perfecting "Last Generation" or "Legacy" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate globally accepted, truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.  This will likely he a hard fork of Dogecoin.  The reason for this is there is already a large userbase, and the same type of people who like dogecoin will like this coin.  The block reward will start out the same as well with 10,000 coins per block and we are in a perpetual tail emission. %0a
host:1614611852=192.168.1.3
author:1614611817=
diff:1614611817:1614611723:=13c13%0a%3c Monaton is an attempt at perfecting "Last Generation" or "Legacy" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate globally accepted, truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.  This will likely he a hard fork of Dogecoin.  The reason for this is there is already a large userbase, and the same type of people who like dogecoin will like this coin.  The block reward will start out the same as well with 10,000 coins per block and we are in a perpetual tail emission. %0a---%0a> Monaton is an attempt at perfecting "Last Generation" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate globally accepted, truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.  This will likely he a hard fork of Dogecoin.  The reason for this is there is already a large userbase, and the same type of people who like dogecoin will like this coin.  The block reward will start out the same as well with 10,000 coins per block and we are in a perpetual tail emission. %0a
host:1614611817=192.168.1.3
author:1614611723=
diff:1614611723:1614611693:=59c59%0a%3c Or Tailcoin for tail emission. Or just Tail or Tails.%0a---%0a> Or Tailcoin for tail emission.%0a
host:1614611723=192.168.1.3
author:1614611693=
diff:1614611693:1614611640:=55c55%0a%3c Mona- refers to money or Mona lisa.  -ton refers to "smallest unit of" or literally a Ton of something.  Adapted from the name chromaton.%0a---%0a> Mona- refers to money or Mona lisa.  -ton refers to "smallest unit of" or literally a Ton of something.  Adapted from the name chromaton I had before.%0a
host:1614611693=192.168.1.3
author:1614611640=
diff:1614611640:1614611516:=62c62%0a%3c I am not going to contact an exchange to list the coin.  If you want to do this than that is great. To me it is more important to have a community that shares or barters coins before having a mechanism to sell them.%0a---%0a> I am not going to contact an exchange to list the coin.  If you want to do this than that is great.%0a
host:1614611640=192.168.1.3
author:1614611516=
diff:1614611516:1614557764:=91,92d90%0a%3c %0a%3c Merged mining [[https://coincentral.com/merged-mining/|#]].%0a\ No newline at end of file%0a
host:1614611516=192.168.1.3
author:1614557764=
diff:1614557764:1614557730:=90a91,92%0a> %0a> Chromaton (precursor) [[https://github.com/RecieverofMemory/Chromaton/commits/master|#]]%0a\ No newline at end of file%0a
host:1614557764=192.168.1.8
author:1614557730=
diff:1614557730:1614557686:=70c70%0a%3c I will, as long as I am able, make sure of two things.  First that the algorithm continues to be ASIC (and GPU) resistant, and that the addresses remain secure from attack.  Soft or hard forks will be done as needed to maintain these two things.%0a---%0a> I will, as long as I am able, make sure of two things.  First that the algorithm continues to be asic resistant, and that the addresses remain secure from attack.  Soft or hard forks will be done as needed to maintain these two things.%0a
host:1614557730=192.168.1.8
author:1614557686=
diff:1614557686:1614557671:=61c61%0a%3c !!Will and won't do%0a---%0a> !!What I will do%0a
host:1614557686=192.168.1.8
author:1614557671=
diff:1614557671:1614557401:=60,70d59%0a%3c %0a%3c !!What I will do%0a%3c I am not going to contact an exchange to list the coin.  If you want to do this than that is great.%0a%3c %0a%3c I am not going to run a pool.  I suggest solo mining when possible.%0a%3c %0a%3c I am not going to develop the miner.  People that work on miners can do that, we will launch with a basic miner.%0a%3c %0a%3c I am not going to maintain general development fund.  Each developer can have their own fund (receiving address) that they maintain.%0a%3c %0a%3c I will, as long as I am able, make sure of two things.  First that the algorithm continues to be asic resistant, and that the addresses remain secure from attack.  Soft or hard forks will be done as needed to maintain these two things.%0a
host:1614557671=192.168.1.8
author:1614557401=
diff:1614557401:1614557360:=21c21%0a%3c You must wait 40 weeks (9 months) after mining a block to spend the transactions.  Bitcoin is currently 1000 minutes which is about 17 hours.  This 9 month requirement makes sure miners are dedicated and not just jumping to the most profitable coin.  This also makes it so that only invested miners can sell, thus stabilizing the price.  Also solo mining is more viable since you will have to wait 9 months to spend your coins anyway you may as well solo mine even if it takes a month to win a block.%0a---%0a> You must wait 40 weeks (9 months) after mining a block to spend the transactions.  Bitcoin is currently 1000 minutes which is about 17 hours.  This 9 month requirement makes sure miners are dedicated and not just jumping to the most profitable coin.  This also makes it so that only invested miners can sell, thus stabilizing the price.%0a
host:1614557401=192.168.1.8
author:1614557360=
diff:1614557360:1614557280:=21c21%0a%3c You must wait 40 weeks (9 months) after mining a block to spend the transactions.  Bitcoin is currently 1000 minutes which is about 17 hours.  This 9 month requirement makes sure miners are dedicated and not just jumping to the most profitable coin.  This also makes it so that only invested miners can sell, thus stabilizing the price.%0a---%0a> You must wait 40 weeks (9 months) after mining a block to spend the transactions.  Bitcoin is currently 1000 minutes which is about 17 hours.  This 9 month requirement makes sure miners are dedicated and not just jumping to the most profitable coin.%0a
host:1614557360=192.168.1.8
author:1614557280=
diff:1614557280:1614541915:=13c13%0a%3c Monaton is an attempt at perfecting "Last Generation" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate globally accepted, truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.  This will likely he a hard fork of Dogecoin.  The reason for this is there is already a large userbase, and the same type of people who like dogecoin will like this coin.  The block reward will start out the same as well with 10,000 coins per block and we are in a perpetual tail emission. %0a---%0a> Monaton is an attempt at perfecting "Last Generation" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate globally accepted, truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.%0a
host:1614557280=192.168.1.8
author:1614541915=
diff:1614541915:1614541857:=13c13%0a%3c Monaton is an attempt at perfecting "Last Generation" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate globally accepted, truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.%0a---%0a> Monaton is an attempt at perfecting "Last Generation" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.%0a
host:1614541915=68.2.112.187
author:1614541857=
diff:1614541857:1614490866:=3c3%0a%3c (:Author:[[~GiverofMemory]]:)%0a---%0a> (:Author:[[~NatureHacker]]:)%0a6c6%0a%3c (:Maintainer:[[~GiverofMemory]]:)%0a---%0a> (:Maintainer:[[~NatureHacker]]:)%0a
host:1614541857=68.2.112.187
author:1614490866=
diff:1614490866:1614490694:=27c27%0a%3c No minimum transaction fee.  You can add a transaction fee for transaction priority to miners.  Theoretically since we never run out of block rewards, we don't technically need transaction fees.  In practice some fees will be needed to incentivize miners and masternodes to pick up all transactions.%0a---%0a> No minimum transaction fee.  You can add one for transaction priority to miners.  Theoretically since we never run out of block rewards, we don't technically need transaction fees.  In practice some fees will be needed to incentivize miners and masternodes to pick up all transactions.%0a
host:1614490866=192.168.1.4
author:1614490694=
diff:1614490694:1614488119:=13c13%0a%3c Monaton is an attempt at perfecting "Last Generation" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.%0a---%0a> Monaton is the perfection of "Last Generation" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.%0a
host:1614490694=192.168.1.4
author:1614488119=
diff:1614488119:1614487927:=79,81c79%0a%3c Equihash analysis [[https://www.openwall.com/articles/Zcash-Equihash-Analysis|#]]%0a%3c %0a%3c Chromaton (precursor) [[https://github.com/RecieverofMemory/Chromaton/commits/master|#]]%0a\ No newline at end of file%0a---%0a> Equihash analysis [[https://www.openwall.com/articles/Zcash-Equihash-Analysis|#]]%0a\ No newline at end of file%0a
host:1614488119=192.168.1.8
author:1614487927=
diff:1614487927:1614487918:=22,24d21%0a%3c %0a%3c !!Emission%0a%3c Emission is decided to be as fair as possible to both late and early adopters.  The way we achieve this is by having an increase in coin emission above last years emmission by 1%25.  This means that more coins will be mined next year as compared to this year, but only 1%25 more so inflation will be minimal.  There still is an early adopter advantage, it will likely be much easier to mine this year than next year because mining competition will likely grow by much more than 1%25 per year.  The reason why we don't tune the reward to give exactly 1%25 of the total coins per year, is that how do we initially distribute the coin?  By letting inflation %25 be high early and gradually lower toward 1%25, we get a very fair and decentralized distribution.%0a
host:1614487927=192.168.1.8
author:1614487918=
diff:1614487918:1614487887:=33a34,35%0a> !!Emission%0a> Emission is decided to be as fair as possible to both late and early adopters.  The way we achieve this is by having an increase in coin emission above last years emmission by 1%25.  This means that more coins will be mined next year as compared to this year, but only 1%25 more so inflation will be minimal.  There still is an early adopter advantage, it will likely be much easier to mine this year than next year because mining competition will likely grow by much more than 1%25 per year.  The reason why we don't tune the reward to give exactly 1%25 of the total coins per year, is that how do we initially distribute the coin?  By letting inflation %25 be high early and gradually lower toward 1%25, we get a very fair and decentralized distribution.%0a
host:1614487918=192.168.1.8
author:1614487887=
diff:1614487887:1614487849:=24c24%0a%3c No minimum transaction fee.  You can add one for transaction priority to miners.  Theoretically since we never run out of block rewards, we don't technically need transaction fees.  In practice some fees will be needed to incentivize miners and masternodes to pick up all transactions.%0a---%0a> No minimum transaction fee.  You can add one for transaction priority to miners.  Theoretically since we never run out of block rewards, we don't technically need transaction fees.%0a
host:1614487887=192.168.1.8
author:1614487849=
diff:1614487849:1614487821:=24c24%0a%3c No minimum transaction fee.  You can add one for transaction priority to miners.  Theoretically since we never run out of block rewards, we don't technically need transaction fees.%0a---%0a> No minimum transaction fee.  You can add one for transaction priority to miners.%0a
host:1614487849=192.168.1.8
author:1614487821=
diff:1614487821:1614487561:=23,24d22%0a%3c !!Transaction fees%0a%3c No minimum transaction fee.  You can add one for transaction priority to miners.%0a
host:1614487821=192.168.1.8
author:1614487561=
diff:1614487561:1614472362:=21c21%0a%3c You must wait 40 weeks (9 months) after mining a block to spend the transactions.  Bitcoin is currently 1000 minutes which is about 17 hours.  This 9 month requirement makes sure miners are dedicated and not just jumping to the most profitable coin.%0a---%0a> You must wait 9 months after mining a block to spend the transactions.  Bitcoin is currently 1000 minutes which is about 17 hours.  This 9 month requirement makes sure miners are dedicated and not just jumping to the most profitable coin.%0a
host:1614487561=192.168.1.8
author:1614472362=
diff:1614472362:1614472181:=70c70%0a%3c password security history [[https://www.openwall.com/presentations/Passwords12-The-Future-Of-Hashing/|#]]%0a---%0a> password security [[https://www.openwall.com/presentations/Passwords12-The-Future-Of-Hashing/|#]]%0a
host:1614472362=192.168.1.8
author:1614472181=
diff:1614472181:1614472012:=66,74c66%0a%3c Yespower PoW [[https://www.openwall.com/yespower/|#]] [[https://www.openwall.com/presentations/BSidesLjubljana2017-Yescrypt-Large-scale-Password-Hashing/|#]] [[https://www.openwall.com/presentations/PHDays2014-Yescrypt/|#]].%0a%3c %0a%3c bcrypt [[https://www.openwall.com/presentations/Passwords14-Energy-Efficient-Cracking/|#]]%0a%3c %0a%3c password security [[https://www.openwall.com/presentations/Passwords12-The-Future-Of-Hashing/|#]]%0a%3c %0a%3c password hashing [[https://www.openwall.com/presentations/YaC2012-Password-Hashing-At-Scale/|#]]%0a%3c %0a%3c ROM hard hashing functions [[https://www.openwall.com/presentations/ZeroNights2012-New-In-Password-Hashing/|#]]%0a---%0a> Yespower PoW [[https://www.openwall.com/yespower/|#]]%0a
host:1614472181=192.168.1.8
author:1614472012=
diff:1614472012:1614471974:=66,68c66%0a%3c Yespower PoW [[https://www.openwall.com/yespower/|#]]%0a%3c %0a%3c Equihash analysis [[https://www.openwall.com/articles/Zcash-Equihash-Analysis|#]]%0a\ No newline at end of file%0a---%0a> Yespower PoW [[https://www.openwall.com/yespower/|#]]%0a\ No newline at end of file%0a
host:1614472012=192.168.1.8
author:1614471974=
diff:1614471974:1614471884:=64,66c64%0a%3c Stablecoin stability [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3508006|#]]%0a%3c %0a%3c Yespower PoW [[https://www.openwall.com/yespower/|#]]%0a\ No newline at end of file%0a---%0a> Stablecoin stability [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3508006|#]]%0a\ No newline at end of file%0a
host:1614471974=192.168.1.8
author:1614471884=
diff:1614471884:1614471780:=36,37d35%0a%3c Edit: may start around 60s but this depends on the hashing algorithm and how fast it is.  The below is best case scenario but not likely. %0a%3c %0a
host:1614471884=192.168.1.8
author:1614471780=
diff:1614471780:1614471759:=30c30%0a%3c Cryptography should be ECDSA-512 or ECDSA-1024 (Bitcoin is ECDSA-256) to resist conventional and quantum computers for as long as possible.  Soft forking to new address requirements in the future would keep the addresses safe from attack.%0a---%0a> Cryptography should be ECDSA-512 or ECDSA-1024 to resist conventional and quantum computers for as long as possible.  Soft forking to new address requirements in the future would keep the addresses safe from attack.%0a
host:1614471780=192.168.1.8
author:1614471759=
diff:1614471759:1614471600:=28,30d27%0a%3c %0a%3c !!Public key cryptography%0a%3c Cryptography should be ECDSA-512 or ECDSA-1024 to resist conventional and quantum computers for as long as possible.  Soft forking to new address requirements in the future would keep the addresses safe from attack.%0a
host:1614471759=192.168.1.8
author:1614471600=
diff:1614471600:1614471401:=27c27%0a%3c The blocksize transmitted by a miner is constant and very small, only a few hundred bytes.  However transaction blocks which can be proposed by any node not just miners, can be as large as you like.  The catch is you have to get it transmitted to 50%25 of miners before a solution for the the last block is found.  Thus an "optimum size" will be arrived on by market forces to propose a currently correct transaction block (no other transactions in the block were mined in a previous block) in time for it to be useful and maximize transactions present to maximize fees generated.%0a---%0a> The blocksize transmitted by a miner is constant and very small, only a few hundred bytes.  However transaction blocks which can be proposed by any node not just miners, can be as large as you like.  The catch is you have to get it transmitted to 50%25 of miners before a solution for the the last block is found.  Thus a "optimum size" will be arrived on by market forces to propose a currently correct transaction block (no other transactions in the block were mined in a previous block) in time for it to be useful and maximize transactions present to maximize fees generated.%0a
host:1614471600=192.168.1.8
author:1614471401=
diff:1614471401:1614241457:=24c24%0a%3c Ideally consists only a chain of final block hashes.  Transactions are kept on sidechains and these proposed transaction blocks must be proposed to at least 50%25 of the network before the last block reward is proposed to 50%25 of the network.  So if a miner did not hear about a transaction block before the last block was mined, he will not accept a vote for that block as the winner for the next block.%0a---%0a> Consists only a chain of final block hashes.  Transactions are kept on sidechains and these proposed transaction blocks must be proposed to at least 50%25 of the network before the last block reward is proposed to 50%25 of the network.  So if a miner did not hear about a transaction block before the last block was mined, he will not accept a vote for that block as the winner for the next block.%0a
host:1614471401=192.168.1.8
author:1614241457=
diff:1614241457:1614103226:=51d50%0a%3c Or Tailcoin for tail emission.%0a
host:1614241457=192.168.1.8
author:1614103226=
diff:1614103226:1614067995:=44c44%0a%3c Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo and zoom zoom and gotta go fast and oh fo sho and to the moon and nyoooom and up up and away and i have a very particular set of skills%0a---%0a> Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo and zoom zoom and gotta go fast and oh fo sho and to the moon and nyoooom and up up and away%0a
host:1614103226=192.168.1.8
author:1614067995=
diff:1614067995:1614054594:=56,58c56%0a%3c Loki algorithm discussion [[https://loki.network/wp-content/uploads/2018/10/LokiWhitepaperV3_1.pdf|#]]%0a%3c %0a%3c Stablecoin stability [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3508006|#]]%0a\ No newline at end of file%0a---%0a> Loki algorithm discussion [[https://loki.network/wp-content/uploads/2018/10/LokiWhitepaperV3_1.pdf|#]]%0a\ No newline at end of file%0a
host:1614067995=192.168.1.8
author:1614054594=
diff:1614054594:1614051071:=44c44%0a%3c Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo and zoom zoom and gotta go fast and oh fo sho and to the moon and nyoooom and up up and away%0a---%0a> Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo and zoom zoom and gotta go fast and oh fo sho and to the moon and nyoooom%0a
host:1614054594=192.168.1.8
author:1614051071=
diff:1614051071:1614050504:=44c44%0a%3c Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo and zoom zoom and gotta go fast and oh fo sho and to the moon and nyoooom%0a---%0a> Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo and zoom zoom and gotta go fast and to the moon and nyoooom%0a
host:1614051071=192.168.1.8
author:1614050504=
diff:1614050504:1614048891:=44c44%0a%3c Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo and zoom zoom and gotta go fast and to the moon and nyoooom%0a---%0a> Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo and zoom zoom and gotta go fast and to the moon%0a
host:1614050504=192.168.1.8
author:1614048891=
diff:1614048891:1614048683:=44c44%0a%3c Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo and zoom zoom and gotta go fast and to the moon%0a---%0a> Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo and zoom zoom%0a
host:1614048891=192.168.1.8
author:1614048683=
diff:1614048683:1614048595:=44c44%0a%3c Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo and zoom zoom%0a---%0a> Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo%0a
host:1614048683=192.168.1.8
author:1614048595=
diff:1614048595:1614048538:=44c44%0a%3c Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies and yolo%0a---%0a> Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies%0a
host:1614048595=192.168.1.8
author:1614048538=
diff:1614048538:1614048514:=44c44%0a%3c Pew Pew and Brr... and Lit and Ripp.. and stonks and tendies%0a---%0a> Pew Pew and Brr... and Lit and Ripp.. and stonks%0a
host:1614048538=192.168.1.8
author:1614048514=
diff:1614048514:1614028527:=44c44%0a%3c Pew Pew and Brr... and Lit and Ripp.. and stonks%0a---%0a> Pew Pew and Brr... and Lit and Ripp..%0a
host:1614048514=192.168.1.8
author:1614028527=
diff:1614028527:1614026852:=44c44%0a%3c Pew Pew and Brr... and Lit and Ripp..%0a---%0a> Pew Pew and Brr... and Ripp..%0a
host:1614028527=192.168.1.8
author:1614026852=
diff:1614026852:1614015973:=45d44%0a%3c Bits at the speed of sound%0a
host:1614026852=192.168.1.8
author:1614015973=
diff:1614015973:1614015902:=47,48d46%0a%3c %0a%3c Or Sonicoin referring to money at the speed of sound.%0a
host:1614015973=192.168.1.8
author:1614015902=
diff:1614015902:1614015889:=42c42%0a%3c Blue doge looking pepe.  Or a demented fox.%0a---%0a> Blue doge looking pepe.%0a
host:1614015902=192.168.1.8
author:1614015889=
diff:1614015889:1613981002:=44c44%0a%3c Pew Pew and Brr... and Ripp..%0a---%0a> Pew Pew and Brr...%0a
host:1614015889=192.168.1.8
author:1613981002=
diff:1613981002:1613957831:=51,53c51%0a%3c Learning about Cache [[https://www.techspot.com/article/2066-cpu-l1-l2-l3-cache/|#]]%0a%3c %0a%3c Loki algorithm discussion [[https://loki.network/wp-content/uploads/2018/10/LokiWhitepaperV3_1.pdf|#]]%0a\ No newline at end of file%0a---%0a> Learning about Cache [[https://www.techspot.com/article/2066-cpu-l1-l2-l3-cache/|#]]%0a\ No newline at end of file%0a
host:1613981002=192.168.1.8
author:1613957831=
diff:1613957831:1613957806:=16c16%0a%3c Ideally an algorithm that is both memory and L2 Cache (and ideally L1 and L3) hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows since they don't have enough Cache and/or Memory.  This is fine for CPU's since firstly when they are in consumer grade hardware they have more cache and memory than any gpu or asic, but also because consumer hardware keeps increasing cache and memory every year.  %0a---%0a> Ideally an algorithm that is both memory and L2 Cache (and ideally L1) hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows since they don't have enough Cache and/or Memory.  This is fine for CPU's since firstly when they are in consumer grade hardware they have more cache and memory than any gpu or asic, but also because consumer hardware keeps increasing cache and memory every year.  %0a
host:1613957831=192.168.1.8
author:1613957806=
diff:1613957806:1613948539:=49,51c49%0a%3c Bitcoin Scalability and Blocktime [[https://dailyhodl.com/2020/08/03/bitcoin-scalability-and-the-block-propagation-problem/|#]]%0a%3c %0a%3c Learning about Cache [[https://www.techspot.com/article/2066-cpu-l1-l2-l3-cache/|#]]%0a\ No newline at end of file%0a---%0a> Bitcoin Scalability and Blocktime [[https://dailyhodl.com/2020/08/03/bitcoin-scalability-and-the-block-propagation-problem/|#]]%0a\ No newline at end of file%0a
host:1613957806=192.168.1.8
author:1613948539=
diff:1613948539:1613947374:=27c27%0a%3c The blocksize transmitted by a miner is constant and very small, only a few hundred bytes.  However transaction blocks which can be proposed by any node not just miners, can be as large as you like.  The catch is you have to get it transmitted to 50%25 of miners before a solution for the the last block is found.  Thus a "optimum size" will be arrived on by market forces to propose a currently correct transaction block (no other transactions in the block were mined in a previous block) in time for it to be useful and maximize transactions present to maximize fees generated.%0a---%0a> The blocksize transmitted by a miner is constant and very small, only a few hundred bytes.  However transaction blocks which can be proposed by any node not just miners, can be as large as you like.  The catch is you have to get it transmitted to 50%25 of miners before they start mining the last block.  Thus a "optimum size" will be arrived on by market forces to propose a currently correct transaction block (no other transactions in the block were mined in a previous block) in time for it to be useful and maximize transactions present to maximize fees generated.%0a
host:1613948539=192.168.1.4
author:1613947374=
diff:1613947374:1613947218:=49c49%0a%3c Bitcoin Scalability and Blocktime [[https://dailyhodl.com/2020/08/03/bitcoin-scalability-and-the-block-propagation-problem/|#]]%0a\ No newline at end of file%0a---%0a> Bitcoin Scalability [[https://dailyhodl.com/2020/08/03/bitcoin-scalability-and-the-block-propagation-problem/|#]]%0a\ No newline at end of file%0a
host:1613947374=192.168.1.8
author:1613947218=
diff:1613947218:1613942149:=46,49c46%0a%3c Mona- refers to money or Mona lisa.  -ton refers to "smallest unit of" or literally a Ton of something.  Adapted from the name chromaton I had before.%0a%3c %0a%3c !!Links%0a%3c Bitcoin Scalability [[https://dailyhodl.com/2020/08/03/bitcoin-scalability-and-the-block-propagation-problem/|#]]%0a\ No newline at end of file%0a---%0a> Mona- refers to money or Mona lisa.  -ton refers to "smallest unit of" or literally a Ton of something.  Adapted from the name chromaton I had before.%0a\ No newline at end of file%0a
host:1613947218=192.168.1.8
author:1613942149=
diff:1613942149:1613942064:=16,18c16%0a%3c Ideally an algorithm that is both memory and L2 Cache (and ideally L1) hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows since they don't have enough Cache and/or Memory.  This is fine for CPU's since firstly when they are in consumer grade hardware they have more cache and memory than any gpu or asic, but also because consumer hardware keeps increasing cache and memory every year.  %0a%3c %0a%3c A good candidate is Yespower and perhaps some progressive cryptonight algorithms.  The goal is to achieve as close to "1 CPU = 1 Vote" as possible.  Factorizations of large numbers is an ideal candidate and is used in [[digital collectible network]] because it is "1 CPU + 1 GPU = 1 Vote" (which is even harder to build specialized mining rigs for) however it would be difficult to implement into a traditional cryptocurrency since in factorization, collaborating groups of miners would get more than linear increases in factorization speed.  Finding the factors is not a random chance, so collaborating miners could win proportionally more blocks than solo or small pools.%0a---%0a> Ideally an algorithm that is both memory and L2 Cache (and ideally L1) hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.  A good candidate is Yespower and perhaps some progressive cryptonight algorithms.  The goal is to achieve as close to "1 CPU = 1 Vote" as possible.  Factorizations of large numbers is an ideal candidate and is used in [[digital collectible network]] because it is "1 CPU + 1 GPU = 1 Vote" (which is even harder to build specialized mining rigs for) however it would be difficult to implement into a traditional cryptocurrency since in factorization, collaborating groups of miners would get more than linear increases in factorization speed.  Finding the factors is not a random chance, so collaborating miners could win proportionally more blocks than solo or small pools.%0a
host:1613942149=192.168.1.8
author:1613942064=
diff:1613942064:1613941966:=16c16%0a%3c Ideally an algorithm that is both memory and L2 Cache (and ideally L1) hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.  A good candidate is Yespower and perhaps some progressive cryptonight algorithms.  The goal is to achieve as close to "1 CPU = 1 Vote" as possible.  Factorizations of large numbers is an ideal candidate and is used in [[digital collectible network]] because it is "1 CPU + 1 GPU = 1 Vote" (which is even harder to build specialized mining rigs for) however it would be difficult to implement into a traditional cryptocurrency since in factorization, collaborating groups of miners would get more than linear increases in factorization speed.  Finding the factors is not a random chance, so collaborating miners could win proportionally more blocks than solo or small pools.%0a---%0a> Ideally an algorithm that is both memory and L2 Cache (and L1) hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.  A good candidate is Yespower and perhaps some progressive cryptonight algorithms.  The goal is to achieve as close to "1 CPU = 1 Vote" as possible.  Factorizations of large numbers is an ideal candidate and is used in [[digital collectible network]] because it is "1 CPU + 1 GPU = 1 Vote" (which is even harder to build specialized mining rigs for) however it would be difficult to implement into a traditional cryptocurrency since in factorization, collaborating groups of miners would get more than linear increases in factorization speed.  Finding the factors is not a random chance, so collaborating miners could win proportionally more blocks than solo or small pools.%0a
host:1613942064=192.168.1.8
author:1613941966=
diff:1613941966:1613941904:=16c16%0a%3c Ideally an algorithm that is both memory and L2 Cache (and L1) hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.  A good candidate is Yespower and perhaps some progressive cryptonight algorithms.  The goal is to achieve as close to "1 CPU = 1 Vote" as possible.  Factorizations of large numbers is an ideal candidate and is used in [[digital collectible network]] because it is "1 CPU + 1 GPU = 1 Vote" (which is even harder to build specialized mining rigs for) however it would be difficult to implement into a traditional cryptocurrency since in factorization, collaborating groups of miners would get more than linear increases in factorization speed.  Finding the factors is not a random chance, so collaborating miners could win proportionally more blocks than solo or small pools.%0a---%0a> Ideally an algorithm that is both memory and L2 Cache hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.  A good candidate is Yespower and perhaps some progressive cryptonight algorithms.  The goal is to achieve as close to "1 CPU = 1 Vote" as possible.  Factorizations of large numbers is an ideal candidate and is used in [[digital collectible network]] because it is "1 CPU + 1 GPU = 1 Vote" (which is even harder to build specialized mining rigs for) however it would be difficult to implement into a traditional cryptocurrency since in factorization, collaborating groups of miners would get more than linear increases in factorization speed.  Finding the factors is not a random chance, so collaborating miners could win proportionally more blocks than solo or small pools.%0a
host:1613941966=192.168.1.8
author:1613941904=
diff:1613941904:1613941883:=16c16%0a%3c Ideally an algorithm that is both memory and L2 Cache hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.  A good candidate is Yespower and perhaps some progressive cryptonight algorithms.  The goal is to achieve as close to "1 CPU = 1 Vote" as possible.  Factorizations of large numbers is an ideal candidate and is used in [[digital collectible network]] because it is "1 CPU + 1 GPU = 1 Vote" (which is even harder to build specialized mining rigs for) however it would be difficult to implement into a traditional cryptocurrency since in factorization, collaborating groups of miners would get more than linear increases in factorization speed.  Finding the factors is not a random chance, so collaborating miners could win proportionally more blocks than solo or small pools.%0a---%0a> Ideally an algorithm that is both memory and L2 Cache hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.  A good candidate is Yespower and perhaps some progressive cryptonight algorithms.  The goal is to achieve as close to "1 CPU = 1 Vote" as possible.  Factorizations of large numbers is an ideal candidate and is used in [[digital collectible network]] because it is "1 CPU + 1 GPU = 1 Vote" (which is even harder to build specialized mining rigs for) however it would be difficult to implement into a traditional cryptocurrency since in factorization collaborating groups of miners would get more than linear increases in factorization speed.  Finding the factors is not a random chance, so collaborating miners could win proportionally more blocks than solo or small pools.%0a
host:1613941904=192.168.1.8
author:1613941883=
diff:1613941883:1613941821:=16c16%0a%3c Ideally an algorithm that is both memory and L2 Cache hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.  A good candidate is Yespower and perhaps some progressive cryptonight algorithms.  The goal is to achieve as close to "1 CPU = 1 Vote" as possible.  Factorizations of large numbers is an ideal candidate and is used in [[digital collectible network]] because it is "1 CPU + 1 GPU = 1 Vote" (which is even harder to build specialized mining rigs for) however it would be difficult to implement into a traditional cryptocurrency since in factorization collaborating groups of miners would get more than linear increases in factorization speed.  Finding the factors is not a random chance, so collaborating miners could win proportionally more blocks than solo or small pools.%0a---%0a> Ideally an algorithm that is both memory and L2 Cache hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.  A good candidate is Yespower and perhaps some progressive cryptonight algorithms.  The goal is to achieve as close to "1 CPU = 1 Vote" as possible.  Factorizations of large numbers is an ideal candidate and is used in [[digital collectible network]] however it would be difficult to implement into a traditional cryptocurrency since in factorization collaborating groups of miners would get more than linear increases in factorization speed.  Finding the factors is not a random chance, so collaborating miners could win proportionally more blocks than solo or small pools.%0a
host:1613941883=192.168.1.8
author:1613941821=
diff:1613941821:1613941659:=16c16%0a%3c Ideally an algorithm that is both memory and L2 Cache hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.  A good candidate is Yespower and perhaps some progressive cryptonight algorithms.  The goal is to achieve as close to "1 CPU = 1 Vote" as possible.  Factorizations of large numbers is an ideal candidate and is used in [[digital collectible network]] however it would be difficult to implement into a traditional cryptocurrency since in factorization collaborating groups of miners would get more than linear increases in factorization speed.  Finding the factors is not a random chance, so collaborating miners could win proportionally more blocks than solo or small pools.%0a---%0a> Ideally an algorithm that is both memory and L2 Cache hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.  A good candidate is Yespower and perhaps some progressive cryptonight algorithms.%0a
host:1613941821=192.168.1.8
author:1613941659=
diff:1613941659:1613941627:=16c16%0a%3c Ideally an algorithm that is both memory and L2 Cache hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.  A good candidate is Yespower and perhaps some progressive cryptonight algorithms.%0a---%0a> Ideally an algorithm that is both memory and L2 Cache hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.%0a
host:1613941659=192.168.1.8
author:1613941627=
diff:1613941627:1613941552:=14,16d13%0a%3c %0a%3c !!Algorithm%0a%3c Ideally an algorithm that is both memory and L2 Cache hard, where increases in difficulty increases the Memory and L2 cache utilization rate.  So as the network grows, ASIC's will become obsoleted as the hashrate grows.%0a
host:1613941627=192.168.1.8
author:1613941552=
diff:1613941552:1613941527:=13c13%0a%3c Monaton is the perfection of "Last Generation" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else than to generate truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.%0a---%0a> Monaton is the perfection of "Last Generation" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else then to generate truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.%0a
host:1613941552=192.168.1.8
author:1613941527=
diff:1613941527:1613941507:=13c13%0a%3c Monaton is the perfection of "Last Generation" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else then to generate truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.%0a---%0a> Monaton is the perfection of "Last Generation" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else to generate truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.%0a
host:1613941527=192.168.1.8
author:1613941507=
diff:1613941507:1613941490:=9c9%0a%3c (:Also:[[Digital collectible network]], [[Chromaton]]:)%0a---%0a> (:Also:[[Digital collectible network]]:)%0a
host:1613941507=192.168.1.8
author:1613941490=
diff:1613941490:1613941474:=12c12%0a%3c !!Overview%0a---%0a> %0a
host:1613941490=192.168.1.8
author:1613941474=
diff:1613941474:1613941433:=1c1%0a%3c (:Summary:The ideal "Traditional Cryptocurrency" that can be used by nearly everyone, nearly instantly, and nearly freely.:)%0a---%0a> (:Summary:The ideal "Traditional Cryptocurrency" that can be used by nearly everyone, nearly instantly, and nearly free:)%0a9c9%0a%3c (:Also:[[Digital collectible network]]:)%0a---%0a> (:Also:none:)%0a
host:1613941474=192.168.1.8
author:1613941433=
diff:1613941433:1613941341:=12,13d11%0a%3c %0a%3c Monaton is the perfection of "Last Generation" Cryptocurrency.  There will always be a place for Nakamoto Consensus as a robust "error corrected" version of cryptocurrency that "just works" and can be relied upon.  If for nothing else to generate truly random numbers since we don't know who is going to win the next block.  So many applications can be built upon just this aspect alone.%0a
host:1613941433=192.168.1.8
author:1613941341=
diff:1613941341:1613941125:=21,24d20%0a%3c %0a%3c !!Emission%0a%3c Emission is decided to be as fair as possible to both late and early adopters.  The way we achieve this is by having an increase in coin emission above last years emmission by 1%25.  This means that more coins will be mined next year as compared to this year, but only 1%25 more so inflation will be minimal.  There still is an early adopter advantage, it will likely be much easier to mine this year than next year because mining competition will likely grow by much more than 1%25 per year.  The reason why we don't tune the reward to give exactly 1%25 of the total coins per year, is that how do we initially distribute the coin?  By letting inflation %25 be high early and gradually lower toward 1%25, we get a very fair and decentralized distribution.%0a%3c %0a
host:1613941341=192.168.1.8
author:1613941125=
diff:1613941125:1613941002:=1c1%0a%3c (:Summary:The ideal "Traditional Cryptocurrency" that can be used by nearly everyone, nearly instantly, and nearly free:)%0a---%0a> (:Summary::)%0a
host:1613941125=192.168.1.8
author:1613941002=
diff:1613941002:1613940809:=22c22%0a%3c Starts at 40 seconds and reduces 1%25 every year until it reaches a minimum of 14.79 seconds (100 years) at which point it stays constant.  The reason for this number is it takes light 130 ms to go around the world so assuming we have technology that approaches that, we want it to be 100x longer than that so the previous miner only has a 1%25 advantage on the next block since he started mining 130ms before you did.  An extra 1.79 seconds for delays in transmission making it 14.79s.%0a---%0a> Starts at 40 seconds and reduces 1%25 every year until it reaches a minimum of 13 seconds (161 years) at which point it stays constant.  The reason for this number is it takes light 130 ms to go around the world so assuming we have technology that approaches that, we want it to be 100x longer than that so the previous miner only has a 1%25 advantage on the next block since he started mining 130ms before you did.%0a
host:1613941002=192.168.1.8
author:1613940809=
diff:1613940809:1613940730:=17c17%0a%3c Consists only a chain of final block hashes.  Transactions are kept on sidechains and these proposed transaction blocks must be proposed to at least 50%25 of the network before the last block reward is proposed to 50%25 of the network.  So if a miner did not hear about a transaction block before the last block was mined, he will not accept a vote for that block as the winner for the next block.%0a---%0a> Consists only a chain of final block hashes.  Transactions are kept on sidechains and proposed transaction blocks must be proposed to at least 50%25 of the network before the last block reward is proposed to 50%25 of the network.  So if a miner did not hear about a transaction block before the last block was mined, he will not accept a vote for that block as the winner for the next block.%0a
host:1613940809=192.168.1.8
author:1613940730=
diff:1613940730:1613940684:=14c14%0a%3c You must wait 9 months after mining a block to spend the transactions.  Bitcoin is currently 1000 minutes which is about 17 hours.  This 9 month requirement makes sure miners are dedicated and not just jumping to the most profitable coin.%0a---%0a> You must wait 9 months after mining a block to spend the transactions.  Bitcoin is currently 1000 minutes which is about 17 hours.  This makes sure miners are dedicated and not just jumping to the most profitable coin.%0a
host:1613940730=192.168.1.8
author:1613940684=
diff:1613940684:1613940596:=27c27%0a%3c 10000 coins per block.  After 161 years roughly, this number is increased 1%25 per year to keep a 1%25 yearly inflation after the blocktime reaches a minimum.  So year 162 each block will have a 10,100 coin reward; in year 163 each block will have a 10,201 coin reward, etc.%0a---%0a> 10000 coins.  After 161 years roughly, this number is increased 1%25 per year to keep a 1%25 yearly inflation after the blocktime reaches a minimum.%0a
host:1613940684=192.168.1.8
author:1613940596=
diff:1613940596:1613938341:=27c27%0a%3c 10000 coins.  After 161 years roughly, this number is increased 1%25 per year to keep a 1%25 yearly inflation after the blocktime reaches a minimum.%0a---%0a> 10000 coins%0a
host:1613940596=192.168.1.8
author:1613938341=
diff:1613938341:1613938258:=22c22%0a%3c Starts at 40 seconds and reduces 1%25 every year until it reaches a minimum of 13 seconds (161 years) at which point it stays constant.  The reason for this number is it takes light 130 ms to go around the world so assuming we have technology that approaches that, we want it to be 100x longer than that so the previous miner only has a 1%25 advantage on the next block since he started mining 130ms before you did.%0a---%0a> Starts at 40 seconds and reduces 0.7%25 every year until it reaches a minimum of 13 seconds (161 years) at which point it stays constant.  The reason for this number is it takes light 130 ms to go around the world so assuming we have technology that approaches that, we want it to be 100x longer than that so the previous miner only has a 1%25 advantage on the next block since he started mining 130ms before you did.%0a
host:1613938341=192.168.1.8
author:1613938258=
diff:1613938258:1613938160:=23,24d22%0a%3c %0a%3c The reason it is 40s and not 60s to start when compared to doge, is our miner blocks are much smaller than doge (256 bytes? vs 500 kilobytes) and thus traverse the network much faster, likely in under a second.%0a
host:1613938258=192.168.1.8
author:1613938160=
diff:1613938160:1613938081:=22c22%0a%3c Starts at 40 seconds and reduces 0.7%25 every year until it reaches a minimum of 13 seconds (161 years) at which point it stays constant.  The reason for this number is it takes light 130 ms to go around the world so assuming we have technology that approaches that, we want it to be 100x longer than that so the previous miner only has a 1%25 advantage on the next block since he started mining 130ms before you did.%0a---%0a> Starts at 40 seconds and reduces 0.7%25 every year until it reaches a minimum of 13 seconds (161 years) at which point it stays constant.%0a
host:1613938160=192.168.1.8
author:1613938081=
diff:1613938081:1613937831:=18,20d17%0a%3c %0a%3c !!Blocksize%0a%3c The blocksize transmitted by a miner is constant and very small, only a few hundred bytes.  However transaction blocks which can be proposed by any node not just miners, can be as large as you like.  The catch is you have to get it transmitted to 50%25 of miners before they start mining the last block.  Thus a "optimum size" will be arrived on by market forces to propose a currently correct transaction block (no other transactions in the block were mined in a previous block) in time for it to be useful and maximize transactions present to maximize fees generated.%0a
host:1613938081=192.168.1.8
author:1613937831=
diff:1613937831:1613937804:=14c14%0a%3c You must wait 9 months after mining a block to spend the transactions.  Bitcoin is currently 1000 minutes which is about 17 hours.  This makes sure miners are dedicated and not just jumping to the most profitable coin.%0a---%0a> You must wait 9 months after mining a block to spend the transactions.  Bitcoin is currently 1000 minutes which is about 17 hours.%0a
host:1613937831=192.168.1.8
author:1613937804=
diff:1613937804:1613937664:=12,14d11%0a%3c %0a%3c !!Coinbase maturity%0a%3c You must wait 9 months after mining a block to spend the transactions.  Bitcoin is currently 1000 minutes which is about 17 hours.%0a
host:1613937804=192.168.1.8
author:1613937664=
diff:1613937664:1613937650:=14c14%0a%3c Consists only a chain of final block hashes.  Transactions are kept on sidechains and proposed transaction blocks must be proposed to at least 50%25 of the network before the last block reward is proposed to 50%25 of the network.  So if a miner did not hear about a transaction block before the last block was mined, he will not accept a vote for that block as the winner for the next block.%0a---%0a> Consists only a chain of final bloch hashes.  Transactions are kept on sidechains and proposed transaction blocks must be proposed to at least 50%25 of the network before the last block reward is proposed to 50%25 of the network.  So if a miner did not hear about a transaction block before the last block was mined, he will not accept a vote for that block as the winner for the next block.%0a
host:1613937664=192.168.1.8
author:1613937650=
diff:1613937650:1613937509:=13,14d12%0a%3c !!Blockchain%0a%3c Consists only a chain of final bloch hashes.  Transactions are kept on sidechains and proposed transaction blocks must be proposed to at least 50%25 of the network before the last block reward is proposed to 50%25 of the network.  So if a miner did not hear about a transaction block before the last block was mined, he will not accept a vote for that block as the winner for the next block.%0a
host:1613937650=192.168.1.8
author:1613937509=
diff:1613937509:1613934979:=12,17d11%0a%3c %0a%3c !!Blocktime%0a%3c Starts at 40 seconds and reduces 0.7%25 every year until it reaches a minimum of 13 seconds (161 years) at which point it stays constant.%0a%3c %0a%3c !!Block reward%0a%3c 10000 coins%0a
host:1613937509=192.168.1.8
author:1613934979=
diff:1613934979:1613934651:=16,19c16,17%0a%3c !!!Catchphrase%0a%3c Pew Pew and Brr...%0a%3c !!!Name%0a%3c Mona- refers to money or Mona lisa.  -ton refers to "smallest unit of" or literally a Ton of something.  Adapted from the name chromaton I had before.%0a\ No newline at end of file%0a---%0a> !!Catchphrase%0a> Pew Pew and Brr...%0a\ No newline at end of file%0a
host:1613934979=192.168.1.8
author:1613934651=
diff:1613934651:1613933501:=13,17c13,14%0a%3c !!Marketing%0a%3c !!!Mascot%0a%3c Blue doge looking pepe.%0a%3c !!Catchphrase%0a%3c Pew Pew and Brr...%0a\ No newline at end of file%0a---%0a> !!Mascot%0a> Blue doge looking pepe.%0a\ No newline at end of file%0a
host:1613934651=192.168.1.8
author:1613933501=
diff:1613933501:1613933501:=1,14d0%0a%3c (:Summary::)%0a%3c (:Published::)%0a%3c (:Author:[[~NatureHacker]]:)%0a%3c (:License:[[https://en.m.wikipedia.org/wiki/Res_communis|Site License]]:)%0a%3c (:Update::)%0a%3c (:Maintainer:[[~NatureHacker]]:)%0a%3c (:Creator:[[]]:)%0a%3c (:Categories:[[!Cryptics]]:)%0a%3c (:Also:none:)%0a%3c (:Archive:[[|Archive.is]], [[|Archive.org]]:)%0a%3c (:Download:[[{$FullName}?action=print|URL]],[[https://www.web2pdfconvert.com/|PDF from URL]]:)%0a%3c %0a%3c !!Mascot%0a%3c Blue doge looking pepe.%0a\ No newline at end of file%0a
host:1613933501=192.168.1.8
