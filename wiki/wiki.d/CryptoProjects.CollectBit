version=pmwiki-2.2.133 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.101 Safari/537.36
author=
charset=UTF-8
csum=See [[NatureVault/DigitalCollectibleNetwork|Digital Collectible Network]] whitepaper for a more in-depth design document of which CollectBit is based on. 
ctime=1621962636
host=68.231.69.235
name=CryptoProjects.CollectBit
rev=111
targets=NatureVault.DigitalCollectibleNetwork,Category.Cryptics
text=(:Summary:CollectBit is an implementation of a [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network]]:)%0a(:Published:5/25/2021:)%0a(:Author:[[~GiverofMemory]]:)%0a(:License:[[https://en.m.wikipedia.org/wiki/Res_communis|Site License]]:)%0a(:Update::)%0a(:Maintainer:[[~GiverofMemory]]:)%0a(:Creator:[[]]:)%0a(:Categories:[[!Cryptics]]:)%0a(:Also:[[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network]]:)%0a(:Archive:[[|Archive.is]], [[|Archive.org]]:)%0a(:Download:[[{$FullName}?action=print|URL]],[[https://www.web2pdfconvert.com/|PDF from URL]]:)%0a%0aSee [[NatureVault/DigitalCollectibleNetwork|Digital Collectible Network]] whitepaper for a more in-depth design document of which CollectBit is based on.%0a%0a!!Intro%0aCollectBit is a new type of Crypto project; cryptocollectible [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|#]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  %0a%0aFirst each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain a chain of history from when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key ie: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a%0aEach token is self contained, containing all the information to verify that it is valid and which public key it is associated with. Therefore this token can be held, apart from any network.  The network simply exists to host the tokens.  So you could have your token hosted on several networks if you wanted.%0a%0aIf networks do not want to be compatible with other networks, they could require a special string be cryptographically integrated into the token, ensuring that the token was created specifically for their network.%0a%0a!!!Trade%0aTo trade tokens, the giver gives the receiver their private key for that token (this can be done offline).  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token when that transaction is broadcast to the network. %0a%0aSo this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected (it is also rejected if it is longer but doesn't match the nodes previous signatures for the token).  So the receiver of the token can now view the network database and verify that the network accepted the key change, and can alert the giver that it went through and we can proceed with the exchange of goods.  %0a%0aYou cannot send the collectible to the wrong address, so the giver never has to worry about loosing the funds.  The receiver does need to make sure the new key they associate with the collectible is correct though; but that is on the receiver, not the giver.%0a%0a!!!Trade second option%0aAnother option to trading tokens is for the receiver to generate a new private-public key pair.  They then send the public key to the person who currently owns the token.  The current owner then sends a transaction message to the network using their current private key to sign for a transfer of ownership to the new public key.  This way a private key never needs to be shared, so it can be done on un-encrypted communication channels.  The downside to this method is that this transfer cannot be done offline, unlike the first method.%0a%0a!!Technical Features%0a%0a# Infinite potential transactions per second - no limit.  Can potentially be offline.%0a%0a# Emission scales perfectly with adoption like Gold - stable: non-inflationary and non-deflationary.  Constant amount of work (One CPU-WEEK) required to produce each token.%0a%0a# Mining utilizes primarily the CPU and has the strongest ASIC and GPU resistance possible.  GPU can speed up the CPU by never more than 20%25, CPU will always be required for the majority of the work.  Mining is offline.%0a%0a# Fully Permission-less and Fungible.  Mining and trading can be offline for impeccable censorship-resistance. Tokens are stand-alone and are not associated with each other - perfectly untraceable.%0a%0a# Consensus mechanism is natural convergence.  Majority (51%25) attacks are not formulaic to achieve and the network can adapt to resist any attempt.%0a%0a# Tools are given to nodes for them to build a reputation to become more trusted and thus more profitable. Staking, Vouches, Reputation, Popularity, and Disputes are all factors.  If you can reliably get the network to converge to your ledger, people will trust your ledger more.%0a%0a!!Comparison to Cryptocurrency%0aSee an in depth comparison [[https://www.naturehacker.org/2021/01/bitcoin-vs-digital-collectible-currency.html|#]]%0a%0a!!!Speed of Transactions%0a%0aCollectBit transactions are instant, as fast as the network allows.  There is no waiting for blocks to be formed, and mined.  There is no bandwidth limit, as fast as transactions can be broadcast, verified, and listed, they are confirmed.  Another step is for the person receiving the transaction to verify that the nodes have reached consensus on accepting their transaction (A "transaction" is a simple key change for the collectible).  So transactions will confirm just about as fast as a centralized database, a second or two.%0a%0aIn Bitcoin, transactions are broadcast, verified, and listed, but then have to go through the 10 minute step of mining them into a block.  If the transaction does not fit in the block, then it will have to wait to be hopefully listed in a future block.  This is a very slow and tedious process that has both limited speed and bandwith.%0a!!!Privacy%0aCollectBit is private by nature.  Each collectible has it's own public and private key and therefore cannot be linked in any way with other collectibles.  The only way linking can happen is if you tie the collectible with an identity.  For example if you have an account with a node and pay them $1 a month to list all your mined collectibles, then you would have to log in to post your collectibles.  Now that node knows which collectibles are linked with your identity.  To avoid this you can either host your own node that syncs up with the rest of the network, or you can find a node that doesn't charge any fee for listing and therefore you would not need to link the collectible to your identity in order to get it listed.%0a%0aIn Bitcoin, all a person's funds are grouped into one (or more) public and private key.  Public and private keys in the same wallet might also be linked together by analysis.  So every coin that comes into that address (or wallet) or has once been in that address are linked to the same identity.  This makes analysis possible, and as far as anyone knows, any coins that have gone through an address has the same current owner and can be tracked.%0a!!!Ledger%0aCollectBit runs on a simple database.  So each node would be hosting a SQL or similar database and would sync with (preferably) a handful of other nodes.  They sync by looking for collectibles that they do not yet have listed, and list them.  If they already have a collectible and someone has the same one, then they compare the key change chain (kcc).  If the key change chain for a collectible that the other node has are the same as what they have, yet there are more key changes, they will update those new key changes (which each required a valid signature to do). If the key changes of the other node do not all match with what they have, then they will reject it.  Every collectible is just a single line in the database.%0a%0aIn Bitcoin the ledger is also a distributed database, but it has a special format and is not a simple SQL file.  It is long and complex and hard to sync.  Bitcoin's may be smaller than collectbit to store the same value though, since many coins are in every address; but it still will be much more complex.%0a!!!Nodes%0aCollectBit nodes are the leadership of the network.  There is no node hierarchy, anyone can host a node and sync up with the network, and they are encouraged to do so.  There are certain things that nodes can do to improve their credibility such as staking collectibles that can be blacklisted if the node is dishonest, getting vouches from other trusted nodes, being well connected with other nodes, staying clear of disputes, and offering good customer service.  Ultimately every node is equal the only question is what nodes the customers (users of the network) trust.  Oftentimes when verifying their transaction went through they will check the top trusted nodes and assume the rest will fall in line.  Also they might submit the transaction to only a handful of the most trusted nodes.  Nodes will also have the ability to make the rules and set the digit length of the tokens to maintain their respective Time Standard (TTS).  Every year should be a convention where the TTS-30d (Orca) holders can vote on proposals.  Nodes will have a veto power however as a sort of "Supreme Court" where they maintain the principles of CollectBit as laid out in the whitepaper (which is editable by the community).  In CollectBit miners have little power, thier only power is which nodes to submit their tokens to.  This can be a little power if they only submit tokens to their chosen network fork and therefore provide liquidity to that network.%0a%0aIn Bitcoin nodes are not worth much.  The decisionmakers in Bitcoin are the miners; Satoshi's 1 CPU= 1 Vote.  This means the only factor that can determine trust in bitcoin nodes is how much hashpower they exert.  but hashpower is not a good measure of trustworthiness or customer service.  Usually the miners fall in line with the developers, with node runners nothing more as "seeders" and "relays" for the blockchain for others to download and miners to use.%0a!!!Consensus%0a%0aCollectBit consensus is not forced.  However consensus is necessary to be a part of the same network.  So in CollectBit there are methods to gain influence like Staking collectibles, getting vouches, staying free of disputes, and practicing good customer service would make nodes popular and trusted by the community and therefore influential.  A new unknown node wouldn't be able to convince other nodes that their ledger is correct but an influential one will.%0a%0aBesides that, everything listed on the network is cryptographically verifiable and provable.  So an influential node cannot simply make up transactions or list fake tokens.  The only thing a node can do is to omit transactions and collectibles, but if other nodes are carrying them, then people will realize the node in question is censoring and it would be booted from the network.%0a%0aThe biggest challenge will be some nodes listing a different key chain (ownership history) which would have been a collectible owner attempting a double spend.  The first listed would be the valid one, and that is something the network has to converge to agree on.  This is why every transaction is allowed to propagate the network and the network agree that it is valid and accepted before goods change hands in a transaction.  The receiver of CollectBit simply has to wait enough time for the network to achieve consensus, which should be on the order of a second or two.%0a!!!Mining%0a%0a!!!Leadership%0aOnly Virgin (untransferred) Orca tokens can vote, and they can only vote for 1 year after token creation.  This is to ''help'' prevent people from buying and hoarding voting tokens.  The goal is everyone mines one orca token a year to participate in the convention.%0a!!!Security%0aYou cannot send a collectible to the wrong address.%0a!!!Tokens%0a%0a!!Challenges%0a%0aAs a brand new type of good - and network - CollectBit will have unique challenges, even though it solves basically all of Bitcoin's challenges.%0a%0a!!!Node centralization%0a%0aEven though collectibles cannot be linked by analytics, prying eyes can spy on some of the main nodes on the network.  These high profile nodes due to their popularity, will attract attention.  If someone has an account with a main node, or get their IP address logged by this node when submitting collectibles, then that is a potential vector for surveillance for governments and other spy organizations.  So say the most popular node requires you to create an account to upload collectibles to their database, and therefore get synced with the rest of the network.  Now every collectible you mine and submit would be linked to your account.  The only way I can find around this linking to an identity (even if it is a pseudononymous identity) is for no account to be needed and no IP address logged (or allow probable VPN IP's) and listing would be free.  As long as any payment is used, even if cryptocurrency, then that is a vector to link collectibles to an identity.  Even if you used a mined collectible to pay for hosting another mined collectible (which likely will happen in CollectBit since there is nothing stopping nodes from doing it), then those two collectibles would be linked to the same owner.  So our network would need to tend towards free listing to keep everything perfectly private.  This free hosting is not as much to ask as it is for Bitcoin, since the ones recording transactions in Bitcoin are miners using mass amounts of electricity.  In CollectBit it is normal full nodes that host and transfer collectibles, not miners, and therefore they use minimal electricity and computer resources.%0a%0a!!!!A solution to node centralization%0aSince we now have smaller denominations like Vaquita tokens which only take 20 mins to mint, noes could require someone to pay for hosting tokens with Vaquita's.  Say you want to upload a Beluga token, you pay the node a vaquita token to do it, and tokens can still remain unlinked (besides knowing that the vaquita token and beluga token were at one point owned by the same person, which shouldn't be a big deal).%0a!!Current Settings%0a%0aThese settings will be revisited yearly and will be [[#voting|voted]] on every year by the community.  Changes can be vetoed by the nodes via the nodes simply refusing to change the rules according to what the community wants.  Veto power should be used very rarely and carefully because community consensus is very important.  Every node participating in a veto should make a public statement as to why, or that they agree with another nodes reasoning.  Nodes should not make changes on their own, as doing such is forking the network.  Thus nodes can veto by refusing to make changes but cannot change anything on their own accord.  Things that should not change is the semiprime requirement (challenge numbers can only have exactly two factors) and the time standards (for example beluga token signifies 1 CPU Week).%0a%0a* The most a digit length requirement for a token's challenge number can be changed is 2 digits in any given vote.  So that means the minimum the requirement can be next year, in the case of Beluga, is 149 and the maximum is 153.  This setting can be waived for a year (after that it resets back to bieng enforced) for a larger adjustment but should require a supermajority (2/3rds of the votes) to waive (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice vote with 5 choices.%0a%0a* There are currently 8 token time standards (like denominations) that CollectBit accepts.  For more or less standards to be accepted, a supermajority (2/3rds of the votes) of the vote is required to change it.  And if it is changed by a supermajority, there shouldn't be more than 2 denominations either added or subtracted in any given vote.%0a%0a* How often a vote is held can be changed as well by a supermajority. If the vote interval is ever different than 1 year, then during every vote the voters will need to reaffirm the length.  If there ever fails to be a supermajority to change the vote interval or keep it different from yearly, it reverts back to yearly.%0a%0a!!!Beluga token%0a%0a# Beluga tokens currently require a semiprime challenge number that has 151 digits and the smallest of the two factors must be equal to or greater than 0.36 * 151 so 54.36 which is rounded up to 55 digits.  This ensures that each token takes about the same time to mine and requires ECM as well as GNFS to complete.  The 0.36 is open to change as well as the 151 digits to both maintain resistance to pure ECM (GPU) factoring (which can currently go up to 0.34 times the number) as well as keeping it to 1 cpu-week to factor with a decent new computer.%0a%0a# Beluga can be traded 1,000 times before it is fully degraded.  Thus each token looses 0.1%25 of it's value every trade.  So if you send $1,000 worth of beluga tokens, you are paying $1 in degradation.  This does not apply to NFT's or LFT's which have a separate degradation method.%0a%0a!!!Blue Token%0a%0a# Blue Token should take 1 year of CPU work to mint.  Blue can be transferred 1,000,000 times before it fully degrades.  So if you transferred $1,000,000 of blue tokens you would loose $1 to degradation.  Blue looses 0.0001%25 of it's value per transfer.%0a%0a!!!Humpback Token%0a%0a# Humpback Token should take 6 months of CPU work to mint.  Humpback can be transfered 100,000 times before it fully degrades.  So if you transferred $100,000 in Humpback tokens you would loose $1 to degradation.  Humpback looses 0.001%25 per transfer.%0a%0a!!!Orca Token%0a%0a# Orca token should take 1 CPU-month to factor.  So we will start with a requirement of 161 digit challenge number and 0.36 minimum factor length so 58 digits.%0a%0a# Orca token can be transfered 10,000 times before it fully degrades so it would loose 0.01%25 of its value every trade.  If you transfered $10,000 worth of Orca token you would loose $1 to degradation.%0a%0a# Orca token is the voting token and is part of what is required to have a valid vote, and this fact should not change unless the voting period has been different than one year for 3 periods in a row.  If so then a majority vote can change the voting token. If the voting period ever reverts back to 1 year, then the voting token reverts back to Orca.%0a%0a# An orca used in voting must have been mined after the last vote, and must be untraded (virgin) since this means votes cannot be bought or sold.%0a%0a!!!Ginko Token%0a%0a# Ginko token takes 2 days of CPU work to mint.  Ginko can be transferred 500 times before it fully degrades.  So if you transferred $500 worth of Ginko tokens you would loose $1 worth to degradation.%0a%0a!!!Bottlenose Token%0a%0a# Bottlenose token should take 8 hours of CPU time to mint.  Bottlenose can be transferred 100 times before it fully degrades, so 1%25 per transfer.  So sending $100 worth of bottlenose tokens would loose $1 in degradation.%0a%0a!!!Hourglass Token%0a%0a# Hourglass token should take 1 hour of CPU time to mint.  Hourglass can be transferred 100 times before it fully degrades, so 1%25 per transfer.  So sending $100 worth of Hourglass tokens would loose $1 in degradation.%0a%0a!!!Vaquita Token%0a%0a# Vaquita token should take 20 minutes of CPU time to mint.  Vaquita can be transferred 100 times before it fully degrades, so 1%25 per transfer.  So sending $100 worth of bottlenose tokens would loose $1 in degradation.%0a%0a!!Notes%0a%0aButerin idea for random distribtion of coins is just like collectbit [[https://bitcoinmagazine.com/business/the-wasted-electricity-objection-to-bitcoin-1330409176|#]]%0a
time=1657636307
author:1657636307=
diff:1657636307:1641138123:=13c13%0a%3c See [[NatureVault/DigitalCollectibleNetwork|Digital Collectible Network]] whitepaper for a more in-depth design document of which CollectBit is based on.%0a---%0a> See [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network]] whitepaper for a more in-depth design document of which CollectBit is based on.%0a
author:1641138123=
diff:1641138123:1623866339:=142,145d141%0a%3c %0a%3c !!Notes%0a%3c %0a%3c Buterin idea for random distribtion of coins is just like collectbit [[https://bitcoinmagazine.com/business/the-wasted-electricity-objection-to-bitcoin-1330409176|#]]%0a
author:1623866339=
diff:1623866339:1623866319:=29,30c29,30%0a%3c You cannot send the collectible to the wrong address, so the giver never has to worry about loosing the funds.  The receiver does need to make sure the new key they associate with the collectible is correct though; but that is on the receiver, not the giver.%0a%3c %0a---%0a> You cannot send the collectible to the wrong address, so the giver never has to worry about loosing the funds.  The reciever does need to make sure the new key they associate with the collectible is correct though; but that is on the reciever, not the giver.%0a> %0a32c32%0a%3c Another option to trading tokens is for the receiver to generate a new private-public key pair.  They then send the public key to the person who currently owns the token.  The current owner then sends a transaction message to the network using their current private key to sign for a transfer of ownership to the new public key.  This way a private key never needs to be shared, so it can be done on un-encrypted communication channels.  The downside to this method is that this transfer cannot be done offline, unlike the first method.%0a---%0a> Another option to trading tokens is for the reciever to generate a new private-public key pair.  They then send the public key to the person who currently owns the token.  The current owner then sends a transaction message to the network using thier current private key to sign for a transfer of ownership to the new public key.  This way a private key never needs to be shared, so it can be done on un-encrypted communication channels.  The downside to this method is that this transfer cannot be done offline, unlike the first method.%0a
host:1623866339=68.231.69.235
author:1623866319=
diff:1623866319:1623866253:=25c25%0a%3c To trade tokens, the giver gives the receiver their private key for that token (this can be done offline).  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token when that transaction is broadcast to the network. %0a---%0a> To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token.  %0a
host:1623866319=68.231.69.235
author:1623866253=
diff:1623866253:1623466411:=30,33d29%0a%3c %0a%3c !!!Trade second option%0a%3c Another option to trading tokens is for the reciever to generate a new private-public key pair.  They then send the public key to the person who currently owns the token.  The current owner then sends a transaction message to the network using thier current private key to sign for a transfer of ownership to the new public key.  This way a private key never needs to be shared, so it can be done on un-encrypted communication channels.  The downside to this method is that this transfer cannot be done offline, unlike the first method.%0a%3c %0a
host:1623866253=68.231.69.235
author:1623466411=
diff:1623466411:1622779379:=87,88d86%0a%3c !!!!A solution to node centralization%0a%3c Since we now have smaller denominations like Vaquita tokens which only take 20 mins to mint, noes could require someone to pay for hosting tokens with Vaquita's.  Say you want to upload a Beluga token, you pay the node a vaquita token to do it, and tokens can still remain unlinked (besides knowing that the vaquita token and beluga token were at one point owned by the same person, which shouldn't be a big deal).%0a
host:1623466411=68.231.69.235
author:1622779379=
diff:1622779379:1622779359:=119c119%0a%3c # An orca used in voting must have been mined after the last vote, and must be untraded (virgin) since this means votes cannot be bought or sold.%0a---%0a> An orca used in voting must have been mined after the last vote, and must be untraded (virgin) since this means votes cannot be bought or sold.%0a
host:1622779379=68.231.69.235
author:1622779359=
diff:1622779359:1622779190:=117,119c117%0a%3c # Orca token is the voting token and is part of what is required to have a valid vote, and this fact should not change unless the voting period has been different than one year for 3 periods in a row.  If so then a majority vote can change the voting token. If the voting period ever reverts back to 1 year, then the voting token reverts back to Orca.%0a%3c %0a%3c An orca used in voting must have been mined after the last vote, and must be untraded (virgin) since this means votes cannot be bought or sold.%0a---%0a> # Orca token is a part of the voting token, and this fact should not change unless the voting period has been different than one year for 3 periods in a row, then a majority vote can change the voting token. If the voting period ever reverts back to 1 year, then the voting token reverts back to Orca.%0a
host:1622779359=68.231.69.235
author:1622779190=
diff:1622779190:1622779170:=105c105%0a%3c # Blue Token should take 1 year of CPU work to mint.  Blue can be transferred 1,000,000 times before it fully degrades.  So if you transferred $1,000,000 of blue tokens you would loose $1 to degradation.  Blue looses 0.0001%25 of it's value per transfer.%0a---%0a> # Blue Token should take 1 year of CPU work to mint.  Blue can be transferred 1,000,000 times before it fully degrades.  So if you transferred $1,000,000 of blue tokens you would loose $1 to degradation.  Blue looses 0.000001%25 of it's value per transfer.%0a
host:1622779190=68.231.69.235
author:1622779170=
diff:1622779170:1622778738:=109c109%0a%3c # Humpback Token should take 6 months of CPU work to mint.  Humpback can be transfered 100,000 times before it fully degrades.  So if you transferred $100,000 in Humpback tokens you would loose $1 to degradation.  Humpback looses 0.001%25 per transfer.%0a---%0a> # Humpback Token should take 6 months of CPU work to mint.  Humpback can be transfered 100,000 times before it fully degrades.  So if you transferred $100,000 in Humpback tokens you would loose $1 to degradation.%0a
host:1622779170=68.231.69.235
author:1622778738=
diff:1622778738:1622778616:=115c115%0a%3c # Orca token can be transfered 10,000 times before it fully degrades so it would loose 0.01%25 of its value every trade.  If you transfered $10,000 worth of Orca token you would loose $1 to degradation.%0a---%0a> # Orca token can be transfered 10,000 times before it fully degrades so it would loose 0.01%25 of its value every trade.  If you transfered $10,000 worth of beluga token you would loose $1 to degradation.%0a
host:1622778738=68.231.69.235
author:1622778616=
diff:1622778616:1622778403:=116,117d115%0a%3c %0a%3c # Orca token is a part of the voting token, and this fact should not change unless the voting period has been different than one year for 3 periods in a row, then a majority vote can change the voting token. If the voting period ever reverts back to 1 year, then the voting token reverts back to Orca.%0a
host:1622778616=68.231.69.235
author:1622778403=
diff:1622778403:1622778152:=107,109c107,109%0a%3c !!!Humpback Token%0a%3c %0a%3c # Humpback Token should take 6 months of CPU work to mint.  Humpback can be transfered 100,000 times before it fully degrades.  So if you transferred $100,000 in Humpback tokens you would loose $1 to degradation.%0a---%0a> !!!Sei Token%0a> %0a> # Sei Token should take 9 months of CPU work to mint.  Sei can be transfered 100,000 times before it fully degrades.  So if you transferred $100,000 in Sei tokens you would loose $1 to degradation.%0a
host:1622778403=68.231.69.235
author:1622778152=
diff:1622778152:1622777883:=105c105%0a%3c # Blue Token should take 1 year of CPU work to mint.  Blue can be transferred 1,000,000 times before it fully degrades.  So if you transferred $1,000,000 of blue tokens you would loose $1 to degradation.  Blue looses 0.000001%25 of it's value per transfer.%0a---%0a> # Blue Token should take 1 year of CPU work to mint.  Blue can be transferred 1,000,000 times before it fully degrades.  So if you transferred $1,000,000 of blue tokens you would loose $1 to degradation.  Blue looses 0.000001%25 per transfer.%0a
host:1622778152=68.231.69.235
author:1622777883=
diff:1622777883:1622777782:=91c91%0a%3c * The most a digit length requirement for a token's challenge number can be changed is 2 digits in any given vote.  So that means the minimum the requirement can be next year, in the case of Beluga, is 149 and the maximum is 153.  This setting can be waived for a year (after that it resets back to bieng enforced) for a larger adjustment but should require a supermajority (2/3rds of the votes) to waive (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice vote with 5 choices.%0a---%0a> * The most a digit length requirement for a token's challenge number can be changed is 2 digits in any given vote.  So that means the minimum the requirement can be next year, in the case of Beluga, is 149 and the maximum is 153.  This setting can be waived for a year for a larger adjustment but should require a supermajority (2/3rds of the votes) to waive (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice vote with 5 choices.%0a
host:1622777883=68.231.69.235
author:1622777782=
diff:1622777782:1622777636:=95c95%0a%3c * How often a vote is held can be changed as well by a supermajority. If the vote interval is ever different than 1 year, then during every vote the voters will need to reaffirm the length.  If there ever fails to be a supermajority to change the vote interval or keep it different from yearly, it reverts back to yearly.%0a---%0a> * How often a vote is held can be changed as well by a supermajority. If the vote interval is ever different than 1 year, then every vote the voters will need to reaffirm the length.  If there ever fails to be a supermajority to change the vote interval or keep it different from yearly, it reverts back to yearly.%0a
host:1622777782=68.231.69.235
author:1622777636=
diff:1622777636:1622777262:=89c89%0a%3c These settings will be revisited yearly and will be [[#voting|voted]] on every year by the community.  Changes can be vetoed by the nodes via the nodes simply refusing to change the rules according to what the community wants.  Veto power should be used very rarely and carefully because community consensus is very important.  Every node participating in a veto should make a public statement as to why, or that they agree with another nodes reasoning.  Nodes should not make changes on their own, as doing such is forking the network.  Thus nodes can veto by refusing to make changes but cannot change anything on their own accord.  Things that should not change is the semiprime requirement (challenge numbers can only have exactly two factors) and the time standards (for example beluga token signifies 1 CPU Week).%0a---%0a> These settings will be revisited yearly and will be [[#voting|voted]] on every year by the community.  Changes can be vetoed by the nodes via the nodes simply refusing to change the rules according to what the community wants.  Veto power should be used very rarely and carefully because community consensus is very important.  Every node participating in a veto should make a public statement as to why, or that they agree with another nodes reasoning.  Things that should not change is the semiprime requirement (challenge numbers can only have exactly two factors) and the time standards (for example beluga token signifies 1 CPU Week).%0a
host:1622777636=68.231.69.235
author:1622777262=
diff:1622777262:1622777141:=91c91%0a%3c * The most a digit length requirement for a token's challenge number can be changed is 2 digits in any given vote.  So that means the minimum the requirement can be next year, in the case of Beluga, is 149 and the maximum is 153.  This setting can be waived for a year for a larger adjustment but should require a supermajority (2/3rds of the votes) to waive (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice vote with 5 choices.%0a---%0a> * The most a digit length requirement for a token's challenge number can be changed is 2 digits in any given vote.  So that means the minimum the requirement can be next year, in the case of Beluga, is 149 and the maximum is 153.  This setting can be waived for a year for a larger adjustment but should require a supermajority (2/3rds of the votes) to waive (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice with 5 choices.%0a
host:1622777262=68.231.69.235
author:1622777141=
diff:1622777141:1622777086:=81c81%0a%3c As a brand new type of good - and network - CollectBit will have unique challenges, even though it solves basically all of Bitcoin's challenges.%0a---%0a> As a brand new type of good, and network; CollectBit will have unique challenges, even though it solves basically all of Bitcoin's challenges.%0a
host:1622777141=68.231.69.235
author:1622777086=
diff:1622777086:1622776883:=91,92c91,92%0a%3c * The most a digit length requirement for a token's challenge number can be changed is 2 digits in any given vote.  So that means the minimum the requirement can be next year, in the case of Beluga, is 149 and the maximum is 153.  This setting can be waived for a year for a larger adjustment but should require a supermajority (2/3rds of the votes) to waive (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice with 5 choices.%0a%3c %0a---%0a> * The most a digit length requirement for a token's challenge number can be changed is 2 digits.  So that means the minimum the requirement can be next year, in the case of Beluga, is 149 and the maximum is 153.  This setting can be waived for a year for a larger adjustment but should require a supermajority (2/3rds of the votes) to waive (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice with 5 choices.%0a> %0a94,95d93%0a%3c %0a%3c * How often a vote is held can be changed as well by a supermajority. If the vote interval is ever different than 1 year, then every vote the voters will need to reaffirm the length.  If there ever fails to be a supermajority to change the vote interval or keep it different from yearly, it reverts back to yearly.%0a
host:1622777086=68.231.69.235
author:1622776883=
diff:1622776883:1622776724:=93c93%0a%3c * There are currently 8 token time standards (like denominations) that CollectBit accepts.  For more or less standards to be accepted, a supermajority (2/3rds of the votes) of the vote is required to change it.  And if it is changed by a supermajority, there shouldn't be more than 2 denominations either added or subtracted in any given vote.%0a---%0a> * There are currently 8 token time standards (like denominations) that CollectBit accepts.  For more or less standards to be accepted, a supermajority (2/3rds of the votes) of the vote is required to change it.%0a
host:1622776883=68.231.69.235
author:1622776724=
diff:1622776724:1622776636:=93c93%0a%3c * There are currently 8 token time standards (like denominations) that CollectBit accepts.  For more or less standards to be accepted, a supermajority (2/3rds of the votes) of the vote is required to change it.%0a---%0a> * There are currently 8 token time standards that CollectBit accepts.  For more or less standards to be accepted, a supermajority (2/3rds of the votes) of the vote is required to change it.%0a
host:1622776724=68.231.69.235
author:1622776636=
diff:1622776636:1622776578:=16,19c16,17%0a%3c CollectBit is a new type of Crypto project; cryptocollectible [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|#]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  %0a%3c %0a%3c First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain a chain of history from when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key ie: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a%3c %0a---%0a> CollectBit is a new type of Crypto project; cryptocollectible [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|#]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain a chain of history from when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key ie: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a> %0a25,29c23%0a%3c To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token.  %0a%3c %0a%3c So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected (it is also rejected if it is longer but doesn't match the nodes previous signatures for the token).  So the receiver of the token can now view the network database and verify that the network accepted the key change, and can alert the giver that it went through and we can proceed with the exchange of goods.  %0a%3c %0a%3c You cannot send the collectible to the wrong address, so the giver never has to worry about loosing the funds.  The reciever does need to make sure the new key they associate with the collectible is correct though; but that is on the reciever, not the giver.%0a---%0a> To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected (it is also rejected if it is longer but doesn't match the nodes previous signatures for the token).  So the receiver of the token can now view the network database and verify that the network accepted the key change, and can alert the giver that it went through and we can proceed with the exchange of goods.  You cannot send the collectible to the wrong address, so the giver never has to worry about loosing the funds.  The reciever does need to make sure the new key they associate with the collectible is correct though; but that is on the reciever, not the giver.%0a
host:1622776636=68.231.69.235
author:1622776578=
diff:1622776578:1622775963:=23c23,24%0a%3c To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected (it is also rejected if it is longer but doesn't match the nodes previous signatures for the token).  So the receiver of the token can now view the network database and verify that the network accepted the key change, and can alert the giver that it went through and we can proceed with the exchange of goods.  You cannot send the collectible to the wrong address, so the giver never has to worry about loosing the funds.  The reciever does need to make sure the new key they associate with the collectible is correct though; but that is on the reciever, not the giver.%0a---%0a> To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected (it is also rejected if it is longer but doesn't match the nodes previous signatures for the token).  So the receiver of the token can now view the network database and verify that the network accepted the key change, and can alert the giver that it went through and we can proceed with the exchange of goods.%0a> %0a
host:1622776578=68.231.69.235
author:1622775963=
diff:1622775963:1622775931:=84c84%0a%3c These settings will be revisited yearly and will be [[#voting|voted]] on every year by the community.  Changes can be vetoed by the nodes via the nodes simply refusing to change the rules according to what the community wants.  Veto power should be used very rarely and carefully because community consensus is very important.  Every node participating in a veto should make a public statement as to why, or that they agree with another nodes reasoning.  Things that should not change is the semiprime requirement (challenge numbers can only have exactly two factors) and the time standards (for example beluga token signifies 1 CPU Week).%0a---%0a> These settings will be revisited yearly and will be [[#voting|voted]] on every year by the community.  Changes can be vetoed by the nodes by the nodes simply refusing to change the rules according to what the community wants.  Veto power should be used very rarely and carefully because community consensus is very important.  Every node participating in a veto should make a public statement as to why, or that they agree with another nodes reasoning.  Things that should not change is the semiprime requirement (challenge numbers can only have exactly two factors) and the time standards (for example beluga token signifies 1 CPU Week).%0a
host:1622775963=68.231.69.235
author:1622775931=
diff:1622775931:1622775848:=84c84%0a%3c These settings will be revisited yearly and will be [[#voting|voted]] on every year by the community.  Changes can be vetoed by the nodes by the nodes simply refusing to change the rules according to what the community wants.  Veto power should be used very rarely and carefully because community consensus is very important.  Every node participating in a veto should make a public statement as to why, or that they agree with another nodes reasoning.  Things that should not change is the semiprime requirement (challenge numbers can only have exactly two factors) and the time standards (for example beluga token signifies 1 CPU Week).%0a---%0a> These settings will be revisited yearly and will be [[#voting|voted]] on every year.  Changes can be vetoed by the nodes by the nodes simply refusing to change the rules according to what the community wants.  Veto power should be used very rarely and carefully because community consensus is very important.  Every node participating in a veto should make a public statement as to why, or that they agree with another nodes reasoning.  Things that should not change is the semiprime requirement (challenge numbers can only have exactly two factors) and the time standards (for example beluga token signifies 1 CPU Week).%0a
host:1622775931=68.231.69.235
author:1622775848=
diff:1622775848:1622775669:=86,88c86%0a%3c * The most a digit length requirement for a token's challenge number can be changed is 2 digits.  So that means the minimum the requirement can be next year, in the case of Beluga, is 149 and the maximum is 153.  This setting can be waived for a year for a larger adjustment but should require a supermajority (2/3rds of the votes) to waive (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice with 5 choices.%0a%3c %0a%3c * There are currently 8 token time standards that CollectBit accepts.  For more or less standards to be accepted, a supermajority (2/3rds of the votes) of the vote is required to change it.%0a---%0a> * The most a digit length requirement for a token's challenge number can be changed is 2 digits.  So that means the minimum the requirement can be next year, in the case of Beluga, is 149 and the maximum is 153.  This setting can be waived for a year for a larger adjustment but should require a supermajority to waive (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice with 5 choices.%0a
host:1622775848=68.231.69.235
author:1622775669=
diff:1622775669:1622775355:=112,122d111%0a%3c !!!Bottlenose Token%0a%3c %0a%3c # Bottlenose token should take 8 hours of CPU time to mint.  Bottlenose can be transferred 100 times before it fully degrades, so 1%25 per transfer.  So sending $100 worth of bottlenose tokens would loose $1 in degradation.%0a%3c %0a%3c !!!Hourglass Token%0a%3c %0a%3c # Hourglass token should take 1 hour of CPU time to mint.  Hourglass can be transferred 100 times before it fully degrades, so 1%25 per transfer.  So sending $100 worth of Hourglass tokens would loose $1 in degradation.%0a%3c %0a%3c !!!Vaquita Token%0a%3c %0a%3c # Vaquita token should take 20 minutes of CPU time to mint.  Vaquita can be transferred 100 times before it fully degrades, so 1%25 per transfer.  So sending $100 worth of bottlenose tokens would loose $1 in degradation.%0a
host:1622775669=68.231.69.235
author:1622775355=
diff:1622775355:1622775225:=86c86%0a%3c * The most a digit length requirement for a token's challenge number can be changed is 2 digits.  So that means the minimum the requirement can be next year, in the case of Beluga, is 149 and the maximum is 153.  This setting can be waived for a year for a larger adjustment but should require a supermajority to waive (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice with 5 choices.%0a---%0a> * The most a digit length requirement for a token's challenge number can be changed is 2 digits.  So that means the minimum the requirement can be next year, in the case of Beluga, is 149 and the maximum is 153.  This setting can be changed but should require a supermajority to change (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice with 5 choices.%0a
host:1622775355=68.231.69.235
author:1622775225=
diff:1622775225:1622775113:=84c84%0a%3c These settings will be revisited yearly and will be [[#voting|voted]] on every year.  Changes can be vetoed by the nodes by the nodes simply refusing to change the rules according to what the community wants.  Veto power should be used very rarely and carefully because community consensus is very important.  Every node participating in a veto should make a public statement as to why, or that they agree with another nodes reasoning.  Things that should not change is the semiprime requirement (challenge numbers can only have exactly two factors) and the time standards (for example beluga token signifies 1 CPU Week).%0a---%0a> These settings will be revisited yearly and will be [[#voting|voted]] on every year.  Changes can be vetoed by the nodes by the nodes simply refusing to change the rules according to what the community wants.  Veto power should be used very rarely and carefully because community consensus is very important.  Every node participating in a veto should make a public statement as to why, or that they agree with another nodes reasoning.%0a
host:1622775225=68.231.69.235
author:1622775113=
diff:1622775113:1622775011:=96c96%0a%3c # Blue Token should take 1 year of CPU work to mint.  Blue can be transferred 1,000,000 times before it fully degrades.  So if you transferred $1,000,000 of blue tokens you would loose $1 to degradation.  Blue looses 0.000001%25 per transfer.%0a---%0a> # Blue Token shpuld take 1 year of CPU work to mint.  Blue can be transferred 1,000,000 times before it fully degrades.  Sp if you transferred $1,000,000 of blue tokens you would loose $1 to degradation.%0a
host:1622775113=68.231.69.235
author:1622775011=
diff:1622775011:1622774870:=92c92%0a%3c # Beluga can be traded 1,000 times before it is fully degraded.  Thus each token looses 0.1%25 of it's value every trade.  So if you send $1,000 worth of beluga tokens, you are paying $1 in degradation.  This does not apply to NFT's or LFT's which have a separate degradation method.%0a---%0a> # Beluga can be traded 1000 times before it is fully degraded.  Thus each tokwn looses 0.1%25 of it's value every trade.  So if you send $1000 worth of beluga tokens, you are paying $1 in degradation.  This does not apply to NFT's or LFT's which have a separate degradation method.%0a
host:1622775011=68.231.69.235
author:1622774870=
diff:1622774870:1622774794:=86c86%0a%3c * The most a digit length requirement for a token's challenge number can be changed is 2 digits.  So that means the minimum the requirement can be next year, in the case of Beluga, is 149 and the maximum is 153.  This setting can be changed but should require a supermajority to change (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice with 5 choices.%0a---%0a> * The most a digit length requirement for a token's challenge number can be changed is 2 digits.  So that means the minimum the requirement can be next year is 149 and the maximum is 153.  This setting can be changed but should require a supermajority to change (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice with 5 choices.%0a
host:1622774870=68.231.69.235
author:1622774794=
diff:1622774794:1622774171:=94,101d93%0a%3c !!!Blue Token%0a%3c %0a%3c # Blue Token shpuld take 1 year of CPU work to mint.  Blue can be transferred 1,000,000 times before it fully degrades.  Sp if you transferred $1,000,000 of blue tokens you would loose $1 to degradation.%0a%3c %0a%3c !!!Sei Token%0a%3c %0a%3c # Sei Token should take 9 months of CPU work to mint.  Sei can be transfered 100,000 times before it fully degrades.  So if you transferred $100,000 in Sei tokens you would loose $1 to degradation.%0a%3c %0a106,111c98%0a%3c # Orca token can be transfered 10,000 times before it fully degrades so it would loose 0.01%25 of its value every trade.  If you transfered $10,000 worth of beluga token you would loose $1 to degradation.%0a%3c %0a%3c !!!Ginko Token%0a%3c %0a%3c # Ginko token takes 2 days of CPU work to mint.  Ginko can be transferred 500 times before it fully degrades.  So if you transferred $500 worth of Ginko tokens you would loose $1 worth to degradation.%0a%3c %0a---%0a> # Orca token can be transfered 10,000 times before it fully degrades so it would loose 0.01%25 of its value every trade.  If you transfered $10,000 worth of beluga token you would loose $1 to degradation.%0a\ No newline at end of file%0a
host:1622774794=68.231.69.235
author:1622774171=
diff:1622774171:1622773999:=96,98c96%0a%3c # Orca token should take 1 CPU-month to factor.  So we will start with a requirement of 161 digit challenge number and 0.36 minimum factor length so 58 digits.%0a%3c %0a%3c # Orca token can be transfered 10,000 times before it fully degrades so it would loose 0.01%25 of its value every trade.  If you transfered $10,000 worth of beluga token you would loose $1 to degradation.%0a\ No newline at end of file%0a---%0a> # orca token should take 1 CPU-month to factor.  So we will start with a requirement of 161 digit challenge number and 0.36 minimum factor length so%0a\ No newline at end of file%0a
host:1622774171=68.231.69.235
author:1622773999=
diff:1622773999:1622773856:=92,96c92%0a%3c # Beluga can be traded 1000 times before it is fully degraded.  Thus each tokwn looses 0.1%25 of it's value every trade.  So if you send $1000 worth of beluga tokens, you are paying $1 in degradation.  This does not apply to NFT's or LFT's which have a separate degradation method.%0a%3c %0a%3c !!!Orca Token%0a%3c %0a%3c # orca token should take 1 CPU-month to factor.  So we will start with a requirement of 161 digit challenge number and 0.36 minimum factor length so %0a\ No newline at end of file%0a---%0a> # Beluga can be traded 1000 times before it is fully degraded.  Thus each tokwn looses 0.1%25 of it's value every trade.  So if you send $1000 worth of beluga tokens, you are paying $1 in degradation.  This does not apply to NFT's or LFT's which have a separate degradation method.%0a\ No newline at end of file%0a
host:1622773999=68.231.69.235
author:1622773856=
diff:1622773856:1622773182:=84,89c84,85%0a%3c These settings will be revisited yearly and will be [[#voting|voted]] on every year.  Changes can be vetoed by the nodes by the nodes simply refusing to change the rules according to what the community wants.  Veto power should be used very rarely and carefully because community consensus is very important.  Every node participating in a veto should make a public statement as to why, or that they agree with another nodes reasoning.%0a%3c %0a%3c * The most a digit length requirement for a token's challenge number can be changed is 2 digits.  So that means the minimum the requirement can be next year is 149 and the maximum is 153.  This setting can be changed but should require a supermajority to change (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice with 5 choices.%0a%3c %0a%3c !!!Beluga token%0a%3c %0a---%0a> These settings will be revisited yearly and will be [[#voting|voted]] on every year.%0a> %0a92c88%0a%3c # Beluga can be traded 1000 times before it is fully degraded.  Thus each tokwn looses 0.1%25 of it's value every trade.  So if you send $1000 worth of beluga tokens, you are paying $1 in degradation.  This does not apply to NFT's or LFT's which have a separate degradation method.%0a\ No newline at end of file%0a---%0a> # The most a digit length requirement for a token's challenge number can be changed is 2 digits.  So that means the minimum the requirement can be next year is 149 and the maximum is 153.  This setting can be changed but should require a supermajority to change (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice with 5 choices.%0a\ No newline at end of file%0a
host:1622773856=68.231.69.235
author:1622773182=
diff:1622773182:1622772935:=86,88c86%0a%3c # Beluga tokens currently require a semiprime challenge number that has 151 digits and the smallest of the two factors must be equal to or greater than 0.36 * 151 so 54.36 which is rounded up to 55 digits.  This ensures that each token takes about the same time to mine and requires ECM as well as GNFS to complete.  The 0.36 is open to change as well as the 151 digits to both maintain resistance to pure ECM (GPU) factoring (which can currently go up to 0.34 times the number) as well as keeping it to 1 cpu-week to factor with a decent new computer.%0a%3c %0a%3c # The most a digit length requirement for a token's challenge number can be changed is 2 digits.  So that means the minimum the requirement can be next year is 149 and the maximum is 153.  This setting can be changed but should require a supermajority to change (ie: probably shouldn't change).  This setting also makes voting on what the digit length for next year should be, a simple multiple choice with 5 choices.%0a\ No newline at end of file%0a---%0a> # Beluga tokens currently require a semiprime challenge number that has 151 digits and the smallest of the two factors must be equal to or greater than 0.36 * 151 so 54.36 which is rounded up to 55 digits.  This ensures that each token takes about the same time to mine and requires ECM as well as GNFS to complete.  The 0.36 is open to change as well as the 151 digits to both maintain resistance to pure ECM (GPU) factoring (which can currently go up to 0.34 times the number) as well as keeping it to 1 cpu-week to factor with a decent new computer.%0a\ No newline at end of file%0a
host:1622773182=68.231.69.235
author:1622772935=
diff:1622772935:1622772832:=86c86%0a%3c # Beluga tokens currently require a semiprime challenge number that has 151 digits and the smallest of the two factors must be equal to or greater than 0.36 * 151 so 54.36 which is rounded up to 55 digits.  This ensures that each token takes about the same time to mine and requires ECM as well as GNFS to complete.  The 0.36 is open to change as well as the 151 digits to both maintain resistance to pure ECM (GPU) factoring (which can currently go up to 0.34 times the number) as well as keeping it to 1 cpu-week to factor with a decent new computer.%0a\ No newline at end of file%0a---%0a> # Beluga tokens currently require a semiprime challenge number that has 151 digits and the smallest of the two factors must be equal to or greater than 0.36 * 151 so 54.36 which is rounded up to 55 digits.  This ensures that each token takes about the same time to mine and requires ECM as well as GNFS to complete.  The 0.36 is open to change as well as the 151 digits to both maintain resistance to pure ECM (GPU) factoring as well as keeping it to 1 cpu-week to factor with a decent new computer.%0a\ No newline at end of file%0a
host:1622772935=68.231.69.235
author:1622772832=
diff:1622772832:1622772398:=82,86c82,84%0a%3c !!Current Settings%0a%3c %0a%3c These settings will be revisited yearly and will be [[#voting|voted]] on every year.%0a%3c %0a%3c # Beluga tokens currently require a semiprime challenge number that has 151 digits and the smallest of the two factors must be equal to or greater than 0.36 * 151 so 54.36 which is rounded up to 55 digits.  This ensures that each token takes about the same time to mine and requires ECM as well as GNFS to complete.  The 0.36 is open to change as well as the 151 digits to both maintain resistance to pure ECM (GPU) factoring as well as keeping it to 1 cpu-week to factor with a decent new computer.%0a\ No newline at end of file%0a---%0a> !!Settings%0a> %0a> # Beluga tokens currently require a semiprime challenge number that has 151 digits and the smallest of the two fzctors must be equal to or greater than 0.36 * 151 so%0a\ No newline at end of file%0a
host:1622772832=68.231.69.235
author:1622772398=
diff:1622772398:1622772244:=80,84c80%0a%3c Even though collectibles cannot be linked by analytics, prying eyes can spy on some of the main nodes on the network.  These high profile nodes due to their popularity, will attract attention.  If someone has an account with a main node, or get their IP address logged by this node when submitting collectibles, then that is a potential vector for surveillance for governments and other spy organizations.  So say the most popular node requires you to create an account to upload collectibles to their database, and therefore get synced with the rest of the network.  Now every collectible you mine and submit would be linked to your account.  The only way I can find around this linking to an identity (even if it is a pseudononymous identity) is for no account to be needed and no IP address logged (or allow probable VPN IP's) and listing would be free.  As long as any payment is used, even if cryptocurrency, then that is a vector to link collectibles to an identity.  Even if you used a mined collectible to pay for hosting another mined collectible (which likely will happen in CollectBit since there is nothing stopping nodes from doing it), then those two collectibles would be linked to the same owner.  So our network would need to tend towards free listing to keep everything perfectly private.  This free hosting is not as much to ask as it is for Bitcoin, since the ones recording transactions in Bitcoin are miners using mass amounts of electricity.  In CollectBit it is normal full nodes that host and transfer collectibles, not miners, and therefore they use minimal electricity and computer resources.%0a%3c %0a%3c !!Settings%0a%3c %0a%3c # Beluga tokens currently require a semiprime challenge number that has 151 digits and the smallest of the two fzctors must be equal to or greater than 0.36 * 151 so %0a\ No newline at end of file%0a---%0a> Even though collectibles cannot be linked by analytics, prying eyes can spy on some of the main nodes on the network.  These high profile nodes due to their popularity, will attract attention.  If someone has an account with a main node, or get their IP address logged by this node when submitting collectibles, then that is a potential vector for surveillance for governments and other spy organizations.  So say the most popular node requires you to create an account to upload collectibles to their database, and therefore get synced with the rest of the network.  Now every collectible you mine and submit would be linked to your account.  The only way I can find around this linking to an identity (even if it is a pseudononymous identity) is for no account to be needed and no IP address logged (or allow probable VPN IP's) and listing would be free.  As long as any payment is used, even if cryptocurrency, then that is a vector to link collectibles to an identity.  Even if you used a mined collectible to pay for hosting another mined collectible (which likely will happen in CollectBit since there is nothing stopping nodes from doing it), then those two collectibles would be linked to the same owner.  So our network would need to tend towards free listing to keep everything perfectly private.  This free hosting is not as much to ask as it is for Bitcoin, since the ones recording transactions in Bitcoin are miners using mass amounts of electricity.  In CollectBit it is normal full nodes that host and transfer collectibles, not miners, and therefore they use minimal electricity and computer resources.%0a\ No newline at end of file%0a
host:1622772398=68.231.69.235
author:1622772244=
diff:1622772244:1622772154:=23c23%0a%3c To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected (it is also rejected if it is longer but doesn't match the nodes previous signatures for the token).  So the receiver of the token can now view the network database and verify that the network accepted the key change, and can alert the giver that it went through and we can proceed with the exchange of goods.%0a---%0a> To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected (it is also rejected if it is longer but doesn't match the nodes previous signatures for the token).  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange of goods.%0a
host:1622772244=68.231.69.235
author:1622772154=
diff:1622772154:1622771783:=20c20%0a%3c If networks do not want to be compatible with other networks, they could require a special string be cryptographically integrated into the token, ensuring that the token was created specifically for their network.%0a---%0a> If networks do not want to be compatible with other networks, they could require a special string be integrated into the token, ensuring that the token was created specifically for their network.%0a
host:1622772154=68.231.69.235
author:1622771783=
diff:1622771783:1622750184:=13c13%0a%3c See [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network]] whitepaper for a more in-depth design document of which CollectBit is based on.%0a---%0a> See [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network Whitepaper]] for a more in-depth design document which CollectBit is based on.%0a
host:1622771783=68.231.69.235
author:1622750184=
diff:1622750184:1622749721:=61,65d60%0a%3c CollectBit consensus is not forced.  However consensus is necessary to be a part of the same network.  So in CollectBit there are methods to gain influence like Staking collectibles, getting vouches, staying free of disputes, and practicing good customer service would make nodes popular and trusted by the community and therefore influential.  A new unknown node wouldn't be able to convince other nodes that their ledger is correct but an influential one will.%0a%3c %0a%3c Besides that, everything listed on the network is cryptographically verifiable and provable.  So an influential node cannot simply make up transactions or list fake tokens.  The only thing a node can do is to omit transactions and collectibles, but if other nodes are carrying them, then people will realize the node in question is censoring and it would be booted from the network.%0a%3c %0a%3c The biggest challenge will be some nodes listing a different key chain (ownership history) which would have been a collectible owner attempting a double spend.  The first listed would be the valid one, and that is something the network has to converge to agree on.  This is why every transaction is allowed to propagate the network and the network agree that it is valid and accepted before goods change hands in a transaction.  The receiver of CollectBit simply has to wait enough time for the network to achieve consensus, which should be on the order of a second or two.%0a
host:1622750184=68.231.69.235
author:1622749721=
diff:1622749721:1622478259:=67,75c67%0a%3c !!!Tokens%0a%3c %0a%3c !!Challenges%0a%3c %0a%3c As a brand new type of good, and network; CollectBit will have unique challenges, even though it solves basically all of Bitcoin's challenges.%0a%3c %0a%3c !!!Node centralization%0a%3c %0a%3c Even though collectibles cannot be linked by analytics, prying eyes can spy on some of the main nodes on the network.  These high profile nodes due to their popularity, will attract attention.  If someone has an account with a main node, or get their IP address logged by this node when submitting collectibles, then that is a potential vector for surveillance for governments and other spy organizations.  So say the most popular node requires you to create an account to upload collectibles to their database, and therefore get synced with the rest of the network.  Now every collectible you mine and submit would be linked to your account.  The only way I can find around this linking to an identity (even if it is a pseudononymous identity) is for no account to be needed and no IP address logged (or allow probable VPN IP's) and listing would be free.  As long as any payment is used, even if cryptocurrency, then that is a vector to link collectibles to an identity.  Even if you used a mined collectible to pay for hosting another mined collectible (which likely will happen in CollectBit since there is nothing stopping nodes from doing it), then those two collectibles would be linked to the same owner.  So our network would need to tend towards free listing to keep everything perfectly private.  This free hosting is not as much to ask as it is for Bitcoin, since the ones recording transactions in Bitcoin are miners using mass amounts of electricity.  In CollectBit it is normal full nodes that host and transfer collectibles, not miners, and therefore they use minimal electricity and computer resources.%0a\ No newline at end of file%0a---%0a> !!!Tokens%0a\ No newline at end of file%0a
host:1622749721=68.231.69.235
author:1622478259=
diff:1622478259:1622477978:=23c23%0a%3c To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected (it is also rejected if it is longer but doesn't match the nodes previous signatures for the token).  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange of goods.%0a---%0a> To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected.  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange of goods.%0a
host:1622478259=68.231.69.235
author:1622477978=
diff:1622477978:1622477947:=64c64%0a%3c Only Virgin (untransferred) Orca tokens can vote, and they can only vote for 1 year after token creation.  This is to ''help'' prevent people from buying and hoarding voting tokens.  The goal is everyone mines one orca token a year to participate in the convention.%0a---%0a> Only Virgin Orca tokens can vote, and they can only vote for 1 year after token creation.  This is to ''help'' prevent people from buying and hoarding voting tokens.  The goal is everyone mines one orca token a year to participate in the convention.%0a
host:1622477978=68.231.69.235
author:1622477947=
diff:1622477947:1622477679:=64c64%0a%3c Only Virgin Orca tokens can vote, and they can only vote for 1 year after token creation.  This is to ''help'' prevent people from buying and hoarding voting tokens.  The goal is everyone mines one orca token a year to participate in the convention.%0a---%0a> %0a
host:1622477947=68.231.69.235
author:1622477679=
diff:1622477679:1622477642:=56c56%0a%3c CollectBit nodes are the leadership of the network.  There is no node hierarchy, anyone can host a node and sync up with the network, and they are encouraged to do so.  There are certain things that nodes can do to improve their credibility such as staking collectibles that can be blacklisted if the node is dishonest, getting vouches from other trusted nodes, being well connected with other nodes, staying clear of disputes, and offering good customer service.  Ultimately every node is equal the only question is what nodes the customers (users of the network) trust.  Oftentimes when verifying their transaction went through they will check the top trusted nodes and assume the rest will fall in line.  Also they might submit the transaction to only a handful of the most trusted nodes.  Nodes will also have the ability to make the rules and set the digit length of the tokens to maintain their respective Time Standard (TTS).  Every year should be a convention where the TTS-30d (Orca) holders can vote on proposals.  Nodes will have a veto power however as a sort of "Supreme Court" where they maintain the principles of CollectBit as laid out in the whitepaper (which is editable by the community).  In CollectBit miners have little power, thier only power is which nodes to submit their tokens to.  This can be a little power if they only submit tokens to their chosen network fork and therefore provide liquidity to that network.%0a---%0a> CollectBit nodes are the leadership of the network.  There is no node hierarchy, anyone can host a node and sync up with the network, and they are encouraged to do so.  There are certain things that nodes can do to improve their credibility such as staking collectibles that can be blacklisted if the node is dishonest, getting vouches from other trusted nodes, being well connected with other nodes, staying clear of disputes, and offering good customer service.  Ultimately every node is equal the only question is what nodes the customers (users of the network) trust.  Oftentimes when verifying their transaction went through they will check the top trusted nodes and assume the rest will fall in line.  Also they might submit the transaction to only a handful of the most trusted nodes.  Nodes will also have the ability to make the rules and set the digit length of the tokens to maintain their respective Time Standard (TTS).  Every year should be a convention where the TTS-30d (Orca) holders can vote on proposals.  Nodes will have a veto power however as a sort of "Supreme Court" where they maintain the principles of CollectBit as laid out in the whitepaper.  In CollectBit miners have little power, thier only power is which nodes to submit their tokens to.  This can be a little power if they only submit tokens to their chosen network fork and therefore provide liquidity to that network.%0a
host:1622477679=68.231.69.235
author:1622477642=
diff:1622477642:1622477624:=16c16%0a%3c CollectBit is a new type of Crypto project; cryptocollectible [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|#]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain a chain of history from when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key ie: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a---%0a> CollectBit is a new type of Crypto project; cryptocollectible [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|#]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain a chain of history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key ie: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a
host:1622477642=68.231.69.235
author:1622477624=
diff:1622477624:1622477361:=16c16%0a%3c CollectBit is a new type of Crypto project; cryptocollectible [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|#]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain a chain of history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key ie: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a---%0a> CollectBit is a new type of Crypto project; cryptocollectible [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|#]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key ie: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a
host:1622477624=68.231.69.235
author:1622477361=
diff:1622477361:1622477344:=13c13%0a%3c See [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network Whitepaper]] for a more in-depth design document which CollectBit is based on.%0a---%0a> See [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network Whitepaper]] for a more in-depth design document that CollectBit is based on.%0a
host:1622477361=68.231.69.235
author:1622477344=
diff:1622477344:1622477328:=13c13%0a%3c See [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network Whitepaper]] for a more in-depth design document that CollectBit is based on.%0a---%0a> See [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network Whitepaper]] for a more in depth design document that CollectBit is based on.%0a
host:1622477344=68.231.69.235
author:1622477328=
diff:1622477328:1622477305:=13c13%0a%3c See [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network Whitepaper]] for a more in depth design document that CollectBit is based on.%0a---%0a> See [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network Whitepaper]] for a more in depth design document.%0a
host:1622477328=68.231.69.235
author:1622477305=
diff:1622477305:1622477282:=0a1,2%0a> See [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network Whitepaper]] for a more in depth design document.%0a> %0a12,13d13%0a%3c %0a%3c See [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network Whitepaper]] for a more in depth design document.%0a
host:1622477305=68.231.69.235
author:1622477282=
diff:1622477282:1622477219:=1,2d0%0a%3c See [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network Whitepaper]] for a more in depth design document.%0a%3c %0a
host:1622477282=68.231.69.235
author:1622477219=
diff:1622477219:1622477137:=54c54%0a%3c CollectBit nodes are the leadership of the network.  There is no node hierarchy, anyone can host a node and sync up with the network, and they are encouraged to do so.  There are certain things that nodes can do to improve their credibility such as staking collectibles that can be blacklisted if the node is dishonest, getting vouches from other trusted nodes, being well connected with other nodes, staying clear of disputes, and offering good customer service.  Ultimately every node is equal the only question is what nodes the customers (users of the network) trust.  Oftentimes when verifying their transaction went through they will check the top trusted nodes and assume the rest will fall in line.  Also they might submit the transaction to only a handful of the most trusted nodes.  Nodes will also have the ability to make the rules and set the digit length of the tokens to maintain their respective Time Standard (TTS).  Every year should be a convention where the TTS-30d (Orca) holders can vote on proposals.  Nodes will have a veto power however as a sort of "Supreme Court" where they maintain the principles of CollectBit as laid out in the whitepaper.  In CollectBit miners have little power, thier only power is which nodes to submit their tokens to.  This can be a little power if they only submit tokens to their chosen network fork and therefore provide liquidity to that network.%0a---%0a> CollectBit nodes are the leadership of the network.  There is no node hierarchy, anyone can host a node and sync up with the network, and they are encouraged to do so.  There are certain things that nodes can do to improve their credibility such as staking collectibles that can be blacklisted if the node is dishonest, getting vouches from other trusted nodes, being well connected with other nodes, staying clear of disputes, and offering good customer service.  Ultimately every node is equal the only question is what nodes the customers (users of the network) trust.  Oftentimes when verifying their transaction went through they will check the top trusted nodes and assume the rest will fall in line.  Also they might submit the transaction to only a handful of the most trusted nodes.  Nodes will also have the ability to make the rules and set the digit length of the tokens to maintain their respective Time Standard (TTS).  Every year should be a convention where the TTS-30d (Orca) holders can vote on proposals.  Nodes will have a veto power however as a sort of "Supreme Court" where they maintain the principles of CollectBit as laid out in the whitepaper.%0a
host:1622477219=68.231.69.235
author:1622477137=
diff:1622477137:1622476893:=54,56c54%0a%3c CollectBit nodes are the leadership of the network.  There is no node hierarchy, anyone can host a node and sync up with the network, and they are encouraged to do so.  There are certain things that nodes can do to improve their credibility such as staking collectibles that can be blacklisted if the node is dishonest, getting vouches from other trusted nodes, being well connected with other nodes, staying clear of disputes, and offering good customer service.  Ultimately every node is equal the only question is what nodes the customers (users of the network) trust.  Oftentimes when verifying their transaction went through they will check the top trusted nodes and assume the rest will fall in line.  Also they might submit the transaction to only a handful of the most trusted nodes.  Nodes will also have the ability to make the rules and set the digit length of the tokens to maintain their respective Time Standard (TTS).  Every year should be a convention where the TTS-30d (Orca) holders can vote on proposals.  Nodes will have a veto power however as a sort of "Supreme Court" where they maintain the principles of CollectBit as laid out in the whitepaper.%0a%3c %0a%3c In Bitcoin nodes are not worth much.  The decisionmakers in Bitcoin are the miners; Satoshi's 1 CPU= 1 Vote.  This means the only factor that can determine trust in bitcoin nodes is how much hashpower they exert.  but hashpower is not a good measure of trustworthiness or customer service.  Usually the miners fall in line with the developers, with node runners nothing more as "seeders" and "relays" for the blockchain for others to download and miners to use.%0a---%0a> CollectBit nodes are the leadership of the network.  There is no node hierarchy, anyone can host a node and sync up with the network, and they are encouraged to do so.  There are certain things that nodes can do to improve their credibility such as staking collectibles that can be blacklisted if the node is dishonest, getting vouches from other trusted nodes, being well connected with other nodes, staying clear of disputes, and offering good customer service.  Ultimately every node is equal the only question is what nodes the customers (users of the network) trust.  Oftentimes when verifying their transaction went through they will check the top trusted nodes and assume the rest will fall in line.  Also they might submit the transaction to only a handful of the most trusted nodes.  Nodes will also have the ability to make the rules and set the digit length of the tokens to maintain thier respective Time Standard (TTS).%0a
host:1622477137=68.231.69.235
author:1622476893=
diff:1622476893:1622476659:=54c54%0a%3c CollectBit nodes are the leadership of the network.  There is no node hierarchy, anyone can host a node and sync up with the network, and they are encouraged to do so.  There are certain things that nodes can do to improve their credibility such as staking collectibles that can be blacklisted if the node is dishonest, getting vouches from other trusted nodes, being well connected with other nodes, staying clear of disputes, and offering good customer service.  Ultimately every node is equal the only question is what nodes the customers (users of the network) trust.  Oftentimes when verifying their transaction went through they will check the top trusted nodes and assume the rest will fall in line.  Also they might submit the transaction to only a handful of the most trusted nodes.  Nodes will also have the ability to make the rules and set the digit length of the tokens to maintain thier respective Time Standard (TTS).%0a---%0a> CollectBit nodes are the leadership of the network.  There is no node hierarchy, anyone can host a node and sync up with the network, and they are encouraged to do so.  There are certain things that nodes can do to improve their credibility such as stak,ing collectibles that can be blacklisted if the node is dishonest, %0a
host:1622476893=68.231.69.235
author:1622476659=
diff:1622476659:1622476643:=62c62%0a%3c You cannot send a collectible to the wrong address.%0a---%0a> %0a
host:1622476659=68.231.69.235
author:1622476643=
diff:1622476643:1622473731:=54c54%0a%3c CollectBit nodes are the leadership of the network.  There is no node hierarchy, anyone can host a node and sync up with the network, and they are encouraged to do so.  There are certain things that nodes can do to improve their credibility such as stak,ing collectibles that can be blacklisted if the node is dishonest, %0a---%0a> %0a
host:1622476643=68.231.69.235
author:1622473731=
diff:1622473731:1622473597:=52c52%0a%3c In Bitcoin the ledger is also a distributed database, but it has a special format and is not a simple SQL file.  It is long and complex and hard to sync.  Bitcoin's may be smaller than collectbit to store the same value though, since many coins are in every address; but it still will be much more complex.%0a---%0a> In Bitcoin%0a
host:1622473731=68.231.69.235
author:1622473597=
diff:1622473597:1622473422:=50c50%0a%3c CollectBit runs on a simple database.  So each node would be hosting a SQL or similar database and would sync with (preferably) a handful of other nodes.  They sync by looking for collectibles that they do not yet have listed, and list them.  If they already have a collectible and someone has the same one, then they compare the key change chain (kcc).  If the key change chain for a collectible that the other node has are the same as what they have, yet there are more key changes, they will update those new key changes (which each required a valid signature to do). If the key changes of the other node do not all match with what they have, then they will reject it.  Every collectible is just a single line in the database.%0a---%0a> CollectBit runs on a simple database.  So each node would be hosting a SQL or similar database and would sync with (preferably) a handful of other nodes.  They sync by looking for collectibles that they do not yet have listed, and list them.  If they already have a collectible and someone has the same one, then they compare the key change chain (kcc).  If the key changes that the other node has are the same as what they have, yet there are more key changes, they will update those new key changes (which each required a valid signature to do). If the key changes of the other node do not all match with what they have, then they will reject it.  Every collectible is a line in the database.%0a
host:1622473597=68.231.69.235
author:1622473422=
diff:1622473422:1622473237:=42c42%0a%3c CollectBit transactions are instant, as fast as the network allows.  There is no waiting for blocks to be formed, and mined.  There is no bandwidth limit, as fast as transactions can be broadcast, verified, and listed, they are confirmed.  Another step is for the person receiving the transaction to verify that the nodes have reached consensus on accepting their transaction (A "transaction" is a simple key change for the collectible).  So transactions will confirm just about as fast as a centralized database, a second or two.%0a---%0a> CollectBit transactions are instant, as fast as the network allows.  There is no waiting for blocks to be formed, and mined.  There is no bandwidth limit, as fast as transactions can be broadcast, verified, and listed, they are confirmed.  Another step is for the person receiving the transaction to verify that the nodes have reached consensus.  So transactions will confirm just about as fast as a centralized database, a second or two.%0a
host:1622473422=68.231.69.235
author:1622473237=
diff:1622473237:1622471956:=50,52c50%0a%3c CollectBit runs on a simple database.  So each node would be hosting a SQL or similar database and would sync with (preferably) a handful of other nodes.  They sync by looking for collectibles that they do not yet have listed, and list them.  If they already have a collectible and someone has the same one, then they compare the key change chain (kcc).  If the key changes that the other node has are the same as what they have, yet there are more key changes, they will update those new key changes (which each required a valid signature to do). If the key changes of the other node do not all match with what they have, then they will reject it.  Every collectible is a line in the database.%0a%3c %0a%3c In Bitcoin%0a---%0a> %0a
host:1622473237=68.231.69.235
author:1622471956=
diff:1622471956:1622471618:=46,48c46%0a%3c CollectBit is private by nature.  Each collectible has it's own public and private key and therefore cannot be linked in any way with other collectibles.  The only way linking can happen is if you tie the collectible with an identity.  For example if you have an account with a node and pay them $1 a month to list all your mined collectibles, then you would have to log in to post your collectibles.  Now that node knows which collectibles are linked with your identity.  To avoid this you can either host your own node that syncs up with the rest of the network, or you can find a node that doesn't charge any fee for listing and therefore you would not need to link the collectible to your identity in order to get it listed.%0a%3c %0a%3c In Bitcoin, all a person's funds are grouped into one (or more) public and private key.  Public and private keys in the same wallet might also be linked together by analysis.  So every coin that comes into that address (or wallet) or has once been in that address are linked to the same identity.  This makes analysis possible, and as far as anyone knows, any coins that have gone through an address has the same current owner and can be tracked.%0a---%0a> %0a
host:1622471956=68.231.69.235
author:1622471618=
diff:1622471618:1622471587:=
host:1622471618=68.231.69.235
author:1622471587=
diff:1622471587:1622471326:=42,44d41%0a%3c CollectBit transactions are instant, as fast as the network allows.  There is no waiting for blocks to be formed, and mined.  There is no bandwidth limit, as fast as transactions can be broadcast, verified, and listed, they are confirmed.  Another step is for the person receiving the transaction to verify that the nodes have reached consensus.  So transactions will confirm just about as fast as a centralized database, a second or two.%0a%3c %0a%3c In Bitcoin, transactions are broadcast, verified, and listed, but then have to go through the 10 minute step of mining them into a block.  If the transaction does not fit in the block, then it will have to wait to be hopefully listed in a future block.  This is a very slow and tedious process that has both limited speed and bandwith.%0a
host:1622471587=68.231.69.235
author:1622471326=
diff:1622471326:1622471144:=38,56c38%0a%3c See an in depth comparison [[https://www.naturehacker.org/2021/01/bitcoin-vs-digital-collectible-currency.html|#]]%0a%3c %0a%3c !!!Speed of Transactions%0a%3c %0a%3c !!!Privacy%0a%3c %0a%3c !!!Ledger%0a%3c %0a%3c !!!Nodes%0a%3c %0a%3c !!!Consensus%0a%3c %0a%3c !!!Mining%0a%3c %0a%3c !!!Leadership%0a%3c %0a%3c !!!Security%0a%3c %0a%3c !!!Tokens%0a\ No newline at end of file%0a---%0a> See an in depth comparison [[https://www.naturehacker.org/2021/01/bitcoin-vs-digital-collectible-currency.html|#]]%0a\ No newline at end of file%0a
host:1622471326=68.231.69.235
author:1622471144=
diff:1622471144:1622471121:=14c14%0a%3c CollectBit is a new type of Crypto project; cryptocollectible [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|#]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key ie: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a---%0a> CollectBit is a new type of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key ie: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a
host:1622471144=68.231.69.235
author:1622471121=
diff:1622471121:1622471042:=38c38%0a%3c See an in depth comparison [[https://www.naturehacker.org/2021/01/bitcoin-vs-digital-collectible-currency.html|#]]%0a\ No newline at end of file%0a---%0a> %0a
host:1622471121=68.231.69.235
author:1622471042=
diff:1622471042:1621995906:=36,37d35%0a%3c %0a%3c !!Comparison to Cryptocurrency%0a
host:1622471042=68.231.69.235
author:1621995906=
diff:1621995906:1621995604:=14c14%0a%3c CollectBit is a new type of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key ie: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a---%0a> CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key ie: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a
host:1621995906=68.231.69.235
author:1621995604=
diff:1621995604:1621995583:=35c35%0a%3c # Tools are given to nodes for them to build a reputation to become more trusted and thus more profitable. Staking, Vouches, Reputation, Popularity, and Disputes are all factors.  If you can reliably get the network to converge to your ledger, people will trust your ledger more.%0a---%0a> # Tools are given to nodes for them to build a reputation to become more trusted and thus more profitable. Staking, Vouches, Reputation, Popularity, and Disputes are all factors.  If you can reliably get the network to converge on your ledger, people will trust your ledger more.%0a
host:1621995604=68.231.69.235
author:1621995583=
diff:1621995583:1621995538:=35c35%0a%3c # Tools are given to nodes for them to build a reputation to become more trusted and thus more profitable. Staking, Vouches, Reputation, Popularity, and Disputes are all factors.  If you can reliably get the network to converge on your ledger, people will trust your ledger more.%0a---%0a> # Tools are given to nodes for them to build a reputation to become more trusted and thus more profitable. Staking, Vouches, Reputation, Popularity, and Disputes are all factors.%0a
host:1621995583=68.231.69.235
author:1621995538=
diff:1621995538:1621995468:=35c35%0a%3c # Tools are given to nodes for them to build a reputation to become more trusted and thus more profitable. Staking, Vouches, Reputation, Popularity, and Disputes are all factors.%0a---%0a> # Tools are give to nodes for them to build a reputation to become more trusted and thus more profitable. Staking, Vouches, Reputation, Popularity are all factors.%0a
host:1621995538=68.231.69.235
author:1621995468=
diff:1621995468:1621995280:=35c35%0a%3c # Tools are give to nodes for them to build a reputation to become more trusted and thus more profitable. Staking, Vouches, Reputation, Popularity are all factors.%0a---%0a> # Nodes can build a reputation to become more trusted and thus more profitable.%0a
host:1621995468=68.231.69.235
author:1621995280=
diff:1621995280:1621995266:=31c31%0a%3c # Fully Permission-less and Fungible.  Mining and trading can be offline for impeccable censorship-resistance. Tokens are stand-alone and are not associated with each other - perfectly untraceable.%0a---%0a> # Fully Permission-less and Fungible.  Mining and trading can be offline for impeccable censorship-resistance. Tokens are stand-alone and are not associated with eachother - perfectly untraceable.%0a
host:1621995280=68.231.69.235
author:1621995266=
diff:1621995266:1621995152:=31c31%0a%3c # Fully Permission-less and Fungible.  Mining and trading can be offline for impeccable censorship-resistance. Tokens are stand-alone and are not associated with eachother - perfectly untraceable.%0a---%0a> # Fully Permissionless.  Mining and trading can be offline for impeccable censorship-resistance.%0a
host:1621995266=68.231.69.235
author:1621995152=
diff:1621995152:1621995120:=29c29%0a%3c # Mining utilizes primarily the CPU and has the strongest ASIC and GPU resistance possible.  GPU can speed up the CPU by never more than 20%25, CPU will always be required for the majority of the work.  Mining is offline.%0a---%0a> # Mining utilizes primarily the CPU and has the strongest ASIC and GPU resistance possible.  GPU can speed up the CPU by less than 20%25, CPU will always be required for the majority of the work.  Mining is offline.%0a
host:1621995152=68.231.69.235
author:1621995120=
diff:1621995120:1621995031:=33,35c33%0a%3c # Consensus mechanism is natural convergence.  Majority (51%25) attacks are not formulaic to achieve and the network can adapt to resist any attempt.%0a%3c %0a%3c # Nodes can build a reputation to become more trusted and thus more profitable.%0a---%0a> # Consensus mechanism is natural convergence.  Majority (51%25) attacks are not formulaic to achieve.%0a
host:1621995120=68.231.69.235
author:1621995031=
diff:1621995031:1621994901:=31,34c31%0a%3c # Fully Permissionless.  Mining and trading can be offline for impeccable censorship-resistance.%0a%3c %0a%3c # Consensus mechanism is natural convergence.  Majority (51%25) attacks are not formulaic to achieve.%0a%3c %0a---%0a> # Fully Permissionless.  Mining and trading can be offline for impeccable censorship-resistance.%0a\ No newline at end of file%0a
host:1621995031=68.231.69.235
author:1621994901=
diff:1621994901:1621994551:=29c29%0a%3c # Mining utilizes primarily the CPU and has the strongest ASIC and GPU resistance possible.  GPU can speed up the CPU by less than 20%25, CPU will always be required for the majority of the work.  Mining is offline.%0a---%0a> # Mining utilizes primarily CPU has the strongest ASIC and GPU resistance possible.  GPU can speed up the CPU by less than 20%25.  Mining is offline.%0a
host:1621994901=68.231.69.235
author:1621994551=
diff:1621994551:1621994532:=25c25%0a%3c # Infinite potential transactions per second - no limit.  Can potentially be offline.%0a---%0a> # Infinite potential transactions per second - no limit.  Can be offline.%0a
host:1621994551=68.231.69.235
author:1621994532=
diff:1621994532:1621994425:=21c21%0a%3c To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected.  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange of goods.%0a---%0a> To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected.  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange.%0a
host:1621994532=68.231.69.235
author:1621994425=
diff:1621994425:1621994398:=14c14%0a%3c CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key ie: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a---%0a> CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a
host:1621994425=68.231.69.235
author:1621994398=
diff:1621994398:1621994334:=14c14%0a%3c CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key: password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a---%0a> CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a
host:1621994398=68.231.69.235
author:1621994334=
diff:1621994334:1621994250:=21c21%0a%3c To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key (that both giver and receiver know) to sign for a new public key to be associated with the token (that presumably only the receiver holds the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected.  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange.%0a---%0a> To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key to sign for a new public key to be associated with the token (that presumably only they hold the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected.  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange.%0a
host:1621994334=68.231.69.235
author:1621994250=
diff:1621994250:1621994092:=25,26c25,26%0a%3c # Infinite potential transactions per second - no limit.  Can be offline.%0a%3c %0a---%0a> # Infinite potential transactions per second - no limit%0a> %0a29,31c29%0a%3c # Mining utilizes primarily CPU has the strongest ASIC and GPU resistance possible.  GPU can speed up the CPU by less than 20%25.  Mining is offline.%0a%3c %0a%3c # Fully Permissionless.  Mining and trading can be offline for impeccable censorship-resistance.%0a\ No newline at end of file%0a---%0a> #%0a\ No newline at end of file%0a
host:1621994250=68.231.69.235
author:1621994092=
diff:1621994092:1621993913:=21,29c21%0a%3c To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key to sign for a new public key to be associated with the token (that presumably only they hold the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected.  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange.%0a%3c %0a%3c !!Technical Features%0a%3c %0a%3c # Infinite potential transactions per second - no limit%0a%3c %0a%3c # Emission scales perfectly with adoption like Gold - stable: non-inflationary and non-deflationary.  Constant amount of work (One CPU-WEEK) required to produce each token.%0a%3c %0a%3c # %0a\ No newline at end of file%0a---%0a> To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key to sign for a new public key to be associated with the token (that presumably only they hold the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected.  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange.%0a\ No newline at end of file%0a
host:1621994092=68.231.69.235
author:1621993913=
diff:1621993913:1621993718:=21c21%0a%3c To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key to sign for a new public key to be associated with the token (that presumably only they hold the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it matches previous signatures that the node has on file and it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected.  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange.%0a\ No newline at end of file%0a---%0a> To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key to sign for a new public key to be associated with the token (that presumably only they hold the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected.  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange.%0a\ No newline at end of file%0a
host:1621993913=68.231.69.235
author:1621993718=
diff:1621993718:1621979328:=21c21%0a%3c To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key to sign for a new public key to be associated with the token (that presumably only they hold the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected.  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange.%0a\ No newline at end of file%0a---%0a> To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key to sign for a new public key to be associated with the token (that presumably they are the only the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected.  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange.%0a\ No newline at end of file%0a
host:1621993718=68.231.69.235
author:1621979328=
diff:1621979328:1621979299:=20d19%0a%3c !!!Trade%0a
host:1621979328=68.231.69.235
author:1621979299=
diff:1621979299:1621978691:=16,20c16%0a%3c Each token is self contained, containing all the information to verify that it is valid and which public key it is associated with. Therefore this token can be held, apart from any network.  The network simply exists to host the tokens.  So you could have your token hosted on several networks if you wanted.%0a%3c %0a%3c If networks do not want to be compatible with other networks, they could require a special string be integrated into the token, ensuring that the token was created specifically for their network.%0a%3c %0a%3c To trade tokens, the giver gives the receiver their private key for that token.  Then the receiver uses the private key to sign for a new public key to be associated with the token (that presumably they are the only the private key to).  Now we basically have an updated token.  So this updated token is submitted to the network(s).  If it is a longer chain (more signatures for key changes) than the token that the network already had on file, then it updates their database accordingly.  If it is the same length or shorter, it is rejected.  So the receiver can now view the network database and verify that they accepted the key change, and can alert the giver that it went through and we can proceed with the exchange.%0a\ No newline at end of file%0a---%0a> Therefore this token can be held, apart from any network.  The network simply exists to host the tokens.  So you could have your token hosted on several networks if you wanted.%0a\ No newline at end of file%0a
host:1621979299=68.231.69.235
author:1621978691=
diff:1621978691:1621978619:=14c14%0a%3c CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.  There is nothing to analyze to attempt to determine an owner.  Only the owner knows who they are.%0a---%0a> CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a
host:1621978691=68.231.69.235
author:1621978619=
diff:1621978619:1621978488:=14c14%0a%3c CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So an immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a---%0a> CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a
host:1621978619=68.231.69.235
author:1621978488=
diff:1621978488:1621978316:=14,16c14%0a%3c CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a%3c %0a%3c Therefore this token can be held, apart from any network.  The network simply exists to host the tokens.  So you could have your token hosted on several networks if you wanted.  %0a\ No newline at end of file%0a---%0a> CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a
host:1621978488=68.231.69.235
author:1621978316=
diff:1621978316:1621978297:=14c14%0a%3c CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  If you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a---%0a> CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  IF you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a
host:1621978316=68.231.69.235
author:1621978297=
diff:1621978297:1621978262:=14c14%0a%3c CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history, that a UTXO blockchain is necessary to maintain, is simply not needed.  IF you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a---%0a> CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history that a UTXO blockchain is necessary to maintain is simply not needed.  IF you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a
host:1621978297=68.231.69.235
author:1621978262=
diff:1621978262:1621978216:=14c14%0a%3c CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history that a UTXO blockchain is necessary to maintain is simply not needed.  IF you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a---%0a> CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history is simply not needed.  IF you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a
host:1621978262=68.231.69.235
author:1621978216=
diff:1621978216:1621978173:=14c14%0a%3c CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history of when the coin was created as a coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history is simply not needed.  IF you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a---%0a> CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history from coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history is simply not needed.  IF you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a
host:1621978216=68.231.69.235
author:1621978173=
diff:1621978173:1621977977:=14c14%0a%3c CollectBit is a new sort of Crypto project; [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|cryptocollectible]] instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history from coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history is simply not needed.  IF you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a---%0a> CollectBit is a new sort of Crypto project; cryptocollectible instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history from coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history is simply not needed.  IF you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a
host:1621978173=68.231.69.235
author:1621977977=
diff:1621977977:1621977967:=14c14%0a%3c CollectBit is a new sort of Crypto project; cryptocollectible instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history from coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history is simply not needed.  IF you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a---%0a> Collectbit is a new sort of Crypto project; cryptocollectible instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history from coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history is simply not needed.  IF you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a
host:1621977977=68.231.69.235
author:1621977967=
diff:1621977967:1621977760:=14c14%0a%3c Collectbit is a new sort of Crypto project; cryptocollectible instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency you have to maintain history from coinbase reward, all the way to the current ownership in order to verify that work was done to create it.  In CollectBit, the proof follows the token, everywhere.  So this immutable history is simply not needed.  IF you own the password (private key) for the token, then you own it.  The token has no history apart from that.  In order to trade it the public key is simply changed (which corresponds to a new private key - password).  So the only history that is kept is a string of public keys, which means nothing because they are unique to the token, and cannot be used to trace or connect this token with any others.  The only person who knows they own a token is the one holding the private key.%0a\ No newline at end of file%0a---%0a> Collectbit is a new sort of Crypto project; cryptocollectible instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency%0a\ No newline at end of file%0a
host:1621977967=68.231.69.235
author:1621977760=
diff:1621977760:1621977744:=
host:1621977760=68.231.69.235
author:1621977744=
diff:1621977744:1621977546:=13,14c13%0a%3c !!Intro%0a%3c Collectbit is a new sort of Crypto project; cryptocollectible instead of cryptocurrency.  It differs because it consists entirely of collectibles that cannot be divided.  This gives us several advantages.  First each unit on the network (token) has it's own proof of creation baked into the token itself.  In a cryptocurrency %0a\ No newline at end of file%0a---%0a> CollectBit is an implementation of a [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network]].%0a\ No newline at end of file%0a
host:1621977744=68.231.69.235
author:1621977546=
diff:1621977546:1621977479:=1c1%0a%3c (:Summary:CollectBit is an implementation of a [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network]]:)%0a---%0a> (:Summary::)%0a9c9%0a%3c (:Also:[[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network]]:)%0a---%0a> (:Also:[[NatureVault.Digital Collectible Network]]:)%0a
host:1621977546=68.231.69.235
author:1621977479=
diff:1621977479:1621977422:=2c2%0a%3c (:Published:5/25/2021:)%0a---%0a> (:Published::)%0a9c9%0a%3c (:Also:[[NatureVault.Digital Collectible Network]]:)%0a---%0a> (:Also:none:)%0a
host:1621977479=68.231.69.235
author:1621977422=
diff:1621977422:1621962636:=1,12d0%0a%3c (:Summary::)%0a%3c (:Published::)%0a%3c (:Author:[[~GiverofMemory]]:)%0a%3c (:License:[[https://en.m.wikipedia.org/wiki/Res_communis|Site License]]:)%0a%3c (:Update::)%0a%3c (:Maintainer:[[~GiverofMemory]]:)%0a%3c (:Creator:[[]]:)%0a%3c (:Categories:[[!Cryptics]]:)%0a%3c (:Also:none:)%0a%3c (:Archive:[[|Archive.is]], [[|Archive.org]]:)%0a%3c (:Download:[[{$FullName}?action=print|URL]],[[https://www.web2pdfconvert.com/|PDF from URL]]:)%0a%3c %0a
host:1621977422=68.231.69.235
author:1621962636=
diff:1621962636:1621962636:=1d0%0a%3c CollectBit is an implementation of a [[https://www.naturevault.org/wiki/pmwiki.php/NatureVault/DigitalCollectibleNetwork|Digital Collectible Network]].%0a\ No newline at end of file%0a
host:1621962636=68.231.69.235
