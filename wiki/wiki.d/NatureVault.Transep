version=pmwiki-2.2.133 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36
author=
charset=UTF-8
csum=(:Also:[[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|Meta ledger]], [[monaton]]:) 
ctime=1613275679
host=5.149.253.57
name=NatureVault.Transep
rev=51
targets=Category.Cryptics
text=(:Summary:Transep: A method for infinite "on-chain" scaling for cryptocurrencies like Bitcoin or Dogecoin that is a safer alternative to Segwit:)%0a(:Published:2/13/2021:)%0a(:Author:[[~NatureHacker]]:)%0a(:License:[[https://en.m.wikipedia.org/wiki/Res_communis|Site License]]:)%0a(:Update::)%0a(:Maintainer:[[~NatureHacker]]:)%0a(:Creator:[[]]:)%0a(:Categories:[[!Cryptics]]:)%0a(:Also:[[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|Meta ledger]], [[monaton]]:)%0a(:Archive:[[https://archive.is/N3c8J|Archive.is]], [[|Archive.org]], [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Original article]], [[https://archive.is/0eEJB|original article backup]], [[https://web.archive.org/web/20210213085403/https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|orig article backup 2]]:)%0a(:Download:[[{$FullName}?action=print|URL]],[[https://www.web2pdfconvert.com/|PDF from URL]]:)%0a%0a[[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Transep]] https://www.google.com/s2/favicons?domain=naturehacker.org&.png is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate that can infinitely scale.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chain compared to other 2nd layer things we are seeing like paypal or cashapp being intermediaries for using crypto as payments or robinhood being an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has been proven totally right.%0a%0aSegwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.%0a%0aTransep on the other hand separates the entire block from the blockchain and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep the full block info because without it nothing could be verified. In fact with transep miners could pre-verify blocks before a proof of work is completed by the network. With segwit; miners may gloss over not being able to verify the signature hash, because it isn't a core issue of the block validity and they don't want to waste the time when they could be mining.  %0a%0aTransep may or may not work for deflationary coins like bitcoin and would be best suited to non-deflationary or inflationary coins like Dogecoin.  This is because miners will split the fees with masternodes.%0a%0a!!Problem with Segwit%0aThe problem with Segwit is firstly it is not very effective.  It doesn't free up too much space in the blocks since all the transactions are still recorded.  Also the sidechain is limited to signature data, so bigger sidechain blocks aren't possible.  Secondly, there is no one incentivized to maintain the signature data once a block has been "accepted" by the network.  Since the signature data could be ignored or misplaced, the signature hash cannot be verified in that case.%0a%0a!!What is Transep%0aThink of transep as the breaking up of paypal and ebay.  Both of them are needed in an online marketplace, but it is best to keep them separated for more wide and fair adoption.%0a%0aTransep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner in time to be mined on, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their masternode blocks to all the network; in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see that masternode block ahead of time, that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network. If a node is consistently holding back sharing their masternode block until they find the proof of work, the other nodes should blacklist this miner and masternode.%0a%0aA rule should be set that in order for a masternode block to be valid, the majority of nodes needed to have seen it before the previous proof of work was broadcast.  So if miners are working on finding a proof of work for block 19, masternodes need to send their proposed block 20 to the network before miners finish block 19.  Of course people could submit a bunch of bad block 20's to throw miners off but there is no real reason to do this.  Market forces would mean that you want to propose good blocks so if miners use your block you will earn the transaction fees in the block.  Miners are the voters and they need to be well informed of and check the validity of masternode blocks before voting on which one is hashed into the blockchain.  Miners would likey start with the blocks that bid the highest fee and check the validity.  Again since the blocks all need to be recieved by the majority of nodes before the last block was finished, there would be little incentive to send bad spam blocks because nodes would have time to pre-verify the blocks before it is time to start mining on top of one of them.%0a%0aEven if every sucessful masternode block is created by the mining pool that wins the challenge, still the fact that the block is separated from the blockchain will remedy the reason the blocksize limit was created in the first place.  This bieng that super large blocks are DDOSing the network.  Mined blocks are super small, just a hash, even though they represent lots of transactions.  Also the large masternode block needs to be sent well ahead of time so they can be pre-verified by the network thus preventing the large block spam that Hal Finney was afraid could DDOS the network.%0a%0aSo lets say there are 10 masternode blocks that have propagated the network.  A miner then chooses one to mine on top of.  He simply takes the hash of the masternode block hashed with the previous block hash, then cycles through nonces until the hash of the block and the previous hash and the nonce meets the requirement for proof of work.  Now he sends the total hash and his nonce widely across the network.  When another miner gets it they verify firstly that they have also seen that masternode block in the alloted time, and that the nonce when hashed with that block hashes, gives the required proof of work.  Now lets say this miner is destined to win the next block.  He takes the hash of the last block, hashes it with a new masternode block that isn't double spending what the previous blocks have already spent, and looks for the nonce.  When he finds it, he broadcasts his nonce and hash and thus the cycle repeats.%0aAttach:transep.png%0a%0a!!!Why are big masternode blocks not problematic whereas big miner blocks are?%0a%0aThe reason is because if a miner sends out a large block with proof of work concurrently, another miner has to verify the entire block and proof of work before starting to mine the next block.  If many miners are sending out large and different blocks with corresponding proof of work, every miner has to verify them before starting mining on top of it.  If blocks are very big then this can set back miners a lot of time and could basically turn into a DDOS.  If we separate the big block from the blockchain, miners would only send the block hash and their proof of work.  So other miners can determine which miner won the last challenge without verifying the entire block.  Now the loosing miner can look into their own memory and see the masternode block that the winning miner used, and the loosing miner already had that masternode block verified so he can immediately work on mining the next block.  So the issues of having big blocks broadcast at the same time as the proof of work, is solved since everyone already saw the blocks ahead of time before the proof of work was found. Or, even if they didn't verify that block ahead of time, they did have it in their memory, so the winning miner just needs to send the winning hash and nonce and the others can verify that with the block they already have in their memory. This means the proof of work can go out and be transmitted fast even though the block that was mined was large.%0a%0aIf a miner was colluding with a masternode to not release the masternode block until after the miner already completed the challenge, the network should reject such a block.  Any miner should reject a winning miner if that miner used a masternode block that the rest of the network didn't already recieve before they started mining the current block.%0a%0a!!!!Would lots of big masternode blocks congest the network?%0aIn short no, miners can basically just choose the block that has the highest bid, then verify it and use it to start mining on.  They could also pre-verify a few more of these in case another miner proposes a proof of work with one of those other blocks.%0a%0a!!!What happens with the block data and transactions?%0aMiners will need to have access to all of the accepted blocks whose hash is recorded in the blockchain.  This is so they can verify that new masternode blocks have not double spent something that another accepted block has spent.  Miners are the ultimate deciders what is valid on the blockchain.  Also masternodes themselves are incentivized to keep the full blockchain including all the transaction data so the blocks they build, miners will find valid.  If they are not valid, miners will simply not choose their blocks and then the masternode will not get rewarded the transaction fees for their proposed transactions.  People simply wanting to submit transactions to the network really don't need to have the full dual layer blockchain, they just need the list of valid block hashes by the miners since they know what their transactions that have been accepted by the network are.  So in practice both the masternodes and miners would need to keep on hand both layers of the blockchain.  They can prune this however they see fit to keep the data on hand to make good decisions about how to vote (in the case of miners) or how to build blocks (in the case of masternodes).  "Full nodes" could also be non-voting witnesses with all the data and alert the network if they find a discrepancy for the miners to investigate.%0a%0a!!Pro's and Con's%0a!!!Con's%0a# Blockchian will be less searchable because transactions will not be forced to be published immutable forever in the main blockchain.%0a%0a# Miners cannot change transactions. So if a miner sees overlap in transactions from a previous block and the block he wants to mine, he can't mine that block he wanted to.  He must find a masternode block that has no transactions in common with previous mined blocks.  This might incentivize masternodes to narrow their scope; to focus only on one region of the world, or one type of transaction, so as to not overlap other masternodes transactions.%0a!!!Pro's%0aMore people will be able to profit instead of just miners.%0aMuch shorter blocktime is needed for small miner blocks to propogate network [[https://tradeblock.com/blog/bitcoin-network-capacity-analysis-part-6-data-propagation|#]]. We could have blocktimes as low as 20 seconds which would include time for the tiny miner block to propogate in a second or two and have miners compete for proof of work.
time=1614651611
author:1614651611=
diff:1614651611:1614650195:=9c9%0a%3c (:Also:[[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|Meta ledger]], [[monaton]]:)%0a---%0a> (:Also:[[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|Meta ledger]]:)%0a
host:1614651611=5.149.253.57
author:1614650195=
diff:1614650195:1614650134:=9c9%0a%3c (:Also:[[https://telegra.ph/A-meta-ledger-to-resolve-fragmentation-of-proof-of-work-Nakamoto-consensus-08-17|Meta ledger]]:)%0a---%0a> (:Also:none:)%0a
host:1614650195=192.168.1.8
author:1614650134=
diff:1614650134:1614649181:=10c10%0a%3c (:Archive:[[https://archive.is/N3c8J|Archive.is]], [[|Archive.org]], [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Original article]], [[https://archive.is/0eEJB|original article backup]], [[https://web.archive.org/web/20210213085403/https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|orig article backup 2]]:)%0a---%0a> (:Archive:[[https://archive.is/N3c8J|Archive.is]], [[|Archive.org]], [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Original article]]:)%0a
host:1614650134=192.168.1.8
author:1614649181=
diff:1614649181:1613481994:=10c10%0a%3c (:Archive:[[https://archive.is/N3c8J|Archive.is]], [[|Archive.org]], [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Original article]]:)%0a---%0a> (:Archive:[[|Archive.is]], [[|Archive.org]], [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Original article]]:)%0a
host:1614649181=5.149.253.57
author:1613481994=
diff:1613481994:1613481882:=46c46%0a%3c Miners will need to have access to all of the accepted blocks whose hash is recorded in the blockchain.  This is so they can verify that new masternode blocks have not double spent something that another accepted block has spent.  Miners are the ultimate deciders what is valid on the blockchain.  Also masternodes themselves are incentivized to keep the full blockchain including all the transaction data so the blocks they build, miners will find valid.  If they are not valid, miners will simply not choose their blocks and then the masternode will not get rewarded the transaction fees for their proposed transactions.  People simply wanting to submit transactions to the network really don't need to have the full dual layer blockchain, they just need the list of valid block hashes by the miners since they know what their transactions that have been accepted by the network are.  So in practice both the masternodes and miners would need to keep on hand both layers of the blockchain.  They can prune this however they see fit to keep the data on hand to make good decisions about how to vote (in the case of miners) or how to build blocks (in the case of masternodes).  "Full nodes" could also be non-voting witnesses with all the data and alert the network if they find a discrepancy for the miners to investigate.%0a---%0a> Miners will need to have access to all of the accepted blocks whose hash is recorded in the blockchain.  This is so they can verify that new masternode blocks have not double spent something that another accepted block has spent.  Miners are the ultimate deciders what is valid on the blockchain.  Also masternodes themselves are incentivized to keep the full blockchain including all the transaction data so the blocks they build miners will find valid.  If they are not valid, miners will simply not choose their blocks and then the masternode will not get rewarded the transaction fees for their proposed transactions.  People simply wanting to submit transactions to the network really don't need to have the full dual layer blockchain, they just need the list of valid block hashes by the miners since they know what their transactions that have been accepted by the network are.  So in practice both the masternodes and miners would need to keep on hand both layers of the blockchain.  They can prune this however they see fit to keep the data on hand to make good decisions about how to vote (in the case of miners) or how to build blocks (in the case of masternodes).  "Full nodes" could also be non-voting witnesses with all the data and alert the network if they find a discrepancy for the miners to investigate.%0a
host:1613481994=68.2.112.187
author:1613481882=
diff:1613481882:1613481819:=43c43%0a%3c In short no, miners can basically just choose the block that has the highest bid, then verify it and use it to start mining on.  They could also pre-verify a few more of these in case another miner proposes a proof of work with one of those other blocks.%0a---%0a> In short no, miners can basically just choose the block that has the highest bid, then verify it and use it to start mining on.  They could also preverify a few more of these in case another miner proposes a proof of work with one of those other blocks.%0a
host:1613481882=192.168.1.4
author:1613481819=
diff:1613481819:1613459965:=40c40%0a%3c If a miner was colluding with a masternode to not release the masternode block until after the miner already completed the challenge, the network should reject such a block.  Any miner should reject a winning miner if that miner used a masternode block that the rest of the network didn't already recieve before they started mining the current block.%0a---%0a> If a miner was colluding with a masternode to not release the masternode block until after the miner already completed the challenge, the network should reject such a block.  Any miner should reject a winning miner if that miner used a masternode block that the rest of the network didn't already recieve with, say, half of the blocktime left.%0a
host:1613481819=192.168.1.4
author:1613459965=
diff:1613459965:1613459757:=38c38%0a%3c The reason is because if a miner sends out a large block with proof of work concurrently, another miner has to verify the entire block and proof of work before starting to mine the next block.  If many miners are sending out large and different blocks with corresponding proof of work, every miner has to verify them before starting mining on top of it.  If blocks are very big then this can set back miners a lot of time and could basically turn into a DDOS.  If we separate the big block from the blockchain, miners would only send the block hash and their proof of work.  So other miners can determine which miner won the last challenge without verifying the entire block.  Now the loosing miner can look into their own memory and see the masternode block that the winning miner used, and the loosing miner already had that masternode block verified so he can immediately work on mining the next block.  So the issues of having big blocks broadcast at the same time as the proof of work, is solved since everyone already saw the blocks ahead of time before the proof of work was found. Or, even if they didn't verify that block ahead of time, they did have it in their memory, so the winning miner just needs to send the winning hash and nonce and the others can verify that with the block they already have in their memory. This means the proof of work can go out and be transmitted fast even though the block that was mined was large.%0a---%0a> The reason is because if a miner sends out a large block with proof of work concurrently, another miner has to verify the entire block and proof of work before starting to mine the next block.  If many miners are sending out large and different blocks with corresponding proof of work, every miner has to verify them before starting mining on top of it.  If blocks are very big then this can set back miners a lot of time and could basically turn into a DDOS.  If we separate the big block from the blockchain, miners would only send the block hash and their proof of work.  So other miners can determine which miner won the last challenge without verifying the entire block.  Now the loosing miner can look into their own memory and see the masternode block that the winning miner used, and the loosing miner already had that masternode block verified so he can immediately work on mining the next block.  So the issues of having big blocks broadcast at the same time as the proof of work, is solved since everyone already saw the blocks ahead of time before the proof of work was found. Or, even if they didn't verify that block ahead of time, they did have it in their memory, so the winning miner just needs to send the winning hash and nonce and the others can verify that with the block they already have in their memory.%0a
host:1613459965=68.2.112.187
author:1613459757=
diff:1613459757:1613459678:=38c38%0a%3c The reason is because if a miner sends out a large block with proof of work concurrently, another miner has to verify the entire block and proof of work before starting to mine the next block.  If many miners are sending out large and different blocks with corresponding proof of work, every miner has to verify them before starting mining on top of it.  If blocks are very big then this can set back miners a lot of time and could basically turn into a DDOS.  If we separate the big block from the blockchain, miners would only send the block hash and their proof of work.  So other miners can determine which miner won the last challenge without verifying the entire block.  Now the loosing miner can look into their own memory and see the masternode block that the winning miner used, and the loosing miner already had that masternode block verified so he can immediately work on mining the next block.  So the issues of having big blocks broadcast at the same time as the proof of work, is solved since everyone already saw the blocks ahead of time before the proof of work was found. Or, even if they didn't verify that block ahead of time, they did have it in their memory, so the winning miner just needs to send the winning hash and nonce and the others can verify that with the block they already have in their memory.%0a---%0a> The reason is because if a miner sends out a large block with proof of work concurrently, another miner has to verify the entire block and proof of work before starting to mine the next block.  If many miners are sending out large and different blocks with corresponding proof of work, every miner has to verify each one.  If blocks are very big then this can set back miners a lot of time and could basically turn into a DDOS.  If we separate the big block from the blockchain, miners would only send the block hash and their proof of work.  So other miners can determine which miner won the last challenge without verifying the entire block.  Now the loosing miner can look into their own memory and see the masternode block that the winning miner used, and the loosing miner already had that masternode block verified so he can immediately work on mining the next block.  So the issues of having big blocks broadcast at the same time as the proof of work, is solved since everyone already saw the blocks ahead of time before the proof of work was found. Or, even if they didn't verify that block ahead of time, they did have it in their memory, so the winning miner just needs to send the winning hash and nonce and the others can verify that with the block they already have in their memory.%0a
host:1613459757=68.2.112.187
author:1613459678=
diff:1613459678:1613459571:=38c38%0a%3c The reason is because if a miner sends out a large block with proof of work concurrently, another miner has to verify the entire block and proof of work before starting to mine the next block.  If many miners are sending out large and different blocks with corresponding proof of work, every miner has to verify each one.  If blocks are very big then this can set back miners a lot of time and could basically turn into a DDOS.  If we separate the big block from the blockchain, miners would only send the block hash and their proof of work.  So other miners can determine which miner won the last challenge without verifying the entire block.  Now the loosing miner can look into their own memory and see the masternode block that the winning miner used, and the loosing miner already had that masternode block verified so he can immediately work on mining the next block.  So the issues of having big blocks broadcast at the same time as the proof of work, is solved since everyone already saw the blocks ahead of time before the proof of work was found. Or, even if they didn't verify that block ahead of time, they did have it in their memory, so the winning miner just needs to send the winning hash and nonce and the others can verify that with the block they already have in their memory.%0a---%0a> The reason is because if a miner sends out a large block with proof of work concurrently, another miner has to verify the entire block and proof of work before starting to mine the next block.  If many miners are sending out large and different blocks with corresponding proof of work, every miner has to verify each one.  If blocks are very big then this can set back miners a lot of time and could basically turn into a DDOS.  If we separate the big block from the blockchain, miners would only send the block hash and their proof of work.  So other miners can determine which miner won the last challenge without verifying the entire block.  Now the loosing miner can look into their own memory and see the masternode block that the winning miner used, and the loosing miner already had that masternode block verified so he can immediately work on mining the next block.  So the issues of having big blocks broadcast at the same time as the proof of work, is solved since everyone already saw the blocks ahead of time before the proof of work was found.%0a
host:1613459678=68.2.112.187
author:1613459571=
diff:1613459571:1613459385:=38c38%0a%3c The reason is because if a miner sends out a large block with proof of work concurrently, another miner has to verify the entire block and proof of work before starting to mine the next block.  If many miners are sending out large and different blocks with corresponding proof of work, every miner has to verify each one.  If blocks are very big then this can set back miners a lot of time and could basically turn into a DDOS.  If we separate the big block from the blockchain, miners would only send the block hash and their proof of work.  So other miners can determine which miner won the last challenge without verifying the entire block.  Now the loosing miner can look into their own memory and see the masternode block that the winning miner used, and the loosing miner already had that masternode block verified so he can immediately work on mining the next block.  So the issues of having big blocks broadcast at the same time as the proof of work, is solved since everyone already saw the blocks ahead of time before the proof of work was found.%0a---%0a> The reason is because if a miner sends out a large block with proof of work concurrently, another miner has to verify the entire block and proof of work before starting to mine the next block.  If many miners are sending out large and different blocks with corresponding proof of work, every miner has to verify each one.  If blocks are very big then this can set back miners a lot of time and could basically turn into a DDOS.  If we separate the big block from the blockchain, miners would only send the block hash and their proof of work.  So other miners can determine which miner won the last challenge without verifying the entire block.  Now the loosing miner can look into their own memory and see the masternode block that the winning miner used, and the loosing miner already had that masternode block verified so he can immediately work on mining the next block.  So the issues of having big blocks broadcast at the same time as the proof of work, is solved since everyone already saw the blocks ahead of time.%0a
host:1613459571=68.2.112.187
author:1613459385=
diff:1613459385:1613459078:=33c33%0a%3c So lets say there are 10 masternode blocks that have propagated the network.  A miner then chooses one to mine on top of.  He simply takes the hash of the masternode block hashed with the previous block hash, then cycles through nonces until the hash of the block and the previous hash and the nonce meets the requirement for proof of work.  Now he sends the total hash and his nonce widely across the network.  When another miner gets it they verify firstly that they have also seen that masternode block in the alloted time, and that the nonce when hashed with that block hashes, gives the required proof of work.  Now lets say this miner is destined to win the next block.  He takes the hash of the last block, hashes it with a new masternode block that isn't double spending what the previous blocks have already spent, and looks for the nonce.  When he finds it, he broadcasts his nonce and hash and thus the cycle repeats.%0a---%0a> So lets say there are 10 masternode blocks that have propagated the network.  A miner then chooses one to mine on top of.  He simply takes the hash of the masternode block, then cycles through nonces until the hash of the block and the nonce meets the requirement for proof of work.  Now he sends the block hash and his nonce widely across the network.  When another miner gets it they verify 1. That they have also seen that masternode block, and that the nonce when hashed with that masternode block, gives the required proof of work.  Now this miner is destined to win the next block.  He takes the hash of the last block, hashes it with a new masternode block that isn't double spending what the previous blocks have already spent, and looks for the nonce.  When he finds it, he broadcasts his nonce and hash and thus the cycle repeats.%0a
host:1613459385=68.2.112.187
author:1613459078=
diff:1613459078:1613459020:=31c31%0a%3c Even if every sucessful masternode block is created by the mining pool that wins the challenge, still the fact that the block is separated from the blockchain will remedy the reason the blocksize limit was created in the first place.  This bieng that super large blocks are DDOSing the network.  Mined blocks are super small, just a hash, even though they represent lots of transactions.  Also the large masternode block needs to be sent well ahead of time so they can be pre-verified by the network thus preventing the large block spam that Hal Finney was afraid could DDOS the network.%0a---%0a> Even if every sucessful masternode block is created by the mining pool that wins the challenge, still the fact that the block is separated from the blockchain will remedy the reason the blocksize limit was created in the first place.  This bieng that super large blocks are DDOSing the network.  Mined blocks are super small, just a hash, even though they represent lots of transactions.  Also the block needs to be sent well ahead of time so they can be pre-verified by the network thus preventing the large block spam that Hal Finney was afraid could DDOS the network.%0a
host:1613459078=192.168.1.4
author:1613459020=
diff:1613459020:1613458574:=29,31c29,31%0a%3c A rule should be set that in order for a masternode block to be valid, the majority of nodes needed to have seen it before the previous proof of work was broadcast.  So if miners are working on finding a proof of work for block 19, masternodes need to send their proposed block 20 to the network before miners finish block 19.  Of course people could submit a bunch of bad block 20's to throw miners off but there is no real reason to do this.  Market forces would mean that you want to propose good blocks so if miners use your block you will earn the transaction fees in the block.  Miners are the voters and they need to be well informed of and check the validity of masternode blocks before voting on which one is hashed into the blockchain.  Miners would likey start with the blocks that bid the highest fee and check the validity.  Again since the blocks all need to be recieved by the majority of nodes before the last block was finished, there would be little incentive to send bad spam blocks because nodes would have time to pre-verify the blocks before it is time to start mining on top of one of them.%0a%3c %0a%3c Even if every sucessful masternode block is created by the mining pool that wins the challenge, still the fact that the block is separated from the blockchain will remedy the reason the blocksize limit was created in the first place.  This bieng that super large blocks are DDOSing the network.  Mined blocks are super small, just a hash, even though they represent lots of transactions.  Also the block needs to be sent well ahead of time so they can be pre-verified by the network thus preventing the large block spam that Hal Finney was afraid could DDOS the network.%0a---%0a> A rule should be set that in order for a masternode block to be valid, the majority of nodes needed to have seen it before the previous proof of work was broadcast.  So if miners are working on finding a proof of work for block 19, masternodes need to send their proposed block 20 to the network before miners finish block 19.  Of course people could submit a bunch of bad block 20's to throw miners off but there is no real reason to do this.  Market forces would mean that you want to propose good blocks so if miners use your block you will earn the transaction fees in the block.  Miners are the voters and they need to be well informed of and check the validity of masternode blocks before voting on which one is hashed into the blockchain.  Miners would likey start with the blocks that bid the highest fee ajd check the validity.  Again since the blocks all need to be recieved by the majority of nodes before the last block was finished, there would be little incentive to send bad spam blocks because nodes would have time to pre-verify the blocks before it is time to start mining on top of one of them.%0a> %0a> Even if every sucessful masternode block is created by the mining pool that wins the challenge, still the fact that the block is separated from the blockchain will remedy the reason the blocksize limit was created in the first place.  This bieng that super large blocks are DDOSing the network.  Mined blocks are super small, just a hash, even though they represent lots of transactions.%0a
host:1613459020=192.168.1.4
author:1613458574=
diff:1613458574:1613292176:=27,29c27%0a%3c Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner in time to be mined on, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their masternode blocks to all the network; in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see that masternode block ahead of time, that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network. If a node is consistently holding back sharing their masternode block until they find the proof of work, the other nodes should blacklist this miner and masternode.%0a%3c %0a%3c A rule should be set that in order for a masternode block to be valid, the majority of nodes needed to have seen it before the previous proof of work was broadcast.  So if miners are working on finding a proof of work for block 19, masternodes need to send their proposed block 20 to the network before miners finish block 19.  Of course people could submit a bunch of bad block 20's to throw miners off but there is no real reason to do this.  Market forces would mean that you want to propose good blocks so if miners use your block you will earn the transaction fees in the block.  Miners are the voters and they need to be well informed of and check the validity of masternode blocks before voting on which one is hashed into the blockchain.  Miners would likey start with the blocks that bid the highest fee ajd check the validity.  Again since the blocks all need to be recieved by the majority of nodes before the last block was finished, there would be little incentive to send bad spam blocks because nodes would have time to pre-verify the blocks before it is time to start mining on top of one of them.%0a---%0a> Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their masternode blocks to all the network in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see that masternode block ahead of time, that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network. If a node is consistently holding back sharing their masternode block until they find the proof of work, the other nodes should blacklist this miner and masternode.%0a
host:1613458574=68.2.112.187
author:1613292176=
diff:1613292176:1613292136:=50c50%0a%3c # Miners cannot change transactions. So if a miner sees overlap in transactions from a previous block and the block he wants to mine, he can't mine that block he wanted to.  He must find a masternode block that has no transactions in common with previous mined blocks.  This might incentivize masternodes to narrow their scope; to focus only on one region of the world, or one type of transaction, so as to not overlap other masternodes transactions.%0a---%0a> # Miners cannot change transactions. So if a miner sees overlap in transactions from a previous block and the block he wants to mine, he can't mine that block he wanted to.  He must find a masternode block that has no transactions in common with previous mined blocks.  This might incentivize masterbodes to narrow their scope; to focus only on one region of the world, or one type of transaction, so as to not overlap other masternodes transactions.%0a
host:1613292176=68.2.112.187
author:1613292136=
diff:1613292136:1613292007:=50c50%0a%3c # Miners cannot change transactions. So if a miner sees overlap in transactions from a previous block and the block he wants to mine, he can't mine that block he wanted to.  He must find a masternode block that has no transactions in common with previous mined blocks.  This might incentivize masterbodes to narrow their scope; to focus only on one region of the world, or one type of transaction, so as to not overlap other masternodes transactions.%0a---%0a> # Miners cannot change transactions. So if a miner sees overlap in transactions from a previous block and the block he wants to mine, he can't mine that block he wanted to.  He must find a masternode block that has no transactions in common with previous mined blocks.%0a
host:1613292136=68.2.112.187
author:1613292007=
diff:1613292007:1613291881:=48,50c48%0a%3c # Blockchian will be less searchable because transactions will not be forced to be published immutable forever in the main blockchain.%0a%3c %0a%3c # Miners cannot change transactions. So if a miner sees overlap in transactions from a previous block and the block he wants to mine, he can't mine that block he wanted to.  He must find a masternode block that has no transactions in common with previous mined blocks.%0a---%0a> Blockchian will be less searchable because transactions will not be forced to be published immutable forever in the main blockchain.%0a
host:1613292007=192.168.1.4
author:1613291881=
diff:1613291881:1613291487:=39,41d38%0a%3c %0a%3c !!!!Would lots of big masternode blocks congest the network?%0a%3c In short no, miners can basically just choose the block that has the highest bid, then verify it and use it to start mining on.  They could also preverify a few more of these in case another miner proposes a proof of work with one of those other blocks.%0a
host:1613291881=68.2.112.187
author:1613291487=
diff:1613291487:1613291389:=27c27%0a%3c Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their masternode blocks to all the network in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see that masternode block ahead of time, that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network. If a node is consistently holding back sharing their masternode block until they find the proof of work, the other nodes should blacklist this miner and masternode.%0a---%0a> Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their masternode blocks to all the network in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see that masternode block ahead of time, that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network.  %0a
host:1613291487=68.2.112.187
author:1613291389=
diff:1613291389:1613291080:=27,29c27,29%0a%3c Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their masternode blocks to all the network in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see that masternode block ahead of time, that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network.  %0a%3c %0a%3c Even if every sucessful masternode block is created by the mining pool that wins the challenge, still the fact that the block is separated from the blockchain will remedy the reason the blocksize limit was created in the first place.  This bieng that super large blocks are DDOSing the network.  Mined blocks are super small, just a hash, even though they represent lots of transactions.%0a---%0a> Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their blocks to all the network by their masternode in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see those masternode blocks ahead of time, that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network.  %0a> %0a> Even if every sucessful masternode block is created by the mining pool that wins the challenge, still the fact that the block is separated from the blockchain will remedy the reason the blocksize limit was created in the first place.  This bieng that super large blocks are DDOSing the network.  Mined blocks are super small, just a hash.%0a
host:1613291389=68.2.112.187
author:1613291080=
diff:1613291080:1613291053:=25c25%0a%3c Think of transep as the breaking up of paypal and ebay.  Both of them are needed in an online marketplace, but it is best to keep them separated for more wide and fair adoption.%0a---%0a> Think of transep as the breaking up of paypal and ebay.  Both of them are needed in an online marketplace, but it is best to keep them separated for more wide adoption.%0a
host:1613291080=192.168.1.4
author:1613291053=
diff:1613291053:1613290723:=27c27%0a%3c Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their blocks to all the network by their masternode in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see those masternode blocks ahead of time, that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network.  %0a---%0a> Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their blocks to all the network by their masternode in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see those masternode blocks that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network.  %0a
host:1613291053=192.168.1.4
author:1613290723=
diff:1613290723:1613290626:=19c19%0a%3c Transep may or may not work for deflationary coins like bitcoin and would be best suited to non-deflationary or inflationary coins like Dogecoin.  This is because miners will split the fees with masternodes.%0a---%0a> Transep may or may not work for deflationary coins like bitcoin and would be best suited to non-deflationary or inflationary coins like Dogecoin.%0a
host:1613290723=68.2.112.187
author:1613290626=
diff:1613290626:1613290251:=47,48c47%0a%3c More people will be able to profit instead of just miners.%0a%3c Much shorter blocktime is needed for small miner blocks to propogate network [[https://tradeblock.com/blog/bitcoin-network-capacity-analysis-part-6-data-propagation|#]]. We could have blocktimes as low as 20 seconds which would include time for the tiny miner block to propogate in a second or two and have miners compete for proof of work.%0a\ No newline at end of file%0a---%0a> More people will be able to profit instead of just miners.%0a\ No newline at end of file%0a
host:1613290626=68.2.112.187
author:1613290251=
diff:1613290251:1613289891:=17c17%0a%3c Transep on the other hand separates the entire block from the blockchain and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep the full block info because without it nothing could be verified. In fact with transep miners could pre-verify blocks before a proof of work is completed by the network. With segwit; miners may gloss over not being able to verify the signature hash, because it isn't a core issue of the block validity and they don't want to waste the time when they could be mining.  %0a---%0a> Transep on the other hand separates the entire block from the blockchain and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep the full block info because without it nothing could be verified.  With segwit miners may gloss over not being able to verify the signature hash, because it isn't a core issue of the block validity.  %0a
host:1613290251=68.2.112.187
author:1613289891=
diff:1613289891:1613289741:=17c17%0a%3c Transep on the other hand separates the entire block from the blockchain and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep the full block info because without it nothing could be verified.  With segwit miners may gloss over not being able to verify the signature hash, because it isn't a core issue of the block validity.  %0a---%0a> Transep on the other hand separates the entire block from the blockchain and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep the full block info because without it everything would be missing.  With segwit miners may gloss over not being able to verify the signature hash, because it isn't a core issue of the block validity.  %0a
host:1613289891=68.2.112.187
author:1613289741=
diff:1613289741:1613289712:=1c1%0a%3c (:Summary:Transep: A method for infinite "on-chain" scaling for cryptocurrencies like Bitcoin or Dogecoin that is a safer alternative to Segwit:)%0a---%0a> (:Summary:Transep: A method for infinite "on-chain" scaling cryptocurrencies like Bitcoin or Dogecoin that is a safer alternative to Segwit:)%0a
host:1613289741=68.2.112.187
author:1613289712=
diff:1613289712:1613288567:=33,38d32%0a%3c %0a%3c !!!Why are big masternode blocks not problematic whereas big miner blocks are?%0a%3c %0a%3c The reason is because if a miner sends out a large block with proof of work concurrently, another miner has to verify the entire block and proof of work before starting to mine the next block.  If many miners are sending out large and different blocks with corresponding proof of work, every miner has to verify each one.  If blocks are very big then this can set back miners a lot of time and could basically turn into a DDOS.  If we separate the big block from the blockchain, miners would only send the block hash and their proof of work.  So other miners can determine which miner won the last challenge without verifying the entire block.  Now the loosing miner can look into their own memory and see the masternode block that the winning miner used, and the loosing miner already had that masternode block verified so he can immediately work on mining the next block.  So the issues of having big blocks broadcast at the same time as the proof of work, is solved since everyone already saw the blocks ahead of time.%0a%3c %0a%3c If a miner was colluding with a masternode to not release the masternode block until after the miner already completed the challenge, the network should reject such a block.  Any miner should reject a winning miner if that miner used a masternode block that the rest of the network didn't already recieve with, say, half of the blocktime left.%0a
host:1613289712=68.2.112.187
author:1613288567=
diff:1613288567:1613288180:=27,29c27%0a%3c Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their blocks to all the network by their masternode in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see those masternode blocks that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network.  %0a%3c %0a%3c Even if every sucessful masternode block is created by the mining pool that wins the challenge, still the fact that the block is separated from the blockchain will remedy the reason the blocksize limit was created in the first place.  This bieng that super large blocks are DDOSing the network.  Mined blocks are super small, just a hash.%0a---%0a> Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their blocks to all the network by their masternode in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see those masternode blocks that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network.%0a
host:1613288567=68.2.112.187
author:1613288180=
diff:1613288180:1613287950:=27c27%0a%3c Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their blocks to all the network by their masternode in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see those masternode blocks that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network.%0a---%0a> Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block's has makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their blocks to all the network by their masternode in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see those masternode blocks that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network.%0a
host:1613288180=192.168.1.4
author:1613287950=
diff:1613287950:1613281219:=15,17c15%0a%3c Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.%0a%3c %0a%3c Transep on the other hand separates the entire block from the blockchain and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep the full block info because without it everything would be missing.  With segwit miners may gloss over not being able to verify the signature hash, because it isn't a core issue of the block validity.  %0a---%0a> Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.  Transep separates the entire block from the blockchain and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep the full block info because without it everything would be missing.  With segwit miners may gloss over not being able to verify the signature hash, because it isn't a core issue of the block validity.  %0a
host:1613287950=192.168.1.4
author:1613281219=
diff:1613281219:1613281168:=1c1%0a%3c (:Summary:Transep: A method for infinite "on-chain" scaling cryptocurrencies like Bitcoin or Dogecoin that is a safer alternative to Segwit:)%0a---%0a> (:Summary:Transep: A method for "on-chain" scaling cryptocurrencies like Bitcoin or Dogecoin that is a safer alternative to Segwit:)%0a13c13%0a%3c [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Transep]] https://www.google.com/s2/favicons?domain=naturehacker.org&.png is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate that can infinitely scale.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chain compared to other 2nd layer things we are seeing like paypal or cashapp being intermediaries for using crypto as payments or robinhood being an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has been proven totally right.%0a---%0a> [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Transep]] https://www.google.com/s2/favicons?domain=naturehacker.org&.png is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chain compared to other 2nd layer things we are seeing like paypal or cashapp being intermediaries for using crypto as payments or robinhood being an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has been proven totally right.%0a
host:1613281219=192.168.1.8
author:1613281168=
diff:1613281168:1613280864:=20c20%0a%3c The problem with Segwit is firstly it is not very effective.  It doesn't free up too much space in the blocks since all the transactions are still recorded.  Also the sidechain is limited to signature data, so bigger sidechain blocks aren't possible.  Secondly, there is no one incentivized to maintain the signature data once a block has been "accepted" by the network.  Since the signature data could be ignored or misplaced, the signature hash cannot be verified in that case.%0a---%0a> The problem with Segwit is firstly it is not very effective.  It doesn't free up too much space in the blocks since all the transactions are still recorded.  Secondly, there is no one incentivized to maintain the signature data once a block has been "accepted" by the network.  Since the signature data could be ignored or misplaced, the signature hash cannot be verified in that case.%0a
host:1613281168=192.168.1.8
author:1613280864=
diff:1613280864:1613280851:=13c13%0a%3c [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Transep]] https://www.google.com/s2/favicons?domain=naturehacker.org&.png is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chain compared to other 2nd layer things we are seeing like paypal or cashapp being intermediaries for using crypto as payments or robinhood being an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has been proven totally right.%0a---%0a> [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Transep]]https://www.google.com/s2/favicons?domain=naturehacker.org&.png is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chain compared to other 2nd layer things we are seeing like paypal or cashapp being intermediaries for using crypto as payments or robinhood being an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has been proven totally right.%0a
host:1613280864=192.168.1.8
author:1613280851=
diff:1613280851:1613280831:=13c13%0a%3c [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Transep]]https://www.google.com/s2/favicons?domain=naturehacker.org&.png is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chain compared to other 2nd layer things we are seeing like paypal or cashapp being intermediaries for using crypto as payments or robinhood being an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has been proven totally right.%0a---%0a> [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Transep]] is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chain compared to other 2nd layer things we are seeing like paypal or cashapp being intermediaries for using crypto as payments or robinhood being an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has been proven totally right.%0a
host:1613280851=192.168.1.8
author:1613280831=
diff:1613280831:1613280789:=13c13%0a%3c [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Transep]] is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chain compared to other 2nd layer things we are seeing like paypal or cashapp being intermediaries for using crypto as payments or robinhood being an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has been proven totally right.%0a---%0a> Transep is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chain compared to other 2nd layer things we are seeing like paypal or cashapp being intermediaries for using crypto as payments or robinhood being an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has been proven totally right.%0a
host:1613280831=192.168.1.8
author:1613280789=
diff:1613280789:1613280587:=31,37c31%0a%3c Miners will need to have access to all of the accepted blocks whose hash is recorded in the blockchain.  This is so they can verify that new masternode blocks have not double spent something that another accepted block has spent.  Miners are the ultimate deciders what is valid on the blockchain.  Also masternodes themselves are incentivized to keep the full blockchain including all the transaction data so the blocks they build miners will find valid.  If they are not valid, miners will simply not choose their blocks and then the masternode will not get rewarded the transaction fees for their proposed transactions.  People simply wanting to submit transactions to the network really don't need to have the full dual layer blockchain, they just need the list of valid block hashes by the miners since they know what their transactions that have been accepted by the network are.  So in practice both the masternodes and miners would need to keep on hand both layers of the blockchain.  They can prune this however they see fit to keep the data on hand to make good decisions about how to vote (in the case of miners) or how to build blocks (in the case of masternodes).  "Full nodes" could also be non-voting witnesses with all the data and alert the network if they find a discrepancy for the miners to investigate.%0a%3c %0a%3c !!Pro's and Con's%0a%3c !!!Con's%0a%3c Blockchian will be less searchable because transactions will not be forced to be published immutable forever in the main blockchain.%0a%3c !!!Pro's%0a%3c More people will be able to profit instead of just miners.%0a\ No newline at end of file%0a---%0a> Miners will need to have access to all of the accepted blocks whose hash is recorded in the blockchain.  This is so they can verify that new masternode blocks have not double spent something that another accepted block has spent.  Miners are the ultimate deciders what is valid on the blockchain.  Also masternodes themselves are incentivized to keep the full blockchain including all the transaction data so the blocks they build miners will find valid.  If they are not valid, miners will simply not choose their blocks and then the masternode will not get rewarded the transaction fees for their proposed transactions.  People simply wanting to submit transactions to the network really don't need to have the full dual layer blockchain, they just need the list of valid block hashes by the miners since they know what their transactions that have been accepted by the network are.  So in practice both the masternodes and miners would need to keep on hand both layers of the blockchain.  They can prune this however they see fit to keep the data on hand to make good decisions about how to vote (in the case of miners) or how to build blocks (in the case of masternodes).  "Full nodes" could also be non-voting witnesses with all the data and alert the network if they find a discrepancy for the miners to investigate.%0a\ No newline at end of file%0a
host:1613280789=192.168.1.8
author:1613280587=
diff:1613280587:1613279760:=28d27%0a%3c Attach:transep.png%0a
host:1613280587=192.168.1.8
author:1613279760=
diff:1613279760:1613279733:=15,16c15,16%0a%3c Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.  Transep separates the entire block from the blockchain and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep the full block info because without it everything would be missing.  With segwit miners may gloss over not being able to verify the signature hash, because it isn't a core issue of the block validity.  %0a%3c %0a---%0a> Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.  Transep separates the entire block from the blockchain and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep the full block info because without it everything would be missing.  With segwit miners may gloss over not bieng able to verify the signature hash, because it isn't a core issue of the block validity.  %0a> %0a27c27%0a%3c So lets say there are 10 masternode blocks that have propagated the network.  A miner then chooses one to mine on top of.  He simply takes the hash of the masternode block, then cycles through nonces until the hash of the block and the nonce meets the requirement for proof of work.  Now he sends the block hash and his nonce widely across the network.  When another miner gets it they verify 1. That they have also seen that masternode block, and that the nonce when hashed with that masternode block, gives the required proof of work.  Now this miner is destined to win the next block.  He takes the hash of the last block, hashes it with a new masternode block that isn't double spending what the previous blocks have already spent, and looks for the nonce.  When he finds it, he broadcasts his nonce and hash and thus the cycle repeats.%0a---%0a> So lets say there are 10 masternode blocks that have propogated the network.  A miner then chooses one to mine on top of.  He simply takes the hash of the masternode block, then cycles through nonces until the hash of the block and the nonce meets the requirement for proof of work.  Now he sends the block hash and his nonce widely across the network.  When another miner gets it they verify 1. That they have also seen that masternode block, and that the nonce when hashed with that masternode block, gives the required proof of work.  Now this miner is destined to win the next block.  He takes the hash of the last block, hashes it with a new masternode block that isn't double spending what the previous blocks have already spent, and looks for the nonce.  When he finds it, he broadcasts his nonce and hash and thus the cycle repeats.%0a
host:1613279760=192.168.1.8
author:1613279733=
diff:1613279733:1613279615:=15,17c15%0a%3c Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.  Transep separates the entire block from the blockchain and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep the full block info because without it everything would be missing.  With segwit miners may gloss over not bieng able to verify the signature hash, because it isn't a core issue of the block validity.  %0a%3c %0a%3c Transep may or may not work for deflationary coins like bitcoin and would be best suited to non-deflationary or inflationary coins like Dogecoin.%0a---%0a> Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.  Transep separates the entire block from the blockchain and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep this info.  Transep may or may not work for deflationary coins like bitcoin and would be best suited to non-deflationary or inflationary coins like Dogecoin.%0a
host:1613279733=192.168.1.8
author:1613279615=
diff:1613279615:1613279545:=15c15%0a%3c Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.  Transep separates the entire block from the blockchain and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep this info.  Transep may or may not work for deflationary coins like bitcoin and would be best suited to non-deflationary or inflationary coins like Dogecoin.%0a---%0a> Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.  Transep separates the entire block from the blockchian and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep this info%0a
host:1613279615=192.168.1.8
author:1613279545=
diff:1613279545:1613279377:=15,16c15,16%0a%3c Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.  Transep separates the entire block from the blockchian and only the final hash of the block makes it into the main blockchain.  However both miners and nodes are incentivized to keep this info%0a%3c %0a---%0a> Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.%0a> %0a18c18%0a%3c The problem with Segwit is firstly it is not very effective.  It doesn't free up too much space in the blocks since all the transactions are still recorded.  Secondly, there is no one incentivized to maintain the signature data once a block has been "accepted" by the network.  Since the signature data could be ignored or misplaced, the signature hash cannot be verified in that case.%0a---%0a> The problem with Segwit is firstly it is not very effective.  It doesn't free up too much space in the blocks since all the transactions are still recorded.  Secondly, there is no one incentivized to maintain the signature data once a block has been accepted by the network.%0a
host:1613279545=192.168.1.8
author:1613279377=
diff:1613279377:1613279253:=
host:1613279377=192.168.1.8
author:1613279253=
diff:1613279253:1613277883:=21,28c21%0a%3c Think of transep as the breaking up of paypal and ebay.  Both of them are needed in an online marketplace, but it is best to keep them separated for more wide adoption.%0a%3c %0a%3c Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block's has makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.  In order to be accepted, masternode blocks should be small enough to quickly propagate the network and get in front of every potential miner, and large enough to generate a lot of transaction fees.  Masternodes could also submit a "bid" to miners that since they took in 1 bitcoin in fees they can give the miner 0.5 bitcoin if the miner uses their block.  So this aspect would incentivize masternodes to have big blocks but also minimize how much profit they take for themselves.  Of course a miner could run their own masternode and only use their own blocks in order to minimize a 3rd party masternode taking a cut, but again they may as well submit their blocks to all the network by their masternode in case someone else wins the block they could use their masternode block.  So market forces would incentivize many parties running masternodes.  Also if other miners didn't see those masternode blocks that the winning miner used, they would simply reject the miners winning block.  So again, masternode blocks would need to be widely distributed so that they will be accepted by the network.%0a%3c %0a%3c So lets say there are 10 masternode blocks that have propogated the network.  A miner then chooses one to mine on top of.  He simply takes the hash of the masternode block, then cycles through nonces until the hash of the block and the nonce meets the requirement for proof of work.  Now he sends the block hash and his nonce widely across the network.  When another miner gets it they verify 1. That they have also seen that masternode block, and that the nonce when hashed with that masternode block, gives the required proof of work.  Now this miner is destined to win the next block.  He takes the hash of the last block, hashes it with a new masternode block that isn't double spending what the previous blocks have already spent, and looks for the nonce.  When he finds it, he broadcasts his nonce and hash and thus the cycle repeats.%0a%3c %0a%3c !!!What happens with the block data and transactions?%0a%3c Miners will need to have access to all of the accepted blocks whose hash is recorded in the blockchain.  This is so they can verify that new masternode blocks have not double spent something that another accepted block has spent.  Miners are the ultimate deciders what is valid on the blockchain.  Also masternodes themselves are incentivized to keep the full blockchain including all the transaction data so the blocks they build miners will find valid.  If they are not valid, miners will simply not choose their blocks and then the masternode will not get rewarded the transaction fees for their proposed transactions.  People simply wanting to submit transactions to the network really don't need to have the full dual layer blockchain, they just need the list of valid block hashes by the miners since they know what their transactions that have been accepted by the network are.  So in practice both the masternodes and miners would need to keep on hand both layers of the blockchain.  They can prune this however they see fit to keep the data on hand to make good decisions about how to vote (in the case of miners) or how to build blocks (in the case of masternodes).  "Full nodes" could also be non-voting witnesses with all the data and alert the network if they find a discrepancy for the miners to investigate.%0a\ No newline at end of file%0a---%0a> Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block's has makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.%0a\ No newline at end of file%0a
host:1613279253=192.168.1.8
author:1613277883=
diff:1613277883:1613277516:=10c10%0a%3c (:Archive:[[|Archive.is]], [[|Archive.org]], [[https://www.naturehacker.org/2018/01/transep-faster-and-safer-segwit.html|Original article]]:)%0a---%0a> (:Archive:[[|Archive.is]], [[|Archive.org]]:)%0a21c21%0a%3c Transep which stands for "transaction separation" meaning basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, there can't be DDOS spam of huge blocks that take forever to verify and bloat the blockchain.  Market forces determine which masternode block's has makes it into the blockchain.  Thus the miners, by using proof of work, are merely voting on which masternode block is accepted this round by the network.%0a\ No newline at end of file%0a---%0a> Transep which stands for "transaction separation" means basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain,%0a\ No newline at end of file%0a
host:1613277883=192.168.1.8
author:1613277516=
diff:1613277516:1613277471:=13c13%0a%3c Transep is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chain compared to other 2nd layer things we are seeing like paypal or cashapp being intermediaries for using crypto as payments or robinhood being an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has been proven totally right.%0a---%0a> Transep is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chain compared to other 2nd layer things we are seeing like paypal or cashapp being intermediaries for using crypto as payments or robinhood being an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has proven totally right.%0a
host:1613277516=192.168.1.8
author:1613277471=
diff:1613277471:1613276795:=15,21c15%0a%3c Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.%0a%3c %0a%3c !!Problem with Segwit%0a%3c The problem with Segwit is firstly it is not very effective.  It doesn't free up too much space in the blocks since all the transactions are still recorded.  Secondly, there is no one incentivized to maintain the signature data once a block has been accepted by the network.%0a%3c %0a%3c !!What is Transep%0a%3c Transep which stands for "transaction separation" means basically everything is removed from the blockchain except a final hash of the block.  The block thus is not maintained nor created by miners at all.  Other nodes (hereby called "masternodes") create blocks and collect transaction fees from people submitting transactions.  These blocks made by masternodes can be any size.  Market forces will determine how big these blocks will be.  Masternodes wouldn't want them to be too big as to not propagate the entire network in well under a blocktime, because then miners might not get the block in time to mine a proof of work on top of the block.  However since miners do not need to broadcast these blocks themselves, just confirm that they saw them via including the hash of the block in the blockchain, %0a\ No newline at end of file%0a---%0a> Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.%0a\ No newline at end of file%0a
host:1613277471=192.168.1.8
author:1613276795=
diff:1613276795:1613275693:=13,15c13%0a%3c Transep is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chain compared to other 2nd layer things we are seeing like paypal or cashapp being intermediaries for using crypto as payments or robinhood being an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has proven totally right.%0a%3c %0a%3c Segwit creates a sidechain that is not maintained by anyone where all the signature data from a block is stored.  The hash (merkle root) of all this sidechain signature data is included in the block header of a block.  So even though the signatures are not part of main block persay, the hash of the signatures are and thus can be checked with the signatures when they see them.  The transactions are all kept in the main block, which makes sense because miners want to get transaction fees for each transaction and is necessary for miners to get these fees because eventually bitcoin will not generate any new coins for miners.%0a\ No newline at end of file%0a---%0a> Transep is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chian compared to other 2nd layer things we are seeing like paypal or cashapp bieng intermediaries for using crypto as payments or robinhood bieng an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has proven totally right.%0a\ No newline at end of file%0a
host:1613276795=5.149.253.57
author:1613275693=
diff:1613275693:1613275679:=0a1%0a> (:nogroupheader:)%0a
host:1613275693=5.149.253.57
author:1613275679=
diff:1613275679:1613275679:=1,14d0%0a%3c (:nogroupheader:)%0a%3c (:Summary:Transep: A method for "on-chain" scaling cryptocurrencies like Bitcoin or Dogecoin that is a safer alternative to Segwit:)%0a%3c (:Published:2/13/2021:)%0a%3c (:Author:[[~NatureHacker]]:)%0a%3c (:License:[[https://en.m.wikipedia.org/wiki/Res_communis|Site License]]:)%0a%3c (:Update::)%0a%3c (:Maintainer:[[~NatureHacker]]:)%0a%3c (:Creator:[[]]:)%0a%3c (:Categories:[[!Cryptics]]:)%0a%3c (:Also:none:)%0a%3c (:Archive:[[|Archive.is]], [[|Archive.org]]:)%0a%3c (:Download:[[{$FullName}?action=print|URL]],[[https://www.web2pdfconvert.com/|PDF from URL]]:)%0a%3c %0a%3c Transep is an alternative to Segwit for "on-chain" scaling of cryptocurrency transaction rate.  I use quotes because it is not really on-chain in the sense that it actually uses a sidechain to achieve it.  However it is on-chian compared to other 2nd layer things we are seeing like paypal or cashapp bieng intermediaries for using crypto as payments or robinhood bieng an intermediary for bitcoin investments without actually making individual transactions on the bitcoin network when ownership changes hands.  This commercialized 2nd layer was predicted by Hal Finney in reference to [[https://bitcointalk.org/index.php?topic=2500.msg34211#msg34211|Bitcoin Banks]] and he has proven totally right.%0a\ No newline at end of file%0a
host:1613275679=5.149.253.57
