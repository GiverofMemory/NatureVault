version=pmwiki-2.2.133 ordered=1 urlencoded=1
author=
charset=UTF-8
csum=Outernet operates within the traditional internet just like cryptocurrency does.  The design is composed of three types of users.  Hosts, clients, and keymasters.  The host hosts the encrypted content.  Clients either view the content or upload it.  Keymasters decrypt the content.  Every user is known by a public key.  Instead of clients knowing the IP address they want to connect to, instead they broadcast what they are looking for, either a public key of the host or even a query they are searching for.  If a keymaster knows they have a decryption key for said website, they will offer the content to that user.  Then the keymaster will send along the decryption key to another keymaster and the new keymaster will listen for new requests.  Also the new keymaster sends a new OP address (which is a public key itself) to the public key of the web host as that new key is what they keymaster will sign for.  One very important thing here is the host should not be able to search for their public key and have a keymaster decrypt their site.  That would allow for censorship if the host could see what he was hosting.  So the only one who should know what a hosts public address is hosting should be the current keymaster for the site and the clients, host, or even other keymasters (even ones that have decrypted the site in the past) should not be able to link content to which host it is on. 
ctime=1631595229
name=NatureVault.Outernet
rev=19
targets=NatureVault.Encryption,CryptoProjects.CollectBit
text=(:nogroupheader:)%0a(:Summary::)%0a(:Published::)%0a(:Author:[[~GiverofMemory]]:)%0a(:License:[[https://en.m.wikipedia.org/wiki/Res_communis|Site License]]:)%0a(:Update::)%0a(:Maintainer:[[~GiverofMemory]]:)%0a(:Creator:[[]]:)%0a(:Categories:[[!]]:)%0a(:Also:none:)%0a(:Archive:[[|Archive.is]], [[|Archive.org]]:)%0a(:Download:[[{$FullName}?action=print|URL]],[[https://www.web2pdfconvert.com/|PDF from URL]]:)%0a%0aThe outernet is an internet that is completely encrypted and private.  Not only is tor used for end to end [[encryption]] of traffic, but even the information hosted is encrypted and web hosts do not know what information they are hosting.%0a%0aThe premise for this design is that "information is not a crime".%0a%0aIdea for everyone has a site and socials that link to eachother but it uses standard internet and everyone self hosts [[https://odysee.com/@TimcastIRL:8/cryptocurrency-is-a-positive-force-as:0|#]].%0a%0a!!Design%0a%0aOuternet operates within the traditional internet just like cryptocurrency does.  The design is composed of three types of users.  Hosts, clients, and keymasters.  The host hosts the encrypted content.  Clients either view the content or upload it.  Keymasters decrypt the content.  Every user is known by a public key.  Instead of clients knowing the IP address they want to connect to, instead they broadcast what they are looking for, either a public key of the host or even a query they are searching for.  If a keymaster knows they have a decryption key for said website, they will offer the content to that user.  Then the keymaster will send along the decryption key to another keymaster and the new keymaster will listen for new requests.  Also the new keymaster sends a new OP address (which is a public key itself) to the public key of the web host as that new key is what they keymaster will sign for.  One very important thing here is the host should not be able to search for their public key and have a keymaster decrypt their site.  That would allow for censorship if the host could see what he was hosting.  So the only one who should know what a hosts public address is hosting should be the current keymaster for the site and the clients, host, or even other keymasters (even ones that have decrypted the site in the past) should not be able to link content to which host it is on.%0a%0a!!!Hosts%0a%0aThe host would allow a certain signed public key to upload data to their server.  This data is fully encrypted.  The uploader can both read the data using a signed key, and also write using another key.  Another read key that can read the data is made and given to [[#key|key masters]].%0a%0a!!!Key masters [[#key]]%0a%0aKey masters hold decryption keys for certain websites.  A key master only holds a key for one client request, then signs it to another (random) keymaster.  This can be done privately in something like is done with [[CryptoProjects/CollectBit]].  So you might be able to see who was the keymaster last but that keymaster can no longer decrypt the message since that key was sent to someone else.  Now when a key master decrypts the page for that one client they immediatly sign the key to someone(s) else.  Now when that person signs the key to allow another client to view, it gets recorded in a distributed database or blockchain that they signed it and can not sign again.  So what is happening is that by the time the network knows who can sign to decrypt, they have already signed and cannot sign again.%0a%0aWhen the keymaster decrypts the site for the client, not onpy do they sign the key other kay master(s), the new recieving keymasters also assigns a new OP address to the host.%0a!!!Clients%0a%0aClients use preferably end to end encrypted browsing sessions like Tor to access sites which the keymaster decrypts for them.%0a%0aThe client basically broadcasts to the network of [[#key|key masters]] "I want to access [[#op|OP (Outernet Protocol) address]] rt367rhckdo93urbdhe221gdjsklmc7e3562w".  Then the keymaster who holds the key to view that makes a connection with the client and decrypts the site for them to browse.  This connection time out's after say 10 minutes.  In that time frame preferably the client would download the entire site for viewing.%0a%0a!!OP addresses (Outernet Protocol) [[#op]]%0a%0aOuternet protocol addresses are like IP addresses except they are temporary and change every time they are accessed.%0a%0a!!!Format%0a%0aThey are strings of base58 digits.  Base 58 is taken from bitcoin as it is human readable characters.  For now we will use 37 digits so no two randomly generated addresses will ever match.  Really just as long as two aren't the same at the same time it is fine if they do collide.
time=1632199126
author:1632199126=
diff:1632199126:1632198512:=22c22%0a%3c Outernet operates within the traditional internet just like cryptocurrency does.  The design is composed of three types of users.  Hosts, clients, and keymasters.  The host hosts the encrypted content.  Clients either view the content or upload it.  Keymasters decrypt the content.  Every user is known by a public key.  Instead of clients knowing the IP address they want to connect to, instead they broadcast what they are looking for, either a public key of the host or even a query they are searching for.  If a keymaster knows they have a decryption key for said website, they will offer the content to that user.  Then the keymaster will send along the decryption key to another keymaster and the new keymaster will listen for new requests.  Also the new keymaster sends a new OP address (which is a public key itself) to the public key of the web host as that new key is what they keymaster will sign for.  One very important thing here is the host should not be able to search for their public key and have a keymaster decrypt their site.  That would allow for censorship if the host could see what he was hosting.  So the only one who should know what a hosts public address is hosting should be the current keymaster for the site and the clients, host, or even other keymasters (even ones that have decrypted the site in the past) should not be able to link content to which host it is on.%0a---%0a> Outernet operates within the traditional internet just like cryptocurrency does.  The design is composed of three types of users.  Hosts, clients, and keymasters.  The host hosts the encrypted content.  Clients either view the content or upload it.  Keymasters decrypt the content.  Every user is known by a public key.  Instead of clients knowing the IP address they want to connect to, instead they broadcast what they are looking for, either a public key of the host or even a query they are searching for.  If a keymaster knows they have a decryption key for said website, they will offer the content to that user.  Then the keymaster will send along the decryption key to another keymaster and the new keymaster will listen for new requests.  Also the new keymaster sends a new OP address (which is a public key itself) to the public key of the web host as that new key is what they keymaster will sign for.%0a
author:1632198512=
diff:1632198512:1632197960:=21,22d20%0a%3c %0a%3c Outernet operates within the traditional internet just like cryptocurrency does.  The design is composed of three types of users.  Hosts, clients, and keymasters.  The host hosts the encrypted content.  Clients either view the content or upload it.  Keymasters decrypt the content.  Every user is known by a public key.  Instead of clients knowing the IP address they want to connect to, instead they broadcast what they are looking for, either a public key of the host or even a query they are searching for.  If a keymaster knows they have a decryption key for said website, they will offer the content to that user.  Then the keymaster will send along the decryption key to another keymaster and the new keymaster will listen for new requests.  Also the new keymaster sends a new OP address (which is a public key itself) to the public key of the web host as that new key is what they keymaster will sign for.%0a
author:1632197960=
diff:1632197960:1632197817:=29,30d28%0a%3c %0a%3c When the keymaster decrypts the site for the client, not onpy do they sign the key other kay master(s), the new recieving keymasters also assigns a new OP address to the host.%0a
author:1632197817=
diff:1632197817:1632197579:=37,41c37%0a%3c Outernet protocol addresses are like IP addresses except they are temporary and change every time they are accessed.%0a%3c %0a%3c !!!Format%0a%3c %0a%3c They are strings of base58 digits.  Base 58 is taken from bitcoin as it is human readable characters.  For now we will use 37 digits so no two randomly generated addresses will ever match.  Really just as long as two aren't the same at the same time it is fine if they do collide.%0a\ No newline at end of file%0a---%0a> Outernet protocol addresses are like IP addresses except they are temporary and change every time they are accessed.%0a\ No newline at end of file%0a
author:1632197579=
diff:1632197579:1632197561:=35c35%0a%3c !!OP addresses (Outernet Protocol) [[#op]]%0a---%0a> !!OP addresses (Outernet Protocol)%0a
author:1632197561=
diff:1632197561:1632197470:=33c33%0a%3c The client basically broadcasts to the network of [[#key|key masters]] "I want to access [[#op|OP (Outernet Protocol) address]] rt367rhckdo93urbdhe221gdjsklmc7e3562w".  Then the keymaster who holds the key to view that makes a connection with the client and decrypts the site for them to browse.  This connection time out's after say 10 minutes.  In that time frame preferably the client would download the entire site for viewing.%0a---%0a> The client basically broadcasts to the network of [[#key|key masters]] "I want to access OP (Outernet Protocol) address 345.345.345.213".  Then the keymaster who holds the key to view that makes a connection with the client and decrypts the site for them to browse.  This connection time out's after say 10 minutes.  In that time frame preferably the client would download the entire site for viewing.%0a
author:1632197470=
diff:1632197470:1632197365:=33,37c33%0a%3c The client basically broadcasts to the network of [[#key|key masters]] "I want to access OP (Outernet Protocol) address 345.345.345.213".  Then the keymaster who holds the key to view that makes a connection with the client and decrypts the site for them to browse.  This connection time out's after say 10 minutes.  In that time frame preferably the client would download the entire site for viewing.%0a%3c %0a%3c !!OP addresses (Outernet Protocol)%0a%3c %0a%3c Outernet protocol addresses are like IP addresses except they are temporary and change every time they are accessed.%0a\ No newline at end of file%0a---%0a> The client basically broadcasts to the network of [[#key|key masters]] "I want to access OP (Outernet Protocol) address 345.345.345.213".  Then the keymaster who holds the key to view that makes a connection with the client and decrypts the site for them to browse.  This connection time out's after say 10 minutes.  In that time frame preferably the client would download the entire site for viewing.%0a\ No newline at end of file%0a
author:1632197365=
diff:1632197365:1632197233:=33c33%0a%3c The client basically broadcasts to the network of [[#key|key masters]] "I want to access OP (Outernet Protocol) address 345.345.345.213".  Then the keymaster who holds the key to view that makes a connection with the client and decrypts the site for them to browse.  This connection time out's after say 10 minutes.  In that time frame preferably the client would download the entire site for viewing.%0a\ No newline at end of file%0a---%0a> The client basicallyy broadcasts to the network of [[#key|key masters]] "I want to access OP (Outernet Protocol) address 345.345.345.213"%0a\ No newline at end of file%0a
author:1632197233=
diff:1632197233:1632197101:=31,33c31%0a%3c Clients use preferably end to end encrypted browsing sessions like Tor to access sites which the keymaster decrypts for them.%0a%3c %0a%3c The client basicallyy broadcasts to the network of [[#key|key masters]] "I want to access OP (Outernet Protocol) address 345.345.345.213"%0a\ No newline at end of file%0a---%0a> Clients use preferably end to end encrypted browsing sessions like Tor to access sites which the keymaster decrypts for them.%0a\ No newline at end of file%0a
author:1632197101=
diff:1632197101:1632196771:=28c28%0a%3c Key masters hold decryption keys for certain websites.  A key master only holds a key for one client request, then signs it to another (random) keymaster.  This can be done privately in something like is done with [[CryptoProjects/CollectBit]].  So you might be able to see who was the keymaster last but that keymaster can no longer decrypt the message since that key was sent to someone else.  Now when a key master decrypts the page for that one client they immediatly sign the key to someone(s) else.  Now when that person signs the key to allow another client to view, it gets recorded in a distributed database or blockchain that they signed it and can not sign again.  So what is happening is that by the time the network knows who can sign to decrypt, they have already signed and cannot sign again.%0a---%0a> Key masters hold decryption keys for certain websites.  A key master only holds a key for one client request, then signs it to another (random) keymaster.  This can be done privately off chain in something like is done with [[CryptoProjects/CollectBit]].  So you might be able to see who was the keymaster %0a
author:1632196771=
diff:1632196771:1632196680:=28c28%0a%3c Key masters hold decryption keys for certain websites.  A key master only holds a key for one client request, then signs it to another (random) keymaster.  This can be done privately off chain in something like is done with [[CryptoProjects/CollectBit]].  So you might be able to see who was the keymaster %0a---%0a> Key masters hold decryption keys for certain websites.  A key master only holds a key for one client request, then signs it to another (random) keymaster.  This can be done privately off chain in something like is done with [[crypto projects/collectbit]].  So you might be able to see who was the keymaster %0a
author:1632196680=
diff:1632196680:1632196652:=28c28%0a%3c Key masters hold decryption keys for certain websites.  A key master only holds a key for one client request, then signs it to another (random) keymaster.  This can be done privately off chain in something like is done with [[crypto projects/collectbit]].  So you might be able to see who was the keymaster %0a---%0a> Key masters hold decryption keys for certain websites.  A key master only holds a key for one client request, then signs it to another (random) keymaster.  This can be done privately off chain in something like is done with [[collectbit]].  So you might be able to see who was the keymaster %0a
author:1632196652=
diff:1632196652:1632196606:=28c28%0a%3c Key masters hold decryption keys for certain websites.  A key master only holds a key for one client request, then signs it to another (random) keymaster.  This can be done privately off chain in something like is done with [[collectbit]].  So you might be able to see who was the keymaster %0a---%0a> Key masters hold decryption keys for certain websites.  A key master only holds a key for one client request, then signs it to another (random) keymaster.  This can be done privately off chain in something like is done with [[collect bit]].  So you might be able to see who was the keymaster %0a
author:1632196606=
diff:1632196606:1632196266:=28d27%0a%3c Key masters hold decryption keys for certain websites.  A key master only holds a key for one client request, then signs it to another (random) keymaster.  This can be done privately off chain in something like is done with [[collect bit]].  So you might be able to see who was the keymaster %0a
author:1632196266=
diff:1632196266:1632196202:=28,30c28%0a%3c !!!Clients%0a%3c %0a%3c Clients use preferably end to end encrypted browsing sessions like Tor to access sites which the keymaster decrypts for them.%0a\ No newline at end of file%0a---%0a> !!!Clients%0a\ No newline at end of file%0a
author:1632196202=
diff:1632196202:1632196144:=24c24%0a%3c The host would allow a certain signed public key to upload data to their server.  This data is fully encrypted.  The uploader can both read the data using a signed key, and also write using another key.  Another read key that can read the data is made and given to [[#key|key masters]].%0a---%0a> The host would allow a certain signed public key to upload data to their server.  This data is fully encrypted.  The uploader can both read the data using his signed key, and also write using another key.  Another read key is made and given to [[#key|key masters]].%0a
author:1632196144=
diff:1632196144:1632016250:=18,28c18%0a%3c Idea for everyone has a site and socials that link to eachother but it uses standard internet and everyone self hosts [[https://odysee.com/@TimcastIRL:8/cryptocurrency-is-a-positive-force-as:0|#]].%0a%3c %0a%3c !!Design%0a%3c %0a%3c !!!Hosts%0a%3c %0a%3c The host would allow a certain signed public key to upload data to their server.  This data is fully encrypted.  The uploader can both read the data using his signed key, and also write using another key.  Another read key is made and given to [[#key|key masters]].%0a%3c %0a%3c !!!Key masters [[#key]]%0a%3c %0a%3c !!!Clients%0a\ No newline at end of file%0a---%0a> Idea for everyone has a site and socials that link to eachother but it uses standard internet and everyone self hosts [[https://odysee.com/@TimcastIRL:8/cryptocurrency-is-a-positive-force-as:0|#]].%0a\ No newline at end of file%0a
author:1632016250=
diff:1632016250:1631595229:=16,18c16%0a%3c The premise for this design is that "information is not a crime".%0a%3c %0a%3c Idea for everyone has a site and socials that link to eachother but it uses standard internet and everyone self hosts [[https://odysee.com/@TimcastIRL:8/cryptocurrency-is-a-positive-force-as:0|#]].%0a\ No newline at end of file%0a---%0a> The premise for this design is that "information is not a crime".%0a\ No newline at end of file%0a
author:1631595229=
diff:1631595229:1631595229:=1,16d0%0a%3c (:nogroupheader:)%0a%3c (:Summary::)%0a%3c (:Published::)%0a%3c (:Author:[[~GiverofMemory]]:)%0a%3c (:License:[[https://en.m.wikipedia.org/wiki/Res_communis|Site License]]:)%0a%3c (:Update::)%0a%3c (:Maintainer:[[~GiverofMemory]]:)%0a%3c (:Creator:[[]]:)%0a%3c (:Categories:[[!]]:)%0a%3c (:Also:none:)%0a%3c (:Archive:[[|Archive.is]], [[|Archive.org]]:)%0a%3c (:Download:[[{$FullName}?action=print|URL]],[[https://www.web2pdfconvert.com/|PDF from URL]]:)%0a%3c %0a%3c The outernet is an internet that is completely encrypted and private.  Not only is tor used for end to end [[encryption]] of traffic, but even the information hosted is encrypted and web hosts do not know what information they are hosting.%0a%3c %0a%3c The premise for this design is that "information is not a crime".%0a\ No newline at end of file%0a
